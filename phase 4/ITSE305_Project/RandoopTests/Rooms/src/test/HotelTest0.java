import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class HotelTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0001");
        Hotel hotel1 = new Hotel(0);
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0002");
        Hotel hotel1 = new Hotel(0);
        Room room2 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0003");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0004");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room2);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0005");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass9 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0006");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        java.lang.Class<?> wildcardClass22 = room19.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0007");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass5 = room4.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0008");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0009");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass28 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0010");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        java.lang.Class<?> wildcardClass40 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0011");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0012");
        Hotel hotel1 = new Hotel(1);
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0013");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass58 = room57.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0014");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        hotel23.reserveRoom(room45);
        hotel23.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel23.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        java.lang.Class<?> wildcardClass74 = room69.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0015");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0016");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0017");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        java.lang.Class<?> wildcardClass35 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0018");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0019");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        java.lang.Class<?> wildcardClass32 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0020");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        java.lang.Class<?> wildcardClass41 = room38.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0021");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        hotel23.reserveRoom(room45);
        hotel23.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel23.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        java.lang.Class<?> wildcardClass74 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0022");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0023");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        java.lang.Class<?> wildcardClass57 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0024");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0025");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = room3.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0026");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass4 = room3.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0027");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0028");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass6 = room5.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0029");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0030");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass33 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0031");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0032");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Room room41 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass42 = room41.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room41);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0033");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = room9.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room9);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0034");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0035");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        java.lang.Class<?> wildcardClass41 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0036");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass28 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0037");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        hotel67.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel67.reserveRoom(room85);
        hotel58.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        java.lang.Class<?> wildcardClass90 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0038");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0039");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) 'a');
        hotel43.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel43.reserveRoom(room51);
        hotel43.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel60.reserveRoom(room91);
        hotel56.reserveRoom(room91);
        hotel43.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        java.lang.Class<?> wildcardClass97 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0040");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass13 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0041");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass55 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0042");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        Room room29 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass30 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0043");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass29 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0044");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass29 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0045");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass31 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0046");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        java.lang.Class<?> wildcardClass51 = room47.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0047");
        Hotel hotel1 = new Hotel((int) (short) 100);
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0048");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        Room room57 = hotel1.findAvailableRoom();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        hotel63.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel63.reserveRoom(room81);
        Hotel hotel85 = new Hotel((int) (byte) -1);
        Room room86 = hotel85.findAvailableRoom();
        hotel85.displayRoomStatus();
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel85.reserveRoom(room90);
        Hotel hotel93 = new Hotel((int) (byte) 1);
        Room room94 = hotel93.findAvailableRoom();
        hotel85.reserveRoom(room94);
        hotel63.reserveRoom(room94);
        hotel59.reserveRoom(room94);
        hotel1.reserveRoom(room94);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room94);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0049");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        hotel67.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel67.reserveRoom(room85);
        hotel58.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass91 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0050");
        Hotel hotel1 = new Hotel((int) (short) 10);
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0051");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0052");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Room room41 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass43 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0053");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = room2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0054");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass32 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0055");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel27.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel27.reserveRoom(room73);
        hotel5.reserveRoom(room73);
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        hotel5.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        java.lang.Class<?> wildcardClass88 = room84.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0056");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Room room40 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass41 = room40.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0057");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room8);
        java.lang.Class<?> wildcardClass10 = room8.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0058");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass30 = room29.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0059");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass36 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0060");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        Room room15 = hotel9.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel21.reserveRoom(room52);
        hotel17.reserveRoom(room52);
        hotel9.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass59 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0061");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel3.reserveRoom(room8);
        hotel1.reserveRoom(room8);
        java.lang.Class<?> wildcardClass11 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0062");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass62 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0063");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        hotel42.displayRoomStatus();
        Room room44 = hotel42.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        hotel42.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        Room room69 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass70 = room69.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0064");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) ' ');
        Hotel hotel37 = new Hotel((int) 'a');
        hotel37.displayRoomStatus();
        Room room39 = hotel37.findAvailableRoom();
        hotel35.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        java.lang.Class<?> wildcardClass42 = room39.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0065");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel27.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel27.reserveRoom(room73);
        hotel5.reserveRoom(room73);
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        hotel5.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        java.lang.Class<?> wildcardClass88 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0066");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room63);
        java.lang.Class<?> wildcardClass65 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0067");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room8);
        Hotel hotel11 = new Hotel((int) (byte) -1);
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        hotel11.reserveRoom(room33);
        hotel11.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Room room42 = hotel39.findAvailableRoom();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        hotel44.displayRoomStatus();
        Room room46 = hotel44.findAvailableRoom();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        hotel44.reserveRoom(room66);
        hotel44.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        hotel72.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) -1);
        Room room82 = hotel81.findAvailableRoom();
        hotel81.displayRoomStatus();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel81.reserveRoom(room86);
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel81.reserveRoom(room90);
        hotel72.reserveRoom(room90);
        hotel44.reserveRoom(room90);
        hotel39.reserveRoom(room90);
        hotel11.reserveRoom(room90);
        hotel1.reserveRoom(room90);
        java.lang.Class<?> wildcardClass97 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0068");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        java.lang.Class<?> wildcardClass37 = room32.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0069");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Room room30 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass31 = room30.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0070");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0071");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass35 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0072");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass8 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0073");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass61 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0074");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Hotel hotel33 = new Hotel((int) (short) 0);
        hotel33.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel54.reserveRoom(room63);
        hotel45.reserveRoom(room63);
        hotel36.reserveRoom(room63);
        hotel33.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        java.lang.Class<?> wildcardClass69 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0075");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel27.reserveRoom(room54);
        hotel5.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        java.lang.Class<?> wildcardClass60 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0076");
        Hotel hotel1 = new Hotel((int) (short) 1);
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0077");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        java.lang.Class<?> wildcardClass44 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0078");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        java.lang.Class<?> wildcardClass10 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0079");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass58 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0080");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        java.lang.Class<?> wildcardClass8 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0081");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass66 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0082");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        hotel42.displayRoomStatus();
        Room room44 = hotel42.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        hotel42.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        java.lang.Class<?> wildcardClass69 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0083");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass7 = room6.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0084");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        Room room10 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass11 = room10.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0085");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) 'a');
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel4.reserveRoom(room12);
        hotel4.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel21.reserveRoom(room52);
        hotel17.reserveRoom(room52);
        hotel4.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        java.lang.Class<?> wildcardClass58 = room52.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0086");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass6 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0087");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) ' ');
        Hotel hotel37 = new Hotel((int) 'a');
        hotel37.displayRoomStatus();
        Room room39 = hotel37.findAvailableRoom();
        hotel35.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass43 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0088");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0089");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room30 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass31 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0090");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0091");
        Hotel hotel1 = new Hotel((int) '4');
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0092");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass31 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0093");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Room room23 = hotel1.findAvailableRoom();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Room room28 = hotel25.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel30.reserveRoom(room52);
        hotel30.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel30.reserveRoom(room76);
        hotel25.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        java.lang.Class<?> wildcardClass82 = room76.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0094");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        java.lang.Class<?> wildcardClass42 = room38.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0095");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        java.lang.Class<?> wildcardClass44 = room39.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0096");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        Room room50 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass53 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0097");
        Hotel hotel1 = new Hotel((int) (short) -1);
        Room room2 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0098");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        hotel9.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel9.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        java.lang.Class<?> wildcardClass41 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0099");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel14.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        Hotel hotel55 = new Hotel((int) (short) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel1.reserveRoom(room56);
        java.lang.Class<?> wildcardClass58 = room56.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0100");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room30 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (short) 0);
        Room room34 = hotel33.findAvailableRoom();
        Room room35 = hotel33.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        hotel59.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        hotel68.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel68.reserveRoom(room86);
        hotel59.reserveRoom(room86);
        hotel37.reserveRoom(room86);
        hotel33.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        java.lang.Class<?> wildcardClass93 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0101");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        java.lang.Class<?> wildcardClass30 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0102");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass60 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0103");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass41 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0104");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0105");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel14.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        Hotel hotel55 = new Hotel((int) (short) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel1.reserveRoom(room56);
        java.lang.Class<?> wildcardClass58 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0106");
        Hotel hotel1 = new Hotel((int) (short) 0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel4.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel4.reserveRoom(room31);
        hotel1.reserveRoom(room31);
        java.lang.Class<?> wildcardClass36 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0107");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel41.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        java.lang.Class<?> wildcardClass91 = room85.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0108");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = room2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0109");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel9.reserveRoom(room46);
        hotel6.reserveRoom(room46);
        hotel1.reserveRoom(room46);
        java.lang.Class<?> wildcardClass51 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0110");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        java.lang.Class<?> wildcardClass9 = room7.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0111");
        Hotel hotel1 = new Hotel((int) ' ');
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = room2.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0112");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room61 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass62 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0113");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0114");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0115");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) (short) 0);
        Room room30 = hotel29.findAvailableRoom();
        Room room31 = hotel29.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel42.reserveRoom(room51);
        hotel33.reserveRoom(room51);
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel64.reserveRoom(room82);
        hotel55.reserveRoom(room82);
        hotel33.reserveRoom(room82);
        hotel29.reserveRoom(room82);
        hotel1.reserveRoom(room82);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0116");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        java.lang.Class<?> wildcardClass61 = room59.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0117");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0118");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel1.reserveRoom(room11);
        java.lang.Class<?> wildcardClass14 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0119");
        Hotel hotel1 = new Hotel((int) 'a');
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel3.reserveRoom(room8);
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel3.reserveRoom(room12);
        Room room14 = hotel3.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        java.lang.Class<?> wildcardClass29 = room25.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0120");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass44 = room43.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0121");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass44 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0122");
        Hotel hotel1 = new Hotel((-1));
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0123");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass57 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0124");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        hotel28.displayRoomStatus();
        Room room30 = hotel28.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel28.reserveRoom(room50);
        hotel28.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        hotel56.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel56.reserveRoom(room74);
        hotel28.reserveRoom(room74);
        hotel6.reserveRoom(room74);
        Hotel hotel80 = new Hotel((int) (byte) -1);
        Room room81 = hotel80.findAvailableRoom();
        hotel80.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel80.reserveRoom(room85);
        hotel6.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass90 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0125");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        hotel23.reserveRoom(room45);
        hotel23.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel23.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room83 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0126");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        java.lang.Class<?> wildcardClass61 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0127");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Room room14 = hotel10.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel10.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Room room20 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = room20.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room20);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0128");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        java.lang.Class<?> wildcardClass35 = room32.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0129");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel41.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass93 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0130");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        Room room17 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0131");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        Room room30 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        hotel4.displayRoomStatus();
        Room room33 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (short) 0);
        Room room37 = hotel36.findAvailableRoom();
        Room room38 = hotel36.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        hotel62.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        hotel71.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) -1);
        Room room81 = hotel80.findAvailableRoom();
        hotel80.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel80.reserveRoom(room85);
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel80.reserveRoom(room89);
        hotel71.reserveRoom(room89);
        hotel62.reserveRoom(room89);
        hotel40.reserveRoom(room89);
        hotel36.reserveRoom(room89);
        hotel4.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        java.lang.Class<?> wildcardClass97 = hotel1.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0132");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass5 = room4.getClass();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0133");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0134");
        Hotel hotel1 = new Hotel((int) (byte) 0);
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0135");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass4 = room3.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0136");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel(1);
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        hotel14.reserveRoom(room41);
        hotel10.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass48 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0137");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        Room room50 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass51 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0138");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass55 = room50.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0139");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0140");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0141");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room53 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass54 = room53.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room53);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0142");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel11.reserveRoom(room60);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel11.reserveRoom(room69);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel11.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        java.lang.Class<?> wildcardClass84 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0143");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Room room20 = hotel17.findAvailableRoom();
        Room room21 = hotel17.findAvailableRoom();
        Hotel hotel23 = new Hotel(0);
        hotel23.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel23.reserveRoom(room27);
        Room room29 = hotel23.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel35.reserveRoom(room66);
        hotel31.reserveRoom(room66);
        hotel23.reserveRoom(room66);
        hotel17.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        java.lang.Class<?> wildcardClass73 = room66.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0144");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Room room23 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass24 = room23.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0145");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) ' ');
        Hotel hotel28 = new Hotel((int) (short) 0);
        Room room29 = hotel28.findAvailableRoom();
        Hotel hotel31 = new Hotel(10);
        Room room32 = hotel31.findAvailableRoom();
        hotel28.reserveRoom(room32);
        hotel26.reserveRoom(room32);
        Room room35 = hotel26.findAvailableRoom();
        hotel1.reserveRoom(room35);
        java.lang.Class<?> wildcardClass37 = room35.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0146");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel3.reserveRoom(room8);
        hotel1.reserveRoom(room8);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0147");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0148");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        hotel28.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel28.reserveRoom(room55);
        hotel6.reserveRoom(room55);
        hotel1.reserveRoom(room55);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass62 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0149");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (short) 0);
        Room room25 = hotel24.findAvailableRoom();
        Hotel hotel27 = new Hotel(10);
        Room room28 = hotel27.findAvailableRoom();
        hotel24.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass32 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0150");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Hotel hotel36 = new Hotel(10);
        Room room37 = hotel36.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        hotel39.displayRoomStatus();
        Room room41 = hotel39.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        hotel39.reserveRoom(room61);
        hotel39.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel39.reserveRoom(room76);
        hotel36.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        java.lang.Class<?> wildcardClass81 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0151");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        Room room7 = hotel3.findAvailableRoom();
        Room room8 = hotel3.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel10.reserveRoom(room34);
        hotel10.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (short) 10);
        Room room39 = hotel38.findAvailableRoom();
        hotel10.reserveRoom(room39);
        hotel3.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        java.lang.Class<?> wildcardClass43 = room39.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0152");
        Hotel hotel1 = new Hotel((int) (short) 100);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0153");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) 'a');
        hotel29.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel29.reserveRoom(room37);
        Room room40 = hotel29.findAvailableRoom();
        Room room41 = hotel29.findAvailableRoom();
        hotel1.reserveRoom(room41);
        java.lang.Class<?> wildcardClass43 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0154");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room58 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room60 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room58);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0155");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room52 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass53 = room52.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0156");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass59 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0157");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass68 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0158");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        Room room62 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass63 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0159");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass18 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0160");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel11.reserveRoom(room60);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel11.reserveRoom(room69);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel11.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room84 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass85 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0161");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        java.lang.Class<?> wildcardClass43 = room38.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0162");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass8 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0163");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass6 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0164");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        hotel67.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel67.reserveRoom(room85);
        hotel58.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        java.lang.Class<?> wildcardClass90 = room85.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0165");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        Room room41 = hotel1.findAvailableRoom();
        Room room42 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room42);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0166");
        Hotel hotel1 = new Hotel(0);
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Room room12 = hotel9.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        hotel36.displayRoomStatus();
        Room room38 = hotel36.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel36.reserveRoom(room58);
        hotel36.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel64.reserveRoom(room82);
        hotel36.reserveRoom(room82);
        hotel14.reserveRoom(room82);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel14.reserveRoom(room93);
        hotel9.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        Room room98 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass99 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNull(room98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0167");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        hotel1.reserveRoom(room70);
        Room room73 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNull(room73);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0168");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room68 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass69 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0169");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room39 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass40 = hotel1.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0170");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass52 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0171");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass6 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0172");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass59 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0173");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass59 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0174");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room37 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass38 = room37.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room37);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0175");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel21.reserveRoom(room30);
        hotel12.reserveRoom(room30);
        Room room33 = hotel12.findAvailableRoom();
        Room room34 = hotel12.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Room room39 = hotel36.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        hotel41.displayRoomStatus();
        Room room43 = hotel41.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel54.reserveRoom(room63);
        hotel45.reserveRoom(room63);
        hotel41.reserveRoom(room63);
        hotel41.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        hotel69.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) -1);
        Room room79 = hotel78.findAvailableRoom();
        hotel78.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel78.reserveRoom(room83);
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel78.reserveRoom(room87);
        hotel69.reserveRoom(room87);
        hotel41.reserveRoom(room87);
        hotel36.reserveRoom(room87);
        hotel12.reserveRoom(room87);
        hotel7.reserveRoom(room87);
        hotel1.reserveRoom(room87);
        java.lang.Class<?> wildcardClass95 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0176");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass6 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0177");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        hotel12.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        java.lang.Class<?> wildcardClass45 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0178");
        Hotel hotel1 = new Hotel((int) (short) 0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = room3.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0179");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0180");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0181");
        Hotel hotel1 = new Hotel(0);
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Room room12 = hotel9.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        hotel36.displayRoomStatus();
        Room room38 = hotel36.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel36.reserveRoom(room58);
        hotel36.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel64.reserveRoom(room82);
        hotel36.reserveRoom(room82);
        hotel14.reserveRoom(room82);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel14.reserveRoom(room93);
        hotel9.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        Room room98 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNull(room98);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0182");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Hotel hotel33 = new Hotel((int) 'a');
        hotel33.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel33.reserveRoom(room41);
        Room room44 = hotel33.findAvailableRoom();
        hotel1.reserveRoom(room44);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room44);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0183");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass9 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0184");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        hotel24.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        hotel24.reserveRoom(room42);
        hotel15.reserveRoom(room42);
        hotel7.reserveRoom(room42);
        hotel4.reserveRoom(room42);
        hotel1.reserveRoom(room42);
        java.lang.Class<?> wildcardClass49 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0185");
        Hotel hotel1 = new Hotel((int) (short) 10);
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0186");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel27.reserveRoom(room54);
        hotel5.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        Hotel hotel61 = new Hotel((int) ' ');
        Hotel hotel63 = new Hotel((int) 'a');
        hotel63.displayRoomStatus();
        Room room65 = hotel63.findAvailableRoom();
        hotel61.reserveRoom(room65);
        hotel1.reserveRoom(room65);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass70 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0187");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Hotel hotel31 = new Hotel((int) (byte) 10);
        hotel31.displayRoomStatus();
        hotel31.displayRoomStatus();
        Room room34 = hotel31.findAvailableRoom();
        hotel1.reserveRoom(room34);
        java.lang.Class<?> wildcardClass36 = room34.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0188");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass57 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0189");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        Room room39 = hotel28.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel28.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass54 = room50.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0190");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel(10);
        Room room9 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room9);
        java.lang.Class<?> wildcardClass11 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0191");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        java.lang.Class<?> wildcardClass16 = room13.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0192");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass43 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0193");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        java.lang.Class<?> wildcardClass7 = room5.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0194");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0195");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) 'a');
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel9.reserveRoom(room17);
        hotel9.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel35.reserveRoom(room44);
        hotel26.reserveRoom(room44);
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel26.reserveRoom(room57);
        hotel22.reserveRoom(room57);
        hotel9.reserveRoom(room57);
        hotel6.reserveRoom(room57);
        hotel1.reserveRoom(room57);
        java.lang.Class<?> wildcardClass64 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0196");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass37 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0197");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(0);
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel4.reserveRoom(room8);
        Room room10 = hotel4.findAvailableRoom();
        Hotel hotel12 = new Hotel(0);
        hotel12.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel12.reserveRoom(room16);
        Room room18 = hotel12.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        hotel24.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        hotel24.reserveRoom(room42);
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel24.reserveRoom(room55);
        hotel20.reserveRoom(room55);
        hotel12.reserveRoom(room55);
        hotel4.reserveRoom(room55);
        hotel1.reserveRoom(room55);
        java.lang.Class<?> wildcardClass62 = room55.getClass();
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0198");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Room room14 = hotel10.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel10.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Hotel hotel21 = new Hotel((int) (short) 0);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Room room24 = hotel21.findAvailableRoom();
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) 'a');
        hotel29.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel29.reserveRoom(room37);
        hotel29.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel68.reserveRoom(room77);
        hotel46.reserveRoom(room77);
        hotel42.reserveRoom(room77);
        hotel29.reserveRoom(room77);
        hotel26.reserveRoom(room77);
        hotel21.reserveRoom(room77);
        hotel1.reserveRoom(room77);
        java.lang.Class<?> wildcardClass85 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0199");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass11 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0200");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = room2.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0201");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel1.reserveRoom(room11);
        java.lang.Class<?> wildcardClass14 = room11.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0202");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        Room room37 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass38 = room37.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room37);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0203");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0204");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        hotel24.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        hotel24.reserveRoom(room42);
        hotel15.reserveRoom(room42);
        hotel7.reserveRoom(room42);
        hotel4.reserveRoom(room42);
        hotel1.reserveRoom(room42);
        java.lang.Class<?> wildcardClass49 = room42.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0205");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel(1);
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        hotel14.reserveRoom(room41);
        hotel10.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        java.lang.Class<?> wildcardClass47 = room41.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0206");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        Room room12 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass13 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0207");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        java.lang.Class<?> wildcardClass12 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0208");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Room room32 = hotel29.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        hotel34.displayRoomStatus();
        Room room36 = hotel34.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        hotel38.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel38.reserveRoom(room56);
        hotel34.reserveRoom(room56);
        hotel34.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        hotel62.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel71.reserveRoom(room80);
        hotel62.reserveRoom(room80);
        hotel34.reserveRoom(room80);
        hotel29.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        java.lang.Class<?> wildcardClass86 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0209");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        hotel28.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel28.reserveRoom(room55);
        hotel6.reserveRoom(room55);
        hotel1.reserveRoom(room55);
        java.lang.Class<?> wildcardClass61 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0210");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room52 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass53 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0211");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Room room27 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass28 = room27.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0212");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        Room room62 = hotel1.findAvailableRoom();
        Hotel hotel64 = new Hotel((-1));
        Hotel hotel66 = new Hotel((int) (byte) -1);
        hotel66.displayRoomStatus();
        Room room68 = hotel66.findAvailableRoom();
        Hotel hotel70 = new Hotel((int) (byte) -1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel70.reserveRoom(room75);
        hotel70.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        Hotel hotel87 = new Hotel((int) (byte) 1);
        Room room88 = hotel87.findAvailableRoom();
        hotel79.reserveRoom(room88);
        hotel70.reserveRoom(room88);
        hotel66.reserveRoom(room88);
        hotel64.reserveRoom(room88);
        Hotel hotel94 = new Hotel((int) (byte) 10);
        hotel94.displayRoomStatus();
        hotel94.displayRoomStatus();
        Room room97 = hotel94.findAvailableRoom();
        hotel64.reserveRoom(room97);
        hotel1.reserveRoom(room97);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room97);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0213");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room58 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0214");
        Hotel hotel1 = new Hotel((int) (short) 100);
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = room2.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0215");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass61 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0216");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) 'a');
        hotel43.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel43.reserveRoom(room51);
        hotel43.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel60.reserveRoom(room91);
        hotel56.reserveRoom(room91);
        hotel43.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        java.lang.Class<?> wildcardClass97 = room91.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0217");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room7 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass8 = room7.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0218");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass44 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0219");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = room2.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0220");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        Hotel hotel16 = new Hotel((int) 'a');
        hotel16.displayRoomStatus();
        Room room18 = hotel16.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel20.reserveRoom(room47);
        hotel16.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass54 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0221");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = room5.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0222");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        Room room10 = hotel1.findAvailableRoom();
        Room room11 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass12 = room11.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0223");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) 0);
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) ' ');
        Hotel hotel16 = new Hotel((int) (short) 0);
        Room room17 = hotel16.findAvailableRoom();
        Hotel hotel19 = new Hotel(10);
        Room room20 = hotel19.findAvailableRoom();
        hotel16.reserveRoom(room20);
        hotel14.reserveRoom(room20);
        hotel7.reserveRoom(room20);
        hotel5.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        java.lang.Class<?> wildcardClass26 = room20.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0224");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        java.lang.Class<?> wildcardClass27 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0225");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        hotel13.displayRoomStatus();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel13.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel13.reserveRoom(room59);
        hotel8.reserveRoom(room59);
        hotel1.reserveRoom(room59);
        java.lang.Class<?> wildcardClass65 = room59.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0226");
        Hotel hotel1 = new Hotel(100);
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0227");
        Hotel hotel1 = new Hotel((int) '#');
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = room2.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0228");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (short) 0);
        Room room37 = hotel36.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel43.reserveRoom(room74);
        hotel39.reserveRoom(room74);
        hotel36.reserveRoom(room74);
        hotel36.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) ' ');
        Hotel hotel83 = new Hotel((int) 'a');
        hotel83.displayRoomStatus();
        Room room85 = hotel83.findAvailableRoom();
        hotel81.reserveRoom(room85);
        hotel36.reserveRoom(room85);
        Hotel hotel89 = new Hotel(10);
        Room room90 = hotel89.findAvailableRoom();
        Room room91 = hotel89.findAvailableRoom();
        hotel36.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        java.lang.Class<?> wildcardClass94 = room91.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0229");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass29 = room28.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0230");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Room room30 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass31 = room30.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0231");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) 'a');
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        hotel8.reserveRoom(room32);
        hotel8.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (short) 10);
        Room room37 = hotel36.findAvailableRoom();
        hotel8.reserveRoom(room37);
        hotel1.reserveRoom(room37);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass41 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0232");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Hotel hotel3 = new Hotel(100);
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel27.reserveRoom(room54);
        hotel5.reserveRoom(room54);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Room room63 = hotel60.findAvailableRoom();
        hotel5.reserveRoom(room63);
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        hotel5.reserveRoom(room74);
        hotel3.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        java.lang.Class<?> wildcardClass79 = hotel1.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0233");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        Room room30 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        hotel4.displayRoomStatus();
        Room room33 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (short) 0);
        Room room37 = hotel36.findAvailableRoom();
        Room room38 = hotel36.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        hotel62.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        hotel71.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) -1);
        Room room81 = hotel80.findAvailableRoom();
        hotel80.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel80.reserveRoom(room85);
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel80.reserveRoom(room89);
        hotel71.reserveRoom(room89);
        hotel62.reserveRoom(room89);
        hotel40.reserveRoom(room89);
        hotel36.reserveRoom(room89);
        hotel4.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        java.lang.Class<?> wildcardClass97 = room89.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0234");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        hotel8.displayRoomStatus();
        Room room10 = hotel8.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel21.reserveRoom(room30);
        hotel12.reserveRoom(room30);
        hotel8.reserveRoom(room30);
        hotel8.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel8.reserveRoom(room54);
        hotel3.reserveRoom(room54);
        Room room59 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room61 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room61);
        Room room63 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass64 = room63.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room63);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0235");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel11.reserveRoom(room18);
        hotel1.reserveRoom(room18);
        java.lang.Class<?> wildcardClass22 = room18.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0236");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        Room room12 = hotel1.findAvailableRoom();
        Room room13 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass14 = room13.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0237");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        Room room15 = hotel9.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel21.reserveRoom(room52);
        hotel17.reserveRoom(room52);
        hotel9.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass60 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0238");
        Hotel hotel1 = new Hotel((int) ' ');
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0239");
        Hotel hotel1 = new Hotel((int) (short) 100);
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0240");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass29 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0241");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        hotel10.displayRoomStatus();
        Room room12 = hotel10.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        hotel36.displayRoomStatus();
        Room room38 = hotel36.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel36.reserveRoom(room58);
        hotel36.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel64.reserveRoom(room82);
        hotel36.reserveRoom(room82);
        hotel14.reserveRoom(room82);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel14.reserveRoom(room93);
        hotel10.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        java.lang.Class<?> wildcardClass98 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0242");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room61 = hotel1.findAvailableRoom();
        Hotel hotel63 = new Hotel(0);
        hotel63.displayRoomStatus();
        Room room65 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        hotel63.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel63.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0243");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel11.reserveRoom(room60);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel11.reserveRoom(room69);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel11.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room84 = hotel1.findAvailableRoom();
        Hotel hotel86 = new Hotel((int) (byte) -1);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel86.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        java.lang.Class<?> wildcardClass97 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0244");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass58 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0245");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass45 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0246");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        hotel13.displayRoomStatus();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel13.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel13.reserveRoom(room59);
        hotel8.reserveRoom(room59);
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass66 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0247");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        java.lang.Class<?> wildcardClass27 = room23.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0248");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room4);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0249");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass62 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0250");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        Hotel hotel45 = new Hotel(0);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Hotel hotel50 = new Hotel(0);
        hotel50.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel50.reserveRoom(room54);
        hotel45.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass59 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0251");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room58 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass59 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0252");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room38 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass39 = room38.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room38);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0253");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        java.lang.Class<?> wildcardClass37 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0254");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0255");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (short) 0);
        Room room25 = hotel24.findAvailableRoom();
        Hotel hotel27 = new Hotel(10);
        Room room28 = hotel27.findAvailableRoom();
        hotel24.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        Room room32 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass33 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0256");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room32 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0257");
        Hotel hotel1 = new Hotel((int) (short) 100);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass4 = room3.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0258");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel7.reserveRoom(room34);
        Hotel hotel39 = new Hotel((int) 'a');
        hotel39.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel39.reserveRoom(room47);
        Room room50 = hotel39.findAvailableRoom();
        hotel7.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass53 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0259");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = room4.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0260");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room20 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass21 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0261");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        Room room37 = hotel1.findAvailableRoom();
        Room room38 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room38);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0262");
        Hotel hotel1 = new Hotel((int) (short) 10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0263");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel(0);
        hotel6.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass14 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0264");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        hotel9.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel9.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass42 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0265");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (short) 0);
        Room room25 = hotel24.findAvailableRoom();
        Hotel hotel27 = new Hotel(10);
        Room room28 = hotel27.findAvailableRoom();
        hotel24.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Room room31 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass32 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0266");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room63);
        Room room65 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass66 = room65.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room65);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0267");
        Hotel hotel1 = new Hotel((int) ' ');
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0268");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        java.lang.Class<?> wildcardClass10 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0269");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Hotel hotel42 = new Hotel((int) (byte) -1);
        hotel42.displayRoomStatus();
        Room room44 = hotel42.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        hotel42.reserveRoom(room64);
        Room room68 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) ' ');
        Hotel hotel73 = new Hotel((int) 'a');
        hotel73.displayRoomStatus();
        Room room75 = hotel73.findAvailableRoom();
        hotel71.reserveRoom(room75);
        hotel42.reserveRoom(room75);
        hotel1.reserveRoom(room75);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room75);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0270");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        Hotel hotel45 = new Hotel(0);
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Room room50 = hotel47.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel4.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room50);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0271");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Room room12 = hotel9.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Room room35 = hotel14.findAvailableRoom();
        Room room36 = hotel14.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room41 = hotel38.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        hotel43.displayRoomStatus();
        Room room45 = hotel43.findAvailableRoom();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        hotel47.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel56.reserveRoom(room65);
        hotel47.reserveRoom(room65);
        hotel43.reserveRoom(room65);
        hotel43.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        hotel71.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) -1);
        Room room81 = hotel80.findAvailableRoom();
        hotel80.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel80.reserveRoom(room85);
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel80.reserveRoom(room89);
        hotel71.reserveRoom(room89);
        hotel43.reserveRoom(room89);
        hotel38.reserveRoom(room89);
        hotel14.reserveRoom(room89);
        hotel9.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        Room room97 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNull(room97);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0272");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) 'a');
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel9.reserveRoom(room17);
        hotel9.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel35.reserveRoom(room44);
        hotel26.reserveRoom(room44);
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel26.reserveRoom(room57);
        hotel22.reserveRoom(room57);
        hotel9.reserveRoom(room57);
        hotel6.reserveRoom(room57);
        hotel1.reserveRoom(room57);
        java.lang.Class<?> wildcardClass64 = room57.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0273");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room37 = hotel1.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel39.reserveRoom(room57);
        Hotel hotel61 = new Hotel((int) (byte) -1);
        Room room62 = hotel61.findAvailableRoom();
        hotel61.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel61.reserveRoom(room66);
        hotel61.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) -1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel70.reserveRoom(room75);
        hotel70.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        Hotel hotel87 = new Hotel((int) (byte) 1);
        Room room88 = hotel87.findAvailableRoom();
        hotel79.reserveRoom(room88);
        hotel70.reserveRoom(room88);
        hotel61.reserveRoom(room88);
        hotel39.reserveRoom(room88);
        hotel1.reserveRoom(room88);
        Room room94 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room88);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0274");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Room room23 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass24 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0275");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel31.reserveRoom(room53);
        hotel31.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel59.reserveRoom(room68);
        hotel31.reserveRoom(room68);
        hotel1.reserveRoom(room68);
        java.lang.Class<?> wildcardClass72 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0276");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass8 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0277");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass9 = room8.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0278");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        Room room19 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = room19.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room19);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0279");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        Room room43 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0280");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel(1);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel10.reserveRoom(room37);
        hotel6.reserveRoom(room37);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Room room44 = hotel6.findAvailableRoom();
        hotel1.reserveRoom(room44);
        Room room46 = hotel1.findAvailableRoom();
        Room room47 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass48 = room47.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0281");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel(1);
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        hotel14.reserveRoom(room41);
        hotel10.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        hotel57.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel57.reserveRoom(room75);
        hotel48.reserveRoom(room75);
        hotel48.displayRoomStatus();
        hotel48.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) ' ');
        Hotel hotel84 = new Hotel((int) 'a');
        hotel84.displayRoomStatus();
        Room room86 = hotel84.findAvailableRoom();
        hotel82.reserveRoom(room86);
        hotel48.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room86);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0282");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel(1);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel10.reserveRoom(room37);
        hotel6.reserveRoom(room37);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Room room44 = hotel6.findAvailableRoom();
        hotel1.reserveRoom(room44);
        Room room46 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass47 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0283");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room52 = hotel1.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Room room57 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        hotel54.displayRoomStatus();
        Room room60 = hotel54.findAvailableRoom();
        hotel1.reserveRoom(room60);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room60);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0284");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        java.lang.Class<?> wildcardClass37 = room32.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0285");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room7 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass8 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0286");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        Room room10 = hotel1.findAvailableRoom();
        Room room11 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass12 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0287");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel14.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass55 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0288");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel41.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass92 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0289");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        Hotel hotel16 = new Hotel((int) 'a');
        hotel16.displayRoomStatus();
        Room room18 = hotel16.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel20.reserveRoom(room47);
        hotel16.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        hotel1.displayRoomStatus();
        Hotel hotel55 = new Hotel(1);
        hotel55.displayRoomStatus();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        hotel59.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        hotel68.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel68.reserveRoom(room86);
        hotel59.reserveRoom(room86);
        hotel55.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        java.lang.Class<?> wildcardClass92 = room86.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0290");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Hotel hotel33 = new Hotel((int) 'a');
        hotel33.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel33.reserveRoom(room41);
        Room room44 = hotel33.findAvailableRoom();
        hotel1.reserveRoom(room44);
        Hotel hotel47 = new Hotel(0);
        hotel47.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel47.reserveRoom(room51);
        Room room53 = hotel47.findAvailableRoom();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        hotel59.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel68.reserveRoom(room77);
        hotel59.reserveRoom(room77);
        Hotel hotel81 = new Hotel((int) (byte) -1);
        Room room82 = hotel81.findAvailableRoom();
        hotel81.displayRoomStatus();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel81.reserveRoom(room86);
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel81.reserveRoom(room90);
        hotel59.reserveRoom(room90);
        hotel55.reserveRoom(room90);
        hotel47.reserveRoom(room90);
        hotel1.reserveRoom(room90);
        Room room96 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass97 = room96.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNull(room96);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0291");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass10 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0292");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        Room room15 = hotel9.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel21.reserveRoom(room52);
        hotel17.reserveRoom(room52);
        hotel9.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass60 = room59.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room59);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0293");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        hotel1.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (short) -1);
        hotel18.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) 'a');
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        Room room34 = hotel23.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel23.reserveRoom(room45);
        hotel21.reserveRoom(room45);
        hotel18.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        Hotel hotel52 = new Hotel(10);
        Room room53 = hotel52.findAvailableRoom();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        hotel55.displayRoomStatus();
        Room room57 = hotel55.findAvailableRoom();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        hotel59.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel68.reserveRoom(room77);
        hotel59.reserveRoom(room77);
        hotel55.reserveRoom(room77);
        hotel55.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) -1);
        Room room84 = hotel83.findAvailableRoom();
        hotel83.displayRoomStatus();
        Hotel hotel87 = new Hotel((int) (byte) 1);
        Room room88 = hotel87.findAvailableRoom();
        hotel83.reserveRoom(room88);
        Hotel hotel91 = new Hotel((int) (byte) 1);
        Room room92 = hotel91.findAvailableRoom();
        hotel83.reserveRoom(room92);
        hotel55.reserveRoom(room92);
        hotel52.reserveRoom(room92);
        hotel1.reserveRoom(room92);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room92);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0294");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass63 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0295");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        Hotel hotel16 = new Hotel((int) 'a');
        hotel16.displayRoomStatus();
        Room room18 = hotel16.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel20.reserveRoom(room47);
        hotel16.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        java.lang.Class<?> wildcardClass53 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0296");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (short) 0);
        Room room37 = hotel36.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel43.reserveRoom(room74);
        hotel39.reserveRoom(room74);
        hotel36.reserveRoom(room74);
        hotel36.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) ' ');
        Hotel hotel83 = new Hotel((int) 'a');
        hotel83.displayRoomStatus();
        Room room85 = hotel83.findAvailableRoom();
        hotel81.reserveRoom(room85);
        hotel36.reserveRoom(room85);
        Hotel hotel89 = new Hotel(10);
        Room room90 = hotel89.findAvailableRoom();
        Room room91 = hotel89.findAvailableRoom();
        hotel36.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room91);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0297");
        Hotel hotel1 = new Hotel((int) (short) 0);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0298");
        Hotel hotel1 = new Hotel((int) (byte) 100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        hotel12.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        java.lang.Class<?> wildcardClass45 = room39.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0299");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room65 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room67 = hotel62.findAvailableRoom();
        Room room68 = hotel62.findAvailableRoom();
        hotel1.reserveRoom(room68);
        java.lang.Class<?> wildcardClass70 = room68.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0300");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel(1);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel10.reserveRoom(room37);
        hotel6.reserveRoom(room37);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Room room44 = hotel6.findAvailableRoom();
        hotel1.reserveRoom(room44);
        java.lang.Class<?> wildcardClass46 = room44.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0301");
        Hotel hotel1 = new Hotel((int) (short) 1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel7.reserveRoom(room34);
        Hotel hotel39 = new Hotel((int) (short) 0);
        hotel39.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel42.reserveRoom(room69);
        hotel39.reserveRoom(room69);
        hotel7.reserveRoom(room69);
        hotel4.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        java.lang.Class<?> wildcardClass77 = room69.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0302");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass29 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0303");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (short) 0);
        Room room15 = hotel14.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) 'a');
        hotel17.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel17.reserveRoom(room25);
        Room room28 = hotel17.findAvailableRoom();
        Room room29 = hotel17.findAvailableRoom();
        hotel14.reserveRoom(room29);
        hotel7.reserveRoom(room29);
        hotel1.reserveRoom(room29);
        java.lang.Class<?> wildcardClass33 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0304");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) ' ');
        Hotel hotel7 = new Hotel((int) 'a');
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        hotel5.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        java.lang.Class<?> wildcardClass12 = room9.getClass();
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0305");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Room room12 = hotel9.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Room room35 = hotel14.findAvailableRoom();
        Room room36 = hotel14.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room41 = hotel38.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        hotel43.displayRoomStatus();
        Room room45 = hotel43.findAvailableRoom();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        hotel47.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel56.reserveRoom(room65);
        hotel47.reserveRoom(room65);
        hotel43.reserveRoom(room65);
        hotel43.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        hotel71.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) -1);
        Room room81 = hotel80.findAvailableRoom();
        hotel80.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel80.reserveRoom(room85);
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel80.reserveRoom(room89);
        hotel71.reserveRoom(room89);
        hotel43.reserveRoom(room89);
        hotel38.reserveRoom(room89);
        hotel14.reserveRoom(room89);
        hotel9.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        java.lang.Class<?> wildcardClass97 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0306");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room65 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room67 = hotel62.findAvailableRoom();
        Room room68 = hotel62.findAvailableRoom();
        hotel1.reserveRoom(room68);
        java.lang.Class<?> wildcardClass70 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0307");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room5);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0308");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Hotel hotel31 = new Hotel((int) (byte) 10);
        hotel31.displayRoomStatus();
        hotel31.displayRoomStatus();
        Room room34 = hotel31.findAvailableRoom();
        hotel1.reserveRoom(room34);
        Room room36 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass37 = room36.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room36);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0309");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room30 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass33 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0310");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass10 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0311");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel29.reserveRoom(room60);
        Room room63 = hotel29.findAvailableRoom();
        Room room64 = hotel29.findAvailableRoom();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room71 = hotel66.findAvailableRoom();
        hotel29.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        java.lang.Class<?> wildcardClass74 = room71.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0312");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room36 = hotel1.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Room room41 = hotel38.findAvailableRoom();
        Hotel hotel43 = new Hotel(1);
        hotel43.displayRoomStatus();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        hotel47.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        hotel56.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel56.reserveRoom(room74);
        hotel47.reserveRoom(room74);
        hotel43.reserveRoom(room74);
        hotel43.displayRoomStatus();
        hotel43.displayRoomStatus();
        Room room81 = hotel43.findAvailableRoom();
        hotel38.reserveRoom(room81);
        Room room83 = hotel38.findAvailableRoom();
        hotel1.reserveRoom(room83);
        java.lang.Class<?> wildcardClass85 = room83.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0313");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Room room23 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass25 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0314");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) ' ');
        Hotel hotel48 = new Hotel((int) 'a');
        hotel48.displayRoomStatus();
        Room room50 = hotel48.findAvailableRoom();
        hotel46.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel54 = new Hotel(10);
        Room room55 = hotel54.findAvailableRoom();
        Room room56 = hotel54.findAvailableRoom();
        hotel1.reserveRoom(room56);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room56);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0315");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel4.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel4.reserveRoom(room31);
        Hotel hotel36 = new Hotel((int) (short) 0);
        hotel36.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        hotel39.reserveRoom(room66);
        hotel36.reserveRoom(room66);
        hotel4.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        java.lang.Class<?> wildcardClass73 = room66.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0316");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room30 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass34 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0317");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room65 = hotel7.findAvailableRoom();
        Room room66 = hotel7.findAvailableRoom();
        Hotel hotel68 = new Hotel((-1));
        Hotel hotel70 = new Hotel((int) (byte) -1);
        hotel70.displayRoomStatus();
        Room room72 = hotel70.findAvailableRoom();
        Hotel hotel74 = new Hotel((int) (byte) -1);
        Room room75 = hotel74.findAvailableRoom();
        hotel74.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) 1);
        Room room79 = hotel78.findAvailableRoom();
        hotel74.reserveRoom(room79);
        hotel74.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) -1);
        Room room84 = hotel83.findAvailableRoom();
        hotel83.displayRoomStatus();
        Hotel hotel87 = new Hotel((int) (byte) 1);
        Room room88 = hotel87.findAvailableRoom();
        hotel83.reserveRoom(room88);
        Hotel hotel91 = new Hotel((int) (byte) 1);
        Room room92 = hotel91.findAvailableRoom();
        hotel83.reserveRoom(room92);
        hotel74.reserveRoom(room92);
        hotel70.reserveRoom(room92);
        hotel68.reserveRoom(room92);
        hotel7.reserveRoom(room92);
        hotel1.reserveRoom(room92);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room92);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0318");
        Hotel hotel1 = new Hotel(0);
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        hotel15.displayRoomStatus();
        Room room17 = hotel15.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel15.reserveRoom(room37);
        hotel15.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        hotel15.reserveRoom(room61);
        hotel10.reserveRoom(room61);
        Room room66 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room68 = hotel10.findAvailableRoom();
        hotel1.reserveRoom(room68);
        hotel1.displayRoomStatus();
        Room room71 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room68);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0319");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) ' ');
        Hotel hotel37 = new Hotel((int) 'a');
        hotel37.displayRoomStatus();
        Room room39 = hotel37.findAvailableRoom();
        hotel35.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        java.lang.Class<?> wildcardClass42 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0320");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Hotel hotel46 = new Hotel(0);
        hotel46.displayRoomStatus();
        Room room48 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel51 = new Hotel(10);
        Room room52 = hotel51.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        hotel54.displayRoomStatus();
        Room room56 = hotel54.findAvailableRoom();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel54.reserveRoom(room76);
        hotel54.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel54.reserveRoom(room91);
        hotel51.reserveRoom(room91);
        hotel46.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room99 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(room99);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0321");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0322");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Room room40 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass42 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0323");
        Hotel hotel1 = new Hotel((int) (short) 1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass6 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0324");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room52 = hotel1.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Room room57 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        hotel54.displayRoomStatus();
        Room room60 = hotel54.findAvailableRoom();
        hotel1.reserveRoom(room60);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass63 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0325");
        Hotel hotel1 = new Hotel(100);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel3.reserveRoom(room8);
        hotel3.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel12.reserveRoom(room21);
        hotel3.reserveRoom(room21);
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel25.reserveRoom(room52);
        hotel3.reserveRoom(room52);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Room room61 = hotel58.findAvailableRoom();
        hotel3.reserveRoom(room61);
        hotel3.displayRoomStatus();
        hotel3.displayRoomStatus();
        hotel3.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        hotel3.reserveRoom(room72);
        hotel1.reserveRoom(room72);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0326");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = room2.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0327");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room24 = hotel1.findAvailableRoom();
        Hotel hotel26 = new Hotel((-1));
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Room room31 = hotel28.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        hotel33.displayRoomStatus();
        Room room35 = hotel33.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel33.reserveRoom(room55);
        hotel33.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) -1);
        Room room62 = hotel61.findAvailableRoom();
        hotel61.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel61.reserveRoom(room66);
        hotel61.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) -1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel70.reserveRoom(room75);
        Hotel hotel78 = new Hotel((int) (byte) 1);
        Room room79 = hotel78.findAvailableRoom();
        hotel70.reserveRoom(room79);
        hotel61.reserveRoom(room79);
        hotel33.reserveRoom(room79);
        hotel28.reserveRoom(room79);
        Room room84 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Room room86 = hotel28.findAvailableRoom();
        hotel26.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        Room room89 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room86);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0328");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Hotel hotel46 = new Hotel(0);
        hotel46.displayRoomStatus();
        Room room48 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel51 = new Hotel(10);
        Room room52 = hotel51.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        hotel54.displayRoomStatus();
        Room room56 = hotel54.findAvailableRoom();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel54.reserveRoom(room76);
        hotel54.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel54.reserveRoom(room91);
        hotel51.reserveRoom(room91);
        hotel46.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        hotel1.displayRoomStatus();
        Room room98 = hotel1.findAvailableRoom();
        Room room99 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(room98);
        org.junit.Assert.assertNotNull(room99);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0329");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) 'a');
        hotel69.displayRoomStatus();
        Room room71 = hotel69.findAvailableRoom();
        hotel1.reserveRoom(room71);
        java.lang.Class<?> wildcardClass73 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0330");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        Room room29 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass30 = room29.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0331");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass27 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0332");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        hotel1.reserveRoom(room70);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass74 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0333");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass37 = room36.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0334");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Room room14 = hotel10.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel10.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        java.lang.Class<?> wildcardClass20 = room17.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0335");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) ' ');
        Hotel hotel16 = new Hotel((int) (short) 0);
        Room room17 = hotel16.findAvailableRoom();
        Hotel hotel19 = new Hotel(10);
        Room room20 = hotel19.findAvailableRoom();
        hotel16.reserveRoom(room20);
        hotel14.reserveRoom(room20);
        hotel7.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        java.lang.Class<?> wildcardClass25 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0336");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        hotel38.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel38.reserveRoom(room56);
        Hotel hotel60 = new Hotel((int) 'a');
        hotel60.displayRoomStatus();
        Room room62 = hotel60.findAvailableRoom();
        hotel38.reserveRoom(room62);
        hotel1.reserveRoom(room62);
        java.lang.Class<?> wildcardClass65 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0337");
        Hotel hotel1 = new Hotel((int) (byte) 100);
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0338");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel7.reserveRoom(room11);
        Room room13 = hotel7.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel15.reserveRoom(room50);
        hotel7.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass56 = room50.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0339");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        hotel42.displayRoomStatus();
        Room room44 = hotel42.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        hotel42.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        Room room69 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass71 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0340");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Room room15 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Room room21 = hotel18.findAvailableRoom();
        Room room22 = hotel18.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel18.reserveRoom(room25);
        hotel9.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (short) 0);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Room room32 = hotel29.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) (short) 0);
        Room room35 = hotel34.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) 'a');
        hotel37.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel37.reserveRoom(room45);
        hotel37.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel37.reserveRoom(room85);
        hotel34.reserveRoom(room85);
        hotel29.reserveRoom(room85);
        hotel9.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        java.lang.Class<?> wildcardClass94 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0341");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        Hotel hotel45 = new Hotel(0);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Hotel hotel50 = new Hotel(0);
        hotel50.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel50.reserveRoom(room54);
        hotel45.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        java.lang.Class<?> wildcardClass58 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0342");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (short) 0);
        Room room8 = hotel7.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) 'a');
        hotel10.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel10.reserveRoom(room18);
        hotel10.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel27.reserveRoom(room58);
        hotel23.reserveRoom(room58);
        hotel10.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        hotel1.reserveRoom(room58);
        Room room65 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass66 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0343");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        Hotel hotel45 = new Hotel(0);
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Room room50 = hotel47.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel4.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass54 = hotel1.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0344");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        hotel8.displayRoomStatus();
        Room room10 = hotel8.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel21.reserveRoom(room30);
        hotel12.reserveRoom(room30);
        hotel8.reserveRoom(room30);
        hotel8.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel8.reserveRoom(room54);
        hotel3.reserveRoom(room54);
        Room room59 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room61 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room61);
        java.lang.Class<?> wildcardClass63 = room61.getClass();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0345");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Room room41 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        hotel44.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        Room room58 = hotel47.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel47.reserveRoom(room69);
        hotel44.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        java.lang.Class<?> wildcardClass74 = room69.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0346");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel(0);
        hotel8.displayRoomStatus();
        Room room10 = hotel8.findAvailableRoom();
        Room room11 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        hotel8.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) ' ');
        Hotel hotel17 = new Hotel((int) (short) 0);
        Room room18 = hotel17.findAvailableRoom();
        Hotel hotel20 = new Hotel(10);
        Room room21 = hotel20.findAvailableRoom();
        hotel17.reserveRoom(room21);
        hotel15.reserveRoom(room21);
        hotel8.reserveRoom(room21);
        hotel8.displayRoomStatus();
        Hotel hotel27 = new Hotel((-1));
        Hotel hotel29 = new Hotel((int) (byte) -1);
        hotel29.displayRoomStatus();
        Room room31 = hotel29.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel42.reserveRoom(room51);
        hotel33.reserveRoom(room51);
        hotel29.reserveRoom(room51);
        hotel27.reserveRoom(room51);
        Hotel hotel57 = new Hotel(0);
        hotel57.displayRoomStatus();
        Room room59 = hotel57.findAvailableRoom();
        Room room60 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        hotel57.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) ' ');
        Hotel hotel66 = new Hotel((int) (short) 0);
        Room room67 = hotel66.findAvailableRoom();
        Hotel hotel69 = new Hotel(10);
        Room room70 = hotel69.findAvailableRoom();
        hotel66.reserveRoom(room70);
        hotel64.reserveRoom(room70);
        hotel57.reserveRoom(room70);
        hotel27.reserveRoom(room70);
        hotel8.reserveRoom(room70);
        hotel1.reserveRoom(room70);
        java.lang.Class<?> wildcardClass77 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0347");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0348");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel(10);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) 'a');
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        hotel16.reserveRoom(room43);
        hotel12.reserveRoom(room43);
        hotel9.reserveRoom(room43);
        hotel1.reserveRoom(room43);
        Room room50 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass51 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0349");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        Hotel hotel45 = new Hotel(0);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Hotel hotel50 = new Hotel(0);
        hotel50.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel50.reserveRoom(room54);
        hotel45.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0350");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room8);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0351");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (short) 100);
        Room room31 = hotel30.findAvailableRoom();
        hotel1.reserveRoom(room31);
        Room room33 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass34 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0352");
        Hotel hotel1 = new Hotel((int) '#');
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0353");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room65 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room67 = hotel62.findAvailableRoom();
        Room room68 = hotel62.findAvailableRoom();
        hotel1.reserveRoom(room68);
        Room room70 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass71 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0354");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        hotel13.displayRoomStatus();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel13.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel13.reserveRoom(room59);
        hotel8.reserveRoom(room59);
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (short) 0);
        Room room68 = hotel67.findAvailableRoom();
        Hotel hotel70 = new Hotel(10);
        Room room71 = hotel70.findAvailableRoom();
        hotel67.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        java.lang.Class<?> wildcardClass74 = room71.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0355");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (short) 0);
        Room room15 = hotel14.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) 'a');
        hotel17.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel17.reserveRoom(room25);
        Room room28 = hotel17.findAvailableRoom();
        Room room29 = hotel17.findAvailableRoom();
        hotel14.reserveRoom(room29);
        hotel7.reserveRoom(room29);
        hotel1.reserveRoom(room29);
        java.lang.Class<?> wildcardClass33 = room29.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0356");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room8);
        Hotel hotel11 = new Hotel((int) (byte) -1);
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        hotel11.reserveRoom(room33);
        hotel11.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Room room42 = hotel39.findAvailableRoom();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        hotel44.displayRoomStatus();
        Room room46 = hotel44.findAvailableRoom();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        hotel44.reserveRoom(room66);
        hotel44.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        hotel72.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) -1);
        Room room82 = hotel81.findAvailableRoom();
        hotel81.displayRoomStatus();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel81.reserveRoom(room86);
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel81.reserveRoom(room90);
        hotel72.reserveRoom(room90);
        hotel44.reserveRoom(room90);
        hotel39.reserveRoom(room90);
        hotel11.reserveRoom(room90);
        hotel1.reserveRoom(room90);
        hotel1.displayRoomStatus();
        Room room98 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass99 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0357");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass29 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0358");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room42 = hotel1.findAvailableRoom();
        Room room43 = hotel1.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) 'a');
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        Room room58 = hotel47.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel47.reserveRoom(room69);
        hotel45.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        hotel1.displayRoomStatus();
        Room room75 = hotel1.findAvailableRoom();
        Room room76 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNull(room76);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0359");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Hotel hotel3 = new Hotel(100);
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel27.reserveRoom(room54);
        hotel5.reserveRoom(room54);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Room room63 = hotel60.findAvailableRoom();
        hotel5.reserveRoom(room63);
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        hotel5.reserveRoom(room74);
        hotel3.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        java.lang.Class<?> wildcardClass79 = room74.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0360");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0361");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        Room room37 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0362");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel(1);
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        hotel14.reserveRoom(room41);
        hotel10.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Room room47 = hotel1.findAvailableRoom();
        Hotel hotel49 = new Hotel(10);
        Room room50 = hotel49.findAvailableRoom();
        Room room51 = hotel49.findAvailableRoom();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        hotel53.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        hotel62.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel71.reserveRoom(room80);
        hotel62.reserveRoom(room80);
        hotel53.reserveRoom(room80);
        hotel49.reserveRoom(room80);
        Room room85 = hotel49.findAvailableRoom();
        hotel1.reserveRoom(room85);
        java.lang.Class<?> wildcardClass87 = room85.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0363");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        Hotel hotel45 = new Hotel(0);
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Room room50 = hotel47.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel4.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass54 = room50.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0364");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (short) 0);
        Room room32 = hotel31.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) 'a');
        hotel34.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel34.reserveRoom(room42);
        Room room45 = hotel34.findAvailableRoom();
        Room room46 = hotel34.findAvailableRoom();
        hotel31.reserveRoom(room46);
        hotel1.reserveRoom(room46);
        java.lang.Class<?> wildcardClass49 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0365");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass58 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0366");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel7.reserveRoom(room11);
        hotel7.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (short) 0);
        Room room16 = hotel15.findAvailableRoom();
        Hotel hotel18 = new Hotel(10);
        Room room19 = hotel18.findAvailableRoom();
        hotel15.reserveRoom(room19);
        hotel7.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Room room26 = hotel23.findAvailableRoom();
        Room room27 = hotel23.findAvailableRoom();
        Hotel hotel29 = new Hotel(0);
        hotel29.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel29.reserveRoom(room33);
        Room room35 = hotel29.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel41.reserveRoom(room72);
        hotel37.reserveRoom(room72);
        hotel29.reserveRoom(room72);
        hotel23.reserveRoom(room72);
        hotel7.reserveRoom(room72);
        hotel1.reserveRoom(room72);
        Room room80 = hotel1.findAvailableRoom();
        Room room81 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room80);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0367");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel9.reserveRoom(room46);
        hotel6.reserveRoom(room46);
        hotel1.reserveRoom(room46);
        hotel1.displayRoomStatus();
        Room room52 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0368");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        hotel24.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        hotel24.reserveRoom(room42);
        hotel15.reserveRoom(room42);
        hotel7.reserveRoom(room42);
        hotel4.reserveRoom(room42);
        hotel1.reserveRoom(room42);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass50 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0369");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        Hotel hotel16 = new Hotel((int) 'a');
        hotel16.displayRoomStatus();
        Room room18 = hotel16.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel20.reserveRoom(room47);
        hotel16.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        hotel1.displayRoomStatus();
        Hotel hotel55 = new Hotel(1);
        hotel55.displayRoomStatus();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        hotel59.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        hotel68.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel68.reserveRoom(room86);
        hotel59.reserveRoom(room86);
        hotel55.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        java.lang.Class<?> wildcardClass92 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0370");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Room room43 = hotel38.findAvailableRoom();
        Hotel hotel45 = new Hotel(10);
        Room room46 = hotel45.findAvailableRoom();
        hotel38.reserveRoom(room46);
        hotel1.reserveRoom(room46);
        java.lang.Class<?> wildcardClass49 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0371");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(0);
        Room room6 = hotel5.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        Room room17 = hotel8.findAvailableRoom();
        hotel5.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Room room20 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass21 = room20.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0372");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        java.lang.Class<?> wildcardClass12 = room10.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0373");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel4.reserveRoom(room13);
        Room room15 = hotel4.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel1.reserveRoom(room26);
        java.lang.Class<?> wildcardClass30 = room26.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0374");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) ' ');
        Hotel hotel48 = new Hotel((int) 'a');
        hotel48.displayRoomStatus();
        Room room50 = hotel48.findAvailableRoom();
        hotel46.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass53 = room50.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0375");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (short) 0);
        Room room9 = hotel8.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel15.reserveRoom(room46);
        hotel11.reserveRoom(room46);
        hotel8.reserveRoom(room46);
        hotel8.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) ' ');
        Hotel hotel55 = new Hotel((int) 'a');
        hotel55.displayRoomStatus();
        Room room57 = hotel55.findAvailableRoom();
        hotel53.reserveRoom(room57);
        hotel8.reserveRoom(room57);
        Hotel hotel61 = new Hotel(10);
        Room room62 = hotel61.findAvailableRoom();
        Room room63 = hotel61.findAvailableRoom();
        hotel8.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        java.lang.Class<?> wildcardClass66 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0376");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room7 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room7);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0377");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel11.reserveRoom(room60);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel11.reserveRoom(room69);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel11.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room84 = hotel1.findAvailableRoom();
        Hotel hotel86 = new Hotel((int) (byte) -1);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel86.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        Room room97 = hotel1.findAvailableRoom();
        Room room98 = hotel1.findAvailableRoom();
        Room room99 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNull(room97);
        org.junit.Assert.assertNull(room98);
        org.junit.Assert.assertNull(room99);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0378");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0379");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0380");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Room room34 = hotel31.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        hotel36.displayRoomStatus();
        Room room38 = hotel36.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel36.reserveRoom(room58);
        hotel36.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel64.reserveRoom(room82);
        hotel36.reserveRoom(room82);
        hotel31.reserveRoom(room82);
        hotel1.reserveRoom(room82);
        java.lang.Class<?> wildcardClass88 = room82.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0381");
        Hotel hotel1 = new Hotel((-1));
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0382");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room37 = hotel1.findAvailableRoom();
        Room room38 = hotel1.findAvailableRoom();
        Room room39 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass40 = room39.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room39);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0383");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        hotel42.displayRoomStatus();
        Room room44 = hotel42.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        hotel42.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass70 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0384");
        Hotel hotel1 = new Hotel((int) (short) 0);
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0385");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        java.lang.Class<?> wildcardClass19 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0386");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) 'a');
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel8.reserveRoom(room35);
        hotel4.reserveRoom(room35);
        hotel1.reserveRoom(room35);
        Hotel hotel42 = new Hotel((int) (short) 0);
        Room room43 = hotel42.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel71.reserveRoom(room80);
        hotel49.reserveRoom(room80);
        hotel45.reserveRoom(room80);
        hotel42.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        java.lang.Class<?> wildcardClass86 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0387");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        hotel8.displayRoomStatus();
        Room room10 = hotel8.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel21.reserveRoom(room30);
        hotel12.reserveRoom(room30);
        hotel8.reserveRoom(room30);
        hotel8.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel8.reserveRoom(room54);
        hotel3.reserveRoom(room54);
        Room room59 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room61 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room61);
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        hotel73.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel73.reserveRoom(room91);
        hotel64.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        java.lang.Class<?> wildcardClass96 = room91.getClass();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0388");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room53 = hotel1.findAvailableRoom();
        Hotel hotel55 = new Hotel((int) (short) 1);
        Hotel hotel57 = new Hotel((int) (byte) -1);
        hotel57.displayRoomStatus();
        Room room59 = hotel57.findAvailableRoom();
        Room room60 = hotel57.findAvailableRoom();
        Room room61 = hotel57.findAvailableRoom();
        Room room62 = hotel57.findAvailableRoom();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel64.reserveRoom(room82);
        Hotel hotel86 = new Hotel((int) 'a');
        hotel86.displayRoomStatus();
        Room room88 = hotel86.findAvailableRoom();
        hotel64.reserveRoom(room88);
        hotel64.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (short) 10);
        Room room93 = hotel92.findAvailableRoom();
        hotel64.reserveRoom(room93);
        hotel57.reserveRoom(room93);
        hotel55.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        java.lang.Class<?> wildcardClass98 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0389");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (short) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room9);
        java.lang.Class<?> wildcardClass11 = room9.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0390");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass43 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0391");
        Hotel hotel1 = new Hotel((int) (short) 0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel4.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel4.reserveRoom(room31);
        hotel1.reserveRoom(room31);
        java.lang.Class<?> wildcardClass36 = room31.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0392");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Hotel hotel45 = new Hotel(100);
        hotel45.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (short) 0);
        Room room49 = hotel48.findAvailableRoom();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel55.reserveRoom(room86);
        hotel51.reserveRoom(room86);
        hotel48.reserveRoom(room86);
        hotel45.reserveRoom(room86);
        Room room92 = hotel45.findAvailableRoom();
        hotel1.reserveRoom(room92);
        java.lang.Class<?> wildcardClass94 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room92);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0393");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        Room room66 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room68 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass69 = room68.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNull(room68);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0394");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) 0);
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) ' ');
        Hotel hotel16 = new Hotel((int) (short) 0);
        Room room17 = hotel16.findAvailableRoom();
        Hotel hotel19 = new Hotel(10);
        Room room20 = hotel19.findAvailableRoom();
        hotel16.reserveRoom(room20);
        hotel14.reserveRoom(room20);
        hotel7.reserveRoom(room20);
        hotel5.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        java.lang.Class<?> wildcardClass26 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0395");
        Hotel hotel1 = new Hotel((int) '#');
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0396");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Room room23 = hotel1.findAvailableRoom();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Room room28 = hotel25.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel30.reserveRoom(room52);
        hotel30.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel30.reserveRoom(room76);
        hotel25.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        java.lang.Class<?> wildcardClass82 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0397");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0398");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel1.reserveRoom(room11);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass16 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0399");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) ' ');
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        java.lang.Class<?> wildcardClass8 = room6.getClass();
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0400");
        Hotel hotel1 = new Hotel((int) (byte) 100);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0401");
        Hotel hotel1 = new Hotel(0);
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass11 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0402");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room31 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass34 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0403");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (short) 0);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        hotel12.displayRoomStatus();
        Room room16 = hotel12.findAvailableRoom();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel12.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        java.lang.Class<?> wildcardClass54 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0404");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel27.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel27.reserveRoom(room73);
        hotel5.reserveRoom(room73);
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        hotel5.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        Room room88 = hotel1.findAvailableRoom();
        Room room89 = hotel1.findAvailableRoom();
        Room room90 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass91 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNull(room88);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNull(room90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0405");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Hotel hotel3 = new Hotel(100);
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel27.reserveRoom(room54);
        hotel5.reserveRoom(room54);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Room room63 = hotel60.findAvailableRoom();
        hotel5.reserveRoom(room63);
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        hotel5.reserveRoom(room74);
        hotel3.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass80 = hotel1.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0406");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0407");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room11 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = room11.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room11);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0408");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel(1);
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        hotel14.reserveRoom(room41);
        hotel10.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Room room47 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass49 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0409");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Hotel hotel42 = new Hotel(0);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Room room47 = hotel44.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        hotel1.displayRoomStatus();
        Room room51 = hotel1.findAvailableRoom();
        Room room52 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room52);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0410");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        java.lang.Class<?> wildcardClass51 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0411");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel(1);
        hotel22.displayRoomStatus();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel26.reserveRoom(room53);
        hotel22.reserveRoom(room53);
        hotel13.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        Hotel hotel61 = new Hotel(1);
        hotel61.displayRoomStatus();
        hotel61.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) ' ');
        Hotel hotel67 = new Hotel((int) 'a');
        hotel67.displayRoomStatus();
        Room room69 = hotel67.findAvailableRoom();
        hotel65.reserveRoom(room69);
        hotel61.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        java.lang.Class<?> wildcardClass73 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0412");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass6 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0413");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = room7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0414");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel3.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel3.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        Hotel hotel55 = new Hotel(10);
        Room room56 = hotel55.findAvailableRoom();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        hotel66.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel75.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) -1);
        Room room85 = hotel84.findAvailableRoom();
        hotel84.displayRoomStatus();
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel84.reserveRoom(room89);
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel84.reserveRoom(room93);
        hotel75.reserveRoom(room93);
        hotel66.reserveRoom(room93);
        hotel58.reserveRoom(room93);
        hotel55.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room85);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(room93);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0415");
        Hotel hotel1 = new Hotel(100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (short) 0);
        Room room5 = hotel4.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        hotel11.reserveRoom(room42);
        hotel7.reserveRoom(room42);
        hotel4.reserveRoom(room42);
        hotel1.reserveRoom(room42);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass49 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0416");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass44 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0417");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = room2.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0418");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        Room room61 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass62 = room61.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room61);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0419");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        java.lang.Class<?> wildcardClass45 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0420");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room30 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room30);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0421");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Room room40 = hotel1.findAvailableRoom();
        Room room41 = hotel1.findAvailableRoom();
        Room room42 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass43 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0422");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass6 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0423");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass37 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0424");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel(10);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) 'a');
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        hotel16.reserveRoom(room43);
        hotel12.reserveRoom(room43);
        hotel9.reserveRoom(room43);
        hotel1.reserveRoom(room43);
        Room room50 = hotel1.findAvailableRoom();
        Room room51 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNull(room51);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0425");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass60 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0426");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) 'a');
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel4.reserveRoom(room12);
        Room room15 = hotel4.findAvailableRoom();
        Room room16 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room16);
        Room room18 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass20 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0427");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        hotel9.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel9.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        Hotel hotel64 = new Hotel((int) 'a');
        hotel64.displayRoomStatus();
        Room room66 = hotel64.findAvailableRoom();
        hotel42.reserveRoom(room66);
        hotel42.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (short) 10);
        Room room71 = hotel70.findAvailableRoom();
        hotel42.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        Room room74 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room74);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0428");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel(1);
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        hotel14.reserveRoom(room41);
        hotel10.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        java.lang.Class<?> wildcardClass47 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0429");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Hotel hotel46 = new Hotel(0);
        hotel46.displayRoomStatus();
        Room room48 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel51 = new Hotel(10);
        Room room52 = hotel51.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        hotel54.displayRoomStatus();
        Room room56 = hotel54.findAvailableRoom();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel54.reserveRoom(room76);
        hotel54.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel54.reserveRoom(room91);
        hotel51.reserveRoom(room91);
        hotel46.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        Room room97 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass98 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(room97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0430");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Room room40 = hotel37.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        hotel42.displayRoomStatus();
        Room room44 = hotel42.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        hotel42.reserveRoom(room64);
        hotel42.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) -1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel70.reserveRoom(room75);
        hotel70.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        Hotel hotel87 = new Hotel((int) (byte) 1);
        Room room88 = hotel87.findAvailableRoom();
        hotel79.reserveRoom(room88);
        hotel70.reserveRoom(room88);
        hotel42.reserveRoom(room88);
        hotel37.reserveRoom(room88);
        Room room93 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Room room95 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Room room97 = hotel37.findAvailableRoom();
        hotel1.reserveRoom(room97);
        Room room99 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNotNull(room95);
        org.junit.Assert.assertNotNull(room97);
        org.junit.Assert.assertNull(room99);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0431");
        Hotel hotel1 = new Hotel((-1));
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room4);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0432");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Room room32 = hotel29.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        hotel34.displayRoomStatus();
        Room room36 = hotel34.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        hotel38.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel38.reserveRoom(room56);
        hotel34.reserveRoom(room56);
        hotel34.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        hotel62.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel71.reserveRoom(room80);
        hotel62.reserveRoom(room80);
        hotel34.reserveRoom(room80);
        hotel29.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Hotel hotel87 = new Hotel((int) '#');
        Room room88 = hotel87.findAvailableRoom();
        hotel1.reserveRoom(room88);
        java.lang.Class<?> wildcardClass90 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0433");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        hotel23.reserveRoom(room45);
        hotel23.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel23.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass84 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0434");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room8);
        Hotel hotel11 = new Hotel((int) (byte) -1);
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        hotel11.reserveRoom(room33);
        hotel11.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Room room42 = hotel39.findAvailableRoom();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        hotel44.displayRoomStatus();
        Room room46 = hotel44.findAvailableRoom();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        hotel44.reserveRoom(room66);
        hotel44.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        hotel72.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) -1);
        Room room82 = hotel81.findAvailableRoom();
        hotel81.displayRoomStatus();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel81.reserveRoom(room86);
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel81.reserveRoom(room90);
        hotel72.reserveRoom(room90);
        hotel44.reserveRoom(room90);
        hotel39.reserveRoom(room90);
        hotel11.reserveRoom(room90);
        hotel1.reserveRoom(room90);
        Room room97 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass98 = room97.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0435");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Hotel hotel42 = new Hotel(0);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Room room47 = hotel44.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass51 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0436");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        hotel1.displayRoomStatus();
        Room room28 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0437");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Room room30 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass32 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0438");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Room room34 = hotel31.findAvailableRoom();
        Hotel hotel36 = new Hotel(1);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel40.reserveRoom(room67);
        hotel36.reserveRoom(room67);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Room room74 = hotel36.findAvailableRoom();
        hotel31.reserveRoom(room74);
        Room room76 = hotel31.findAvailableRoom();
        hotel1.reserveRoom(room76);
        java.lang.Class<?> wildcardClass78 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0439");
        Hotel hotel1 = new Hotel((int) (short) 1);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0440");
        Hotel hotel1 = new Hotel((-1));
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(0);
        Room room5 = hotel4.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) ' ');
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel7.reserveRoom(room13);
        Room room16 = hotel7.findAvailableRoom();
        hotel4.reserveRoom(room16);
        Hotel hotel19 = new Hotel((int) 'a');
        hotel19.displayRoomStatus();
        Room room21 = hotel19.findAvailableRoom();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel4.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass57 = room50.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0441");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel(10);
        hotel5.displayRoomStatus();
        Room room7 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room7);
        java.lang.Class<?> wildcardClass9 = room7.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0442");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0443");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Hotel hotel33 = new Hotel((int) 'a');
        hotel33.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel33.reserveRoom(room41);
        Room room44 = hotel33.findAvailableRoom();
        hotel1.reserveRoom(room44);
        Hotel hotel47 = new Hotel(0);
        hotel47.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel47.reserveRoom(room51);
        Room room53 = hotel47.findAvailableRoom();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        hotel59.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel68.reserveRoom(room77);
        hotel59.reserveRoom(room77);
        Hotel hotel81 = new Hotel((int) (byte) -1);
        Room room82 = hotel81.findAvailableRoom();
        hotel81.displayRoomStatus();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel81.reserveRoom(room86);
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel81.reserveRoom(room90);
        hotel59.reserveRoom(room90);
        hotel55.reserveRoom(room90);
        hotel47.reserveRoom(room90);
        hotel1.reserveRoom(room90);
        java.lang.Class<?> wildcardClass96 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0444");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0445");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel(0);
        hotel6.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        hotel16.displayRoomStatus();
        Room room18 = hotel16.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel20.reserveRoom(room38);
        hotel16.reserveRoom(room38);
        Room room42 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) ' ');
        Hotel hotel47 = new Hotel((int) 'a');
        hotel47.displayRoomStatus();
        Room room49 = hotel47.findAvailableRoom();
        hotel45.reserveRoom(room49);
        hotel16.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        java.lang.Class<?> wildcardClass53 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0446");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) 'a');
        hotel29.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel29.reserveRoom(room37);
        Room room40 = hotel29.findAvailableRoom();
        Room room41 = hotel29.findAvailableRoom();
        hotel1.reserveRoom(room41);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel46 = new Hotel(100);
        hotel46.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (short) 0);
        Room room50 = hotel49.findAvailableRoom();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        hotel56.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel56.reserveRoom(room74);
        Hotel hotel78 = new Hotel((int) (byte) -1);
        Room room79 = hotel78.findAvailableRoom();
        hotel78.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel78.reserveRoom(room83);
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel78.reserveRoom(room87);
        hotel56.reserveRoom(room87);
        hotel52.reserveRoom(room87);
        hotel49.reserveRoom(room87);
        hotel46.reserveRoom(room87);
        Room room93 = hotel46.findAvailableRoom();
        hotel1.reserveRoom(room93);
        java.lang.Class<?> wildcardClass95 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0447");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        hotel1.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (short) -1);
        hotel18.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) 'a');
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        Room room34 = hotel23.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel23.reserveRoom(room45);
        hotel21.reserveRoom(room45);
        hotel18.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        java.lang.Class<?> wildcardClass51 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0448");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) 'a');
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel7.reserveRoom(room15);
        hotel7.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        hotel24.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        hotel24.reserveRoom(room42);
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel24.reserveRoom(room55);
        hotel20.reserveRoom(room55);
        hotel7.reserveRoom(room55);
        Hotel hotel61 = new Hotel((int) (short) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel7.reserveRoom(room62);
        hotel1.reserveRoom(room62);
        hotel1.displayRoomStatus();
        Room room66 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room62);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0449");
        Hotel hotel1 = new Hotel((int) (short) -1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) 'a');
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel6.reserveRoom(room15);
        Room room17 = hotel6.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel4.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Hotel hotel34 = new Hotel(0);
        hotel34.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel34.reserveRoom(room38);
        Room room40 = hotel34.findAvailableRoom();
        Hotel hotel42 = new Hotel(0);
        hotel42.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel42.reserveRoom(room46);
        Room room48 = hotel42.findAvailableRoom();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel42.reserveRoom(room85);
        hotel34.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass94 = hotel1.getClass();
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0450");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) 'a');
        hotel29.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel29.reserveRoom(room37);
        Room room40 = hotel29.findAvailableRoom();
        Room room41 = hotel29.findAvailableRoom();
        hotel1.reserveRoom(room41);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel46 = new Hotel(100);
        hotel46.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (short) 0);
        Room room50 = hotel49.findAvailableRoom();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        hotel56.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel56.reserveRoom(room74);
        Hotel hotel78 = new Hotel((int) (byte) -1);
        Room room79 = hotel78.findAvailableRoom();
        hotel78.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel78.reserveRoom(room83);
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel78.reserveRoom(room87);
        hotel56.reserveRoom(room87);
        hotel52.reserveRoom(room87);
        hotel49.reserveRoom(room87);
        hotel46.reserveRoom(room87);
        Room room93 = hotel46.findAvailableRoom();
        hotel1.reserveRoom(room93);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room93);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0451");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (short) 0);
        Room room18 = hotel17.findAvailableRoom();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        Room room21 = hotel17.findAvailableRoom();
        Hotel hotel23 = new Hotel(0);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Room room26 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        hotel23.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) ' ');
        Hotel hotel32 = new Hotel((int) (short) 0);
        Room room33 = hotel32.findAvailableRoom();
        Hotel hotel35 = new Hotel(10);
        Room room36 = hotel35.findAvailableRoom();
        hotel32.reserveRoom(room36);
        hotel30.reserveRoom(room36);
        hotel23.reserveRoom(room36);
        hotel17.reserveRoom(room36);
        hotel13.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        java.lang.Class<?> wildcardClass43 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0452");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        hotel39.displayRoomStatus();
        Room room41 = hotel39.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (byte) 0);
        Hotel hotel45 = new Hotel(0);
        hotel45.displayRoomStatus();
        Room room47 = hotel45.findAvailableRoom();
        Room room48 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) ' ');
        Hotel hotel54 = new Hotel((int) (short) 0);
        Room room55 = hotel54.findAvailableRoom();
        Hotel hotel57 = new Hotel(10);
        Room room58 = hotel57.findAvailableRoom();
        hotel54.reserveRoom(room58);
        hotel52.reserveRoom(room58);
        hotel45.reserveRoom(room58);
        hotel43.reserveRoom(room58);
        hotel39.reserveRoom(room58);
        hotel1.reserveRoom(room58);
        java.lang.Class<?> wildcardClass65 = room58.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0453");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Hotel hotel3 = new Hotel((int) (byte) 100);
        hotel3.displayRoomStatus();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel21.reserveRoom(room30);
        hotel12.reserveRoom(room30);
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel12.reserveRoom(room43);
        hotel8.reserveRoom(room43);
        hotel8.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        hotel49.displayRoomStatus();
        Room room51 = hotel49.findAvailableRoom();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        hotel53.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel62.reserveRoom(room71);
        hotel53.reserveRoom(room71);
        hotel49.reserveRoom(room71);
        hotel8.reserveRoom(room71);
        hotel6.reserveRoom(room71);
        hotel3.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room71);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0454");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) 'a');
        hotel29.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel29.reserveRoom(room37);
        Room room40 = hotel29.findAvailableRoom();
        Room room41 = hotel29.findAvailableRoom();
        hotel1.reserveRoom(room41);
        hotel1.displayRoomStatus();
        Room room44 = hotel1.findAvailableRoom();
        Room room45 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room45);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0455");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) 'a');
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel4.reserveRoom(room12);
        Room room15 = hotel4.findAvailableRoom();
        Room room16 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room16);
        java.lang.Class<?> wildcardClass18 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0456");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        Room room7 = hotel3.findAvailableRoom();
        Room room8 = hotel3.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel10.reserveRoom(room34);
        hotel10.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (short) 10);
        Room room39 = hotel38.findAvailableRoom();
        hotel10.reserveRoom(room39);
        hotel3.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room39);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0457");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        Room room19 = hotel1.findAvailableRoom();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel21.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Room room32 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass33 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0458");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        Room room36 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass37 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0459");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Room room44 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass45 = room44.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room44);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0460");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass10 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0461");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Room room34 = hotel31.findAvailableRoom();
        Hotel hotel36 = new Hotel(1);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel40.reserveRoom(room67);
        hotel36.reserveRoom(room67);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Room room74 = hotel36.findAvailableRoom();
        hotel31.reserveRoom(room74);
        Room room76 = hotel31.findAvailableRoom();
        hotel1.reserveRoom(room76);
        Room room78 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass79 = room78.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room78);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0462");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0463");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        hotel42.displayRoomStatus();
        Room room44 = hotel42.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        hotel42.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        Room room69 = hotel1.findAvailableRoom();
        Room room70 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass71 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0464");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        Room room13 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0465");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        Room room32 = hotel6.findAvailableRoom();
        Room room33 = hotel6.findAvailableRoom();
        Room room34 = hotel6.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (short) 0);
        hotel36.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        hotel39.reserveRoom(room66);
        hotel36.reserveRoom(room66);
        hotel6.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        java.lang.Class<?> wildcardClass73 = hotel1.getClass();
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0466");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0467");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        Room room60 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass61 = room60.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0468");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        hotel5.displayRoomStatus();
        Room room7 = hotel5.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) 0);
        Hotel hotel11 = new Hotel(0);
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) ' ');
        Hotel hotel20 = new Hotel((int) (short) 0);
        Room room21 = hotel20.findAvailableRoom();
        Hotel hotel23 = new Hotel(10);
        Room room24 = hotel23.findAvailableRoom();
        hotel20.reserveRoom(room24);
        hotel18.reserveRoom(room24);
        hotel11.reserveRoom(room24);
        hotel9.reserveRoom(room24);
        hotel5.reserveRoom(room24);
        hotel1.reserveRoom(room24);
        Room room31 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room31);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0469");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) ' ');
        Hotel hotel28 = new Hotel((int) (short) 0);
        Room room29 = hotel28.findAvailableRoom();
        Hotel hotel31 = new Hotel(10);
        Room room32 = hotel31.findAvailableRoom();
        hotel28.reserveRoom(room32);
        hotel26.reserveRoom(room32);
        Room room35 = hotel26.findAvailableRoom();
        hotel1.reserveRoom(room35);
        Room room37 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass38 = room37.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room37);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0470");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel(10);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) 'a');
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        hotel16.reserveRoom(room43);
        hotel12.reserveRoom(room43);
        hotel9.reserveRoom(room43);
        hotel1.reserveRoom(room43);
        java.lang.Class<?> wildcardClass50 = room43.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0471");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) '4');
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel8.reserveRoom(room45);
        Room room50 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass52 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0472");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        Hotel hotel37 = new Hotel((int) (short) 0);
        hotel37.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel40.reserveRoom(room67);
        hotel37.reserveRoom(room67);
        hotel5.reserveRoom(room67);
        hotel1.reserveRoom(room67);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0473");
        Hotel hotel1 = new Hotel((-1));
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0474");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) '4');
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel8.reserveRoom(room45);
        Room room50 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room50);
        Room room52 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room52);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0475");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass23 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0476");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel29.reserveRoom(room60);
        Room room63 = hotel29.findAvailableRoom();
        Room room64 = hotel29.findAvailableRoom();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room71 = hotel66.findAvailableRoom();
        hotel29.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        java.lang.Class<?> wildcardClass74 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0477");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room63 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room63);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0478");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        Hotel hotel16 = new Hotel((int) 'a');
        hotel16.displayRoomStatus();
        Room room18 = hotel16.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel20.reserveRoom(room47);
        hotel16.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        hotel1.displayRoomStatus();
        Hotel hotel55 = new Hotel(1);
        hotel55.displayRoomStatus();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        hotel59.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        hotel68.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel68.reserveRoom(room86);
        hotel59.reserveRoom(room86);
        hotel55.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        hotel1.displayRoomStatus();
        Room room93 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass94 = room93.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNull(room93);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0479");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        hotel13.displayRoomStatus();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel13.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel13.reserveRoom(room59);
        hotel8.reserveRoom(room59);
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        Room room66 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass67 = room66.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room66);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0480");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel11.reserveRoom(room60);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel11.reserveRoom(room69);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel11.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room84 = hotel1.findAvailableRoom();
        Hotel hotel86 = new Hotel((int) (byte) -1);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel86.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        Room room97 = hotel1.findAvailableRoom();
        Room room98 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNull(room97);
        org.junit.Assert.assertNull(room98);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0481");
        Hotel hotel1 = new Hotel((int) (byte) 100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel10.reserveRoom(room41);
        hotel6.reserveRoom(room41);
        hotel6.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        hotel47.displayRoomStatus();
        Room room49 = hotel47.findAvailableRoom();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel47.reserveRoom(room69);
        hotel6.reserveRoom(room69);
        hotel4.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        java.lang.Class<?> wildcardClass76 = hotel1.getClass();
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0482");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel11.reserveRoom(room60);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel11.reserveRoom(room69);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel11.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room84 = hotel1.findAvailableRoom();
        Hotel hotel86 = new Hotel((int) (byte) -1);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel86.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        Room room97 = hotel1.findAvailableRoom();
        Room room98 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass99 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNull(room97);
        org.junit.Assert.assertNull(room98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0483");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Room room43 = hotel38.findAvailableRoom();
        Hotel hotel45 = new Hotel(10);
        Room room46 = hotel45.findAvailableRoom();
        hotel38.reserveRoom(room46);
        hotel1.reserveRoom(room46);
        Room room49 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room49);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0484");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room42 = hotel1.findAvailableRoom();
        Room room43 = hotel1.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) 'a');
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        Room room58 = hotel47.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel47.reserveRoom(room69);
        hotel45.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0485");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Room room30 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) ' ');
        Room room34 = hotel33.findAvailableRoom();
        hotel1.reserveRoom(room34);
        java.lang.Class<?> wildcardClass36 = room34.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0486");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        Room room57 = hotel1.findAvailableRoom();
        Room room58 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNull(room58);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0487");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        hotel23.reserveRoom(room45);
        hotel23.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel23.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room85 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0488");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Room room33 = hotel30.findAvailableRoom();
        Room room34 = hotel30.findAvailableRoom();
        Hotel hotel36 = new Hotel(0);
        hotel36.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel36.reserveRoom(room40);
        Room room42 = hotel36.findAvailableRoom();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        Hotel hotel70 = new Hotel((int) (byte) -1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel70.reserveRoom(room75);
        Hotel hotel78 = new Hotel((int) (byte) 1);
        Room room79 = hotel78.findAvailableRoom();
        hotel70.reserveRoom(room79);
        hotel48.reserveRoom(room79);
        hotel44.reserveRoom(room79);
        hotel36.reserveRoom(room79);
        hotel30.reserveRoom(room79);
        hotel1.reserveRoom(room79);
        java.lang.Class<?> wildcardClass86 = room79.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0489");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room20 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = room20.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room20);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0490");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass25 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0491");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        hotel1.displayRoomStatus();
        Hotel hotel20 = new Hotel((-1));
        Hotel hotel22 = new Hotel((int) (byte) -1);
        hotel22.displayRoomStatus();
        Room room24 = hotel22.findAvailableRoom();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel35.reserveRoom(room44);
        hotel26.reserveRoom(room44);
        hotel22.reserveRoom(room44);
        hotel20.reserveRoom(room44);
        Hotel hotel50 = new Hotel(0);
        hotel50.displayRoomStatus();
        Room room52 = hotel50.findAvailableRoom();
        Room room53 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        hotel50.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) ' ');
        Hotel hotel59 = new Hotel((int) (short) 0);
        Room room60 = hotel59.findAvailableRoom();
        Hotel hotel62 = new Hotel(10);
        Room room63 = hotel62.findAvailableRoom();
        hotel59.reserveRoom(room63);
        hotel57.reserveRoom(room63);
        hotel50.reserveRoom(room63);
        hotel20.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        java.lang.Class<?> wildcardClass69 = room63.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0492");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room8);
        Hotel hotel11 = new Hotel((int) (byte) -1);
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        hotel11.reserveRoom(room33);
        hotel11.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Room room42 = hotel39.findAvailableRoom();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        hotel44.displayRoomStatus();
        Room room46 = hotel44.findAvailableRoom();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        hotel44.reserveRoom(room66);
        hotel44.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        hotel72.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) -1);
        Room room82 = hotel81.findAvailableRoom();
        hotel81.displayRoomStatus();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel81.reserveRoom(room86);
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel81.reserveRoom(room90);
        hotel72.reserveRoom(room90);
        hotel44.reserveRoom(room90);
        hotel39.reserveRoom(room90);
        hotel11.reserveRoom(room90);
        hotel1.reserveRoom(room90);
        hotel1.displayRoomStatus();
        Room room98 = hotel1.findAvailableRoom();
        Room room99 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room98);
        org.junit.Assert.assertNotNull(room99);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0493");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass54 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0494");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room62 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0495");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Room room30 = hotel1.findAvailableRoom();
        Room room31 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass32 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0496");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0497");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room61 = hotel1.findAvailableRoom();
        Hotel hotel63 = new Hotel(0);
        hotel63.displayRoomStatus();
        Room room65 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        hotel63.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel63.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        Room room82 = hotel1.findAvailableRoom();
        Room room83 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass84 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0498");
        Hotel hotel1 = new Hotel((int) (byte) 100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        Room room30 = hotel4.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) (short) 0);
        Room room33 = hotel32.findAvailableRoom();
        Room room34 = hotel32.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        hotel67.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel67.reserveRoom(room85);
        hotel58.reserveRoom(room85);
        hotel36.reserveRoom(room85);
        hotel32.reserveRoom(room85);
        hotel4.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        java.lang.Class<?> wildcardClass93 = hotel1.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0499");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel(0);
        hotel6.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        hotel16.displayRoomStatus();
        Room room18 = hotel16.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel20.reserveRoom(room38);
        hotel16.reserveRoom(room38);
        Room room42 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) ' ');
        Hotel hotel47 = new Hotel((int) 'a');
        hotel47.displayRoomStatus();
        Room room49 = hotel47.findAvailableRoom();
        hotel45.reserveRoom(room49);
        hotel16.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        java.lang.Class<?> wildcardClass53 = room49.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest0.test0500");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass61 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }
}

