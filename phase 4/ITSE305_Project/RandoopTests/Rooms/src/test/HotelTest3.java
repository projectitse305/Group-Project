import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class HotelTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1501");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Room room14 = hotel10.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel10.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Hotel hotel21 = new Hotel(0);
        Room room22 = hotel21.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        Room room33 = hotel24.findAvailableRoom();
        hotel21.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) 'a');
        hotel36.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel36.reserveRoom(room44);
        Room room47 = hotel36.findAvailableRoom();
        Room room48 = hotel36.findAvailableRoom();
        Room room49 = hotel36.findAvailableRoom();
        hotel21.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        Room room52 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room52);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1502");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Hotel hotel46 = new Hotel(0);
        hotel46.displayRoomStatus();
        Room room48 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel51 = new Hotel(10);
        Room room52 = hotel51.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        hotel54.displayRoomStatus();
        Room room56 = hotel54.findAvailableRoom();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel54.reserveRoom(room76);
        hotel54.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel54.reserveRoom(room91);
        hotel51.reserveRoom(room91);
        hotel46.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        hotel1.displayRoomStatus();
        Room room98 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass99 = room98.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(room98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1503");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room45 = hotel1.findAvailableRoom();
        Room room46 = hotel1.findAvailableRoom();
        Room room47 = hotel1.findAvailableRoom();
        Room room48 = hotel1.findAvailableRoom();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        hotel50.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel59.reserveRoom(room68);
        hotel50.reserveRoom(room68);
        Hotel hotel72 = new Hotel((int) 'a');
        hotel72.displayRoomStatus();
        Room room74 = hotel72.findAvailableRoom();
        hotel50.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        java.lang.Class<?> wildcardClass77 = room74.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1504");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room36 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1505");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (short) 0);
        Room room6 = hotel5.findAvailableRoom();
        Room room7 = hotel5.findAvailableRoom();
        Room room8 = hotel5.findAvailableRoom();
        Room room9 = hotel5.findAvailableRoom();
        Hotel hotel11 = new Hotel(0);
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) ' ');
        Hotel hotel20 = new Hotel((int) (short) 0);
        Room room21 = hotel20.findAvailableRoom();
        Hotel hotel23 = new Hotel(10);
        Room room24 = hotel23.findAvailableRoom();
        hotel20.reserveRoom(room24);
        hotel18.reserveRoom(room24);
        hotel11.reserveRoom(room24);
        hotel5.reserveRoom(room24);
        hotel1.reserveRoom(room24);
        Room room30 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass31 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1506");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) ' ');
        Hotel hotel16 = new Hotel((int) (short) 0);
        Room room17 = hotel16.findAvailableRoom();
        Hotel hotel19 = new Hotel(10);
        Room room20 = hotel19.findAvailableRoom();
        hotel16.reserveRoom(room20);
        hotel14.reserveRoom(room20);
        hotel7.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        hotel1.displayRoomStatus();
        Room room26 = hotel1.findAvailableRoom();
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        hotel29.displayRoomStatus();
        Room room31 = hotel29.findAvailableRoom();
        Room room32 = hotel29.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel29.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) 'a');
        hotel43.displayRoomStatus();
        Room room45 = hotel43.findAvailableRoom();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        hotel47.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        hotel56.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel56.reserveRoom(room74);
        hotel47.reserveRoom(room74);
        hotel43.reserveRoom(room74);
        hotel29.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1507");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        Room room32 = hotel6.findAvailableRoom();
        Room room33 = hotel6.findAvailableRoom();
        Room room34 = hotel6.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (short) 0);
        hotel36.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        hotel39.reserveRoom(room66);
        hotel36.reserveRoom(room66);
        hotel6.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        java.lang.Class<?> wildcardClass73 = room66.getClass();
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1508");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Room room40 = hotel1.findAvailableRoom();
        Room room41 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) ' ');
        Hotel hotel47 = new Hotel((int) (short) 0);
        Room room48 = hotel47.findAvailableRoom();
        Hotel hotel50 = new Hotel(10);
        Room room51 = hotel50.findAvailableRoom();
        hotel47.reserveRoom(room51);
        hotel45.reserveRoom(room51);
        Room room54 = hotel45.findAvailableRoom();
        Room room55 = hotel45.findAvailableRoom();
        Room room56 = hotel45.findAvailableRoom();
        hotel1.reserveRoom(room56);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room56);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1509");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room36 = hotel1.findAvailableRoom();
        Room room37 = hotel1.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (short) 0);
        Room room40 = hotel39.findAvailableRoom();
        Room room41 = hotel39.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        hotel43.displayRoomStatus();
        Room room45 = hotel43.findAvailableRoom();
        Hotel hotel47 = new Hotel((int) (byte) 0);
        Hotel hotel49 = new Hotel(0);
        hotel49.displayRoomStatus();
        Room room51 = hotel49.findAvailableRoom();
        Room room52 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        hotel49.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) ' ');
        Hotel hotel58 = new Hotel((int) (short) 0);
        Room room59 = hotel58.findAvailableRoom();
        Hotel hotel61 = new Hotel(10);
        Room room62 = hotel61.findAvailableRoom();
        hotel58.reserveRoom(room62);
        hotel56.reserveRoom(room62);
        hotel49.reserveRoom(room62);
        hotel47.reserveRoom(room62);
        hotel43.reserveRoom(room62);
        hotel39.reserveRoom(room62);
        hotel1.reserveRoom(room62);
        Room room70 = hotel1.findAvailableRoom();
        Room room71 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNull(room71);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1510");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel30 = new Hotel(0);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel35 = new Hotel(10);
        Room room36 = hotel35.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        hotel38.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel38.reserveRoom(room75);
        hotel35.reserveRoom(room75);
        hotel30.reserveRoom(room75);
        hotel1.reserveRoom(room75);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) 'a');
        Room room85 = hotel84.findAvailableRoom();
        Room room86 = hotel84.findAvailableRoom();
        hotel1.reserveRoom(room86);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass90 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1511");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel27.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel27.reserveRoom(room73);
        hotel5.reserveRoom(room73);
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        hotel5.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        Room room88 = hotel1.findAvailableRoom();
        Room room89 = hotel1.findAvailableRoom();
        Room room90 = hotel1.findAvailableRoom();
        Room room91 = hotel1.findAvailableRoom();
        Room room92 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass93 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNull(room88);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNull(room90);
        org.junit.Assert.assertNull(room91);
        org.junit.Assert.assertNull(room92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1512");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        hotel1.displayRoomStatus();
        Room room19 = hotel1.findAvailableRoom();
        Room room20 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1513");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Room room30 = hotel1.findAvailableRoom();
        Room room31 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room33 = hotel1.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Room room38 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        hotel35.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (short) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel35.reserveRoom(room43);
        hotel35.displayRoomStatus();
        Room room46 = hotel35.findAvailableRoom();
        hotel1.reserveRoom(room46);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room46);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1514");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1515");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass28 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1516");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) 'a');
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel4.reserveRoom(room12);
        Room room15 = hotel4.findAvailableRoom();
        Room room16 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room16);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel21.reserveRoom(room30);
        hotel21.displayRoomStatus();
        hotel21.displayRoomStatus();
        Room room34 = hotel21.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) ' ');
        Hotel hotel38 = new Hotel((int) 'a');
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        hotel36.reserveRoom(room40);
        Hotel hotel43 = new Hotel(0);
        hotel43.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel43.reserveRoom(room47);
        Room room49 = hotel43.findAvailableRoom();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel55.reserveRoom(room86);
        hotel51.reserveRoom(room86);
        hotel43.reserveRoom(room86);
        hotel36.reserveRoom(room86);
        hotel21.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        Room room94 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNull(room94);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1517");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (short) 0);
        Room room6 = hotel5.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) 'a');
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel8.reserveRoom(room16);
        Room room19 = hotel8.findAvailableRoom();
        Room room20 = hotel8.findAvailableRoom();
        hotel5.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        Room room23 = hotel1.findAvailableRoom();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Room room28 = hotel25.findAvailableRoom();
        Room room29 = hotel25.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel25.reserveRoom(room32);
        Room room34 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        hotel25.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        Room room64 = hotel38.findAvailableRoom();
        Room room65 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Room room68 = hotel38.findAvailableRoom();
        Hotel hotel70 = new Hotel((int) ' ');
        Hotel hotel72 = new Hotel((int) 'a');
        hotel72.displayRoomStatus();
        Room room74 = hotel72.findAvailableRoom();
        hotel70.reserveRoom(room74);
        hotel38.reserveRoom(room74);
        hotel25.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        Room room79 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room79);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1518");
        Hotel hotel1 = new Hotel((int) (short) 1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Room room11 = hotel7.findAvailableRoom();
        Hotel hotel13 = new Hotel(0);
        hotel13.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel13.reserveRoom(room17);
        Room room19 = hotel13.findAvailableRoom();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel25.reserveRoom(room56);
        hotel21.reserveRoom(room56);
        hotel13.reserveRoom(room56);
        hotel7.reserveRoom(room56);
        hotel1.reserveRoom(room56);
        Room room63 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass64 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1519");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1520");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) 'a');
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel13.reserveRoom(room22);
        Room room24 = hotel13.findAvailableRoom();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel11.reserveRoom(room35);
        Room room39 = hotel11.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel49.reserveRoom(room76);
        hotel41.reserveRoom(room76);
        hotel11.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        java.lang.Class<?> wildcardClass83 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1521");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        Room room10 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1522");
        Hotel hotel1 = new Hotel((int) (short) 0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel4.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel4.reserveRoom(room31);
        hotel1.reserveRoom(room31);
        Room room36 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass37 = room36.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1523");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) 'a');
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel4.reserveRoom(room12);
        Room room15 = hotel4.findAvailableRoom();
        Room room16 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room16);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass20 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1524");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) 'a');
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel4.reserveRoom(room12);
        Room room15 = hotel4.findAvailableRoom();
        Room room16 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room16);
        Room room18 = hotel1.findAvailableRoom();
        Room room19 = hotel1.findAvailableRoom();
        Room room20 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1525");
        Hotel hotel1 = new Hotel(0);
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        Room room10 = hotel1.findAvailableRoom();
        Room room11 = hotel1.findAvailableRoom();
        Room room12 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room12);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1526");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room12 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass14 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1527");
        Hotel hotel1 = new Hotel((int) (short) 10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(0);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        Hotel hotel10 = new Hotel(0);
        hotel10.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel5.reserveRoom(room14);
        Hotel hotel18 = new Hotel((int) (short) 0);
        Room room19 = hotel18.findAvailableRoom();
        Hotel hotel21 = new Hotel(10);
        Room room22 = hotel21.findAvailableRoom();
        hotel18.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Room room28 = hotel25.findAvailableRoom();
        hotel18.reserveRoom(room28);
        hotel5.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        Room room33 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass35 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1528");
        Hotel hotel1 = new Hotel((int) (short) 0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1529");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room11);
        hotel1.displayRoomStatus();
        Room room14 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room14);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1530");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        Room room13 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room15 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass16 = room15.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room15);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1531");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel(100);
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel14.reserveRoom(room49);
        hotel11.reserveRoom(room49);
        hotel8.reserveRoom(room49);
        Room room55 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room55);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room55);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1532");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room26 = hotel1.findAvailableRoom();
        Room room27 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass28 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1533");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel(0);
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Room room19 = hotel16.findAvailableRoom();
        Room room20 = hotel16.findAvailableRoom();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel16.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room26 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room26);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1534");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        Room room51 = hotel1.findAvailableRoom();
        Room room52 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room54 = hotel1.findAvailableRoom();
        Room room55 = hotel1.findAvailableRoom();
        Room room56 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNull(room55);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1535");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Room room32 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel41.reserveRoom(room72);
        hotel37.reserveRoom(room72);
        hotel35.reserveRoom(room72);
        hotel35.displayRoomStatus();
        hotel35.displayRoomStatus();
        Room room79 = hotel35.findAvailableRoom();
        hotel1.reserveRoom(room79);
        java.lang.Class<?> wildcardClass81 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1536");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        Hotel hotel35 = new Hotel((int) (byte) -1);
        hotel35.displayRoomStatus();
        Room room37 = hotel35.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel39.reserveRoom(room57);
        hotel35.reserveRoom(room57);
        hotel35.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        hotel63.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel63.reserveRoom(room81);
        hotel35.reserveRoom(room81);
        hotel13.reserveRoom(room81);
        hotel8.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        hotel1.displayRoomStatus();
        Room room89 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNull(room89);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1537");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1538");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Room room41 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        hotel44.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        Room room58 = hotel47.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel47.reserveRoom(room69);
        hotel44.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        Room room74 = hotel1.findAvailableRoom();
        Room room75 = hotel1.findAvailableRoom();
        Hotel hotel77 = new Hotel(100);
        hotel77.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (short) -1);
        hotel80.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) -1);
        Room room84 = hotel83.findAvailableRoom();
        hotel83.displayRoomStatus();
        hotel83.displayRoomStatus();
        hotel83.displayRoomStatus();
        Room room88 = hotel83.findAvailableRoom();
        Hotel hotel90 = new Hotel(10);
        Room room91 = hotel90.findAvailableRoom();
        hotel83.reserveRoom(room91);
        hotel80.reserveRoom(room91);
        hotel77.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room88);
        org.junit.Assert.assertNotNull(room91);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1539");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        Room room29 = hotel1.findAvailableRoom();
        Room room30 = hotel1.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        Hotel hotel54 = new Hotel((int) 'a');
        hotel54.displayRoomStatus();
        Room room56 = hotel54.findAvailableRoom();
        hotel32.reserveRoom(room56);
        hotel32.displayRoomStatus();
        Room room59 = hotel32.findAvailableRoom();
        Hotel hotel61 = new Hotel(0);
        hotel61.displayRoomStatus();
        Room room63 = hotel61.findAvailableRoom();
        Room room64 = hotel61.findAvailableRoom();
        hotel61.displayRoomStatus();
        hotel61.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) ' ');
        Hotel hotel70 = new Hotel((int) (short) 0);
        Room room71 = hotel70.findAvailableRoom();
        Hotel hotel73 = new Hotel(10);
        Room room74 = hotel73.findAvailableRoom();
        hotel70.reserveRoom(room74);
        hotel68.reserveRoom(room74);
        hotel61.reserveRoom(room74);
        hotel32.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room74);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1540");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        hotel9.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel9.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1541");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room58 = hotel1.findAvailableRoom();
        Room room59 = hotel1.findAvailableRoom();
        Room room60 = hotel1.findAvailableRoom();
        Room room61 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNull(room61);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1542");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        hotel1.displayRoomStatus();
        Room room16 = hotel1.findAvailableRoom();
        Hotel hotel18 = new Hotel(0);
        hotel18.displayRoomStatus();
        Room room20 = hotel18.findAvailableRoom();
        Room room21 = hotel18.findAvailableRoom();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        hotel45.reserveRoom(room72);
        hotel23.reserveRoom(room72);
        hotel18.reserveRoom(room72);
        Room room78 = hotel18.findAvailableRoom();
        Hotel hotel80 = new Hotel((int) (byte) 10);
        hotel80.displayRoomStatus();
        hotel80.displayRoomStatus();
        Room room83 = hotel80.findAvailableRoom();
        Room room84 = hotel80.findAvailableRoom();
        Room room85 = hotel80.findAvailableRoom();
        hotel18.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room85);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1543");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Room room30 = hotel1.findAvailableRoom();
        Room room31 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room33 = hotel1.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Room room38 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        hotel35.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (short) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel35.reserveRoom(room43);
        hotel35.displayRoomStatus();
        Room room46 = hotel35.findAvailableRoom();
        hotel1.reserveRoom(room46);
        Room room48 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room48);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1544");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        Room room66 = hotel1.findAvailableRoom();
        Room room67 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNull(room67);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1545");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1546");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (short) 0);
        Room room6 = hotel5.findAvailableRoom();
        Room room7 = hotel5.findAvailableRoom();
        Room room8 = hotel5.findAvailableRoom();
        Room room9 = hotel5.findAvailableRoom();
        Hotel hotel11 = new Hotel(0);
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) ' ');
        Hotel hotel20 = new Hotel((int) (short) 0);
        Room room21 = hotel20.findAvailableRoom();
        Hotel hotel23 = new Hotel(10);
        Room room24 = hotel23.findAvailableRoom();
        hotel20.reserveRoom(room24);
        hotel18.reserveRoom(room24);
        hotel11.reserveRoom(room24);
        hotel5.reserveRoom(room24);
        hotel1.reserveRoom(room24);
        hotel1.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (short) 1);
        Hotel hotel34 = new Hotel((int) (short) 0);
        Room room35 = hotel34.findAvailableRoom();
        Hotel hotel37 = new Hotel(10);
        Room room38 = hotel37.findAvailableRoom();
        hotel34.reserveRoom(room38);
        hotel32.reserveRoom(room38);
        hotel32.displayRoomStatus();
        hotel32.displayRoomStatus();
        hotel32.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel54.reserveRoom(room63);
        hotel45.reserveRoom(room63);
        Hotel hotel67 = new Hotel((int) 'a');
        hotel67.displayRoomStatus();
        Room room69 = hotel67.findAvailableRoom();
        hotel45.reserveRoom(room69);
        Room room71 = hotel45.findAvailableRoom();
        Hotel hotel73 = new Hotel((int) 'a');
        hotel73.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        hotel73.reserveRoom(room81);
        Room room84 = hotel73.findAvailableRoom();
        Room room85 = hotel73.findAvailableRoom();
        hotel45.reserveRoom(room85);
        hotel45.displayRoomStatus();
        Hotel hotel89 = new Hotel((int) 'a');
        hotel89.displayRoomStatus();
        Room room91 = hotel89.findAvailableRoom();
        hotel45.reserveRoom(room91);
        hotel32.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room91);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1547");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass6 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1548");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Room room32 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room34);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1549");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = room6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1550");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Room room30 = hotel1.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel32.reserveRoom(room59);
        hotel32.displayRoomStatus();
        hotel32.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) ' ');
        Hotel hotel68 = new Hotel((int) 'a');
        hotel68.displayRoomStatus();
        Room room70 = hotel68.findAvailableRoom();
        hotel66.reserveRoom(room70);
        hotel32.reserveRoom(room70);
        hotel32.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (short) 10);
        Room room76 = hotel75.findAvailableRoom();
        Room room77 = hotel75.findAvailableRoom();
        hotel32.reserveRoom(room77);
        hotel1.reserveRoom(room77);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room77);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1551");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel11.reserveRoom(room18);
        hotel1.reserveRoom(room18);
        hotel1.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (short) 1);
        hotel24.displayRoomStatus();
        hotel24.displayRoomStatus();
        hotel24.displayRoomStatus();
        Room room28 = hotel24.findAvailableRoom();
        hotel1.reserveRoom(room28);
        Room room30 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room30);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1552");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room6);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1553");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Hotel hotel33 = new Hotel((int) (short) 0);
        hotel33.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel54.reserveRoom(room63);
        hotel45.reserveRoom(room63);
        hotel36.reserveRoom(room63);
        hotel33.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        Room room69 = hotel1.findAvailableRoom();
        Room room70 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNull(room70);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1554");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel31.reserveRoom(room40);
        hotel1.reserveRoom(room40);
        Room room43 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room40);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1555");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room41 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Room room45 = hotel38.findAvailableRoom();
        hotel1.reserveRoom(room45);
        java.lang.Class<?> wildcardClass47 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1556");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        Hotel hotel16 = new Hotel((int) 'a');
        hotel16.displayRoomStatus();
        Room room18 = hotel16.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel20.reserveRoom(room47);
        hotel16.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        hotel1.displayRoomStatus();
        Hotel hotel55 = new Hotel(1);
        hotel55.displayRoomStatus();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        hotel59.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        hotel68.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel68.reserveRoom(room86);
        hotel59.reserveRoom(room86);
        hotel55.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room94 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNull(room94);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1557");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (short) 100);
        Room room31 = hotel30.findAvailableRoom();
        hotel1.reserveRoom(room31);
        Room room33 = hotel1.findAvailableRoom();
        Room room34 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room36 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room36);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1558");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room10 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = room10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room10);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1559");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (short) 0);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        Room room46 = hotel42.findAvailableRoom();
        Room room47 = hotel42.findAvailableRoom();
        Hotel hotel49 = new Hotel((int) '4');
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel55.reserveRoom(room86);
        hotel51.reserveRoom(room86);
        hotel49.reserveRoom(room86);
        Room room91 = hotel49.findAvailableRoom();
        hotel42.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        Room room94 = hotel1.findAvailableRoom();
        Room room95 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNull(room94);
        org.junit.Assert.assertNull(room95);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1560");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) ' ');
        Hotel hotel7 = new Hotel((int) 'a');
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        hotel5.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass13 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1561");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room15 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room17 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room17);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1562");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room31 = hotel1.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) ' ');
        Hotel hotel35 = new Hotel((int) 'a');
        hotel35.displayRoomStatus();
        Room room37 = hotel35.findAvailableRoom();
        hotel33.reserveRoom(room37);
        hotel1.reserveRoom(room37);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room37);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1563");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Room room32 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass36 = room35.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1564");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1565");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        Room room15 = hotel9.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel21.reserveRoom(room52);
        hotel17.reserveRoom(room52);
        hotel9.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room58 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room58);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1566");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room37 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room37);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1567");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel(10);
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) 'a');
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        hotel24.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        hotel24.reserveRoom(room42);
        hotel15.reserveRoom(room42);
        hotel11.reserveRoom(room42);
        hotel8.reserveRoom(room42);
        Hotel hotel49 = new Hotel((int) (short) 0);
        Room room50 = hotel49.findAvailableRoom();
        Hotel hotel52 = new Hotel(10);
        Room room53 = hotel52.findAvailableRoom();
        hotel49.reserveRoom(room53);
        hotel8.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        java.lang.Class<?> wildcardClass57 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1568");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Room room14 = hotel10.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel10.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room22 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass24 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1569");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room14 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass15 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1570");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Room room42 = hotel39.findAvailableRoom();
        Room room43 = hotel39.findAvailableRoom();
        hotel1.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Room room53 = hotel46.findAvailableRoom();
        Room room54 = hotel46.findAvailableRoom();
        Hotel hotel56 = new Hotel((int) (short) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room61 = hotel56.findAvailableRoom();
        hotel46.reserveRoom(room61);
        hotel1.reserveRoom(room61);
        java.lang.Class<?> wildcardClass64 = hotel1.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1571");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        Hotel hotel11 = new Hotel((int) (short) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel1.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        Room room36 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Room room38 = hotel15.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) 'a');
        hotel40.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel40.reserveRoom(room48);
        hotel40.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        hotel57.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel57.reserveRoom(room75);
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        Hotel hotel87 = new Hotel((int) (byte) 1);
        Room room88 = hotel87.findAvailableRoom();
        hotel79.reserveRoom(room88);
        hotel57.reserveRoom(room88);
        hotel53.reserveRoom(room88);
        hotel40.reserveRoom(room88);
        hotel15.reserveRoom(room88);
        hotel1.reserveRoom(room88);
        Room room95 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room95);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1572");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel59 = new Hotel(10);
        hotel59.displayRoomStatus();
        Room room61 = hotel59.findAvailableRoom();
        Hotel hotel63 = new Hotel(0);
        Room room64 = hotel63.findAvailableRoom();
        Hotel hotel66 = new Hotel((int) ' ');
        Hotel hotel68 = new Hotel((int) (short) 0);
        Room room69 = hotel68.findAvailableRoom();
        Hotel hotel71 = new Hotel(10);
        Room room72 = hotel71.findAvailableRoom();
        hotel68.reserveRoom(room72);
        hotel66.reserveRoom(room72);
        Room room75 = hotel66.findAvailableRoom();
        hotel63.reserveRoom(room75);
        hotel59.reserveRoom(room75);
        Room room78 = hotel59.findAvailableRoom();
        hotel1.reserveRoom(room78);
        Room room80 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass82 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1573");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room5);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1574");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room65 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        hotel62.displayRoomStatus();
        hotel62.displayRoomStatus();
        Room room69 = hotel62.findAvailableRoom();
        hotel1.reserveRoom(room69);
        Room room71 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass72 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1575");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Room room42 = hotel39.findAvailableRoom();
        Room room43 = hotel39.findAvailableRoom();
        hotel1.reserveRoom(room43);
        Room room45 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room47 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass48 = hotel1.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1576");
        Hotel hotel1 = new Hotel((-1));
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(0);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        hotel4.displayRoomStatus();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel4.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Hotel hotel18 = new Hotel(1);
        hotel18.displayRoomStatus();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        hotel22.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel22.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel18.displayRoomStatus();
        hotel18.displayRoomStatus();
        Room room56 = hotel18.findAvailableRoom();
        hotel1.reserveRoom(room56);
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room59);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1577");
        Hotel hotel1 = new Hotel((-1));
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1578");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (short) 0);
        Room room25 = hotel24.findAvailableRoom();
        Hotel hotel27 = new Hotel(10);
        Room room28 = hotel27.findAvailableRoom();
        hotel24.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Room room36 = hotel33.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        hotel38.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        hotel66.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel75.reserveRoom(room84);
        hotel66.reserveRoom(room84);
        hotel38.reserveRoom(room84);
        hotel33.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        Room room90 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room92 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room94 = hotel1.findAvailableRoom();
        Room room95 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNull(room90);
        org.junit.Assert.assertNull(room92);
        org.junit.Assert.assertNull(room94);
        org.junit.Assert.assertNull(room95);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1579");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        Room room15 = hotel1.findAvailableRoom();
        Room room16 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass17 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1580");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel9.reserveRoom(room55);
        hotel4.reserveRoom(room55);
        Room room60 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room60);
        java.lang.Class<?> wildcardClass62 = room60.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1581");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1582");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        Room room13 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (short) 0);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        hotel16.displayRoomStatus();
        Room room20 = hotel16.findAvailableRoom();
        Hotel hotel22 = new Hotel(10);
        Room room23 = hotel22.findAvailableRoom();
        Room room24 = hotel22.findAvailableRoom();
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Room room28 = hotel26.findAvailableRoom();
        Room room29 = hotel26.findAvailableRoom();
        Room room30 = hotel26.findAvailableRoom();
        Hotel hotel32 = new Hotel(0);
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        Room room35 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        hotel32.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) ' ');
        Hotel hotel41 = new Hotel((int) (short) 0);
        Room room42 = hotel41.findAvailableRoom();
        Hotel hotel44 = new Hotel(10);
        Room room45 = hotel44.findAvailableRoom();
        hotel41.reserveRoom(room45);
        hotel39.reserveRoom(room45);
        hotel32.reserveRoom(room45);
        hotel26.reserveRoom(room45);
        hotel22.reserveRoom(room45);
        hotel16.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) 'a');
        hotel76.displayRoomStatus();
        Room room78 = hotel76.findAvailableRoom();
        hotel54.reserveRoom(room78);
        hotel54.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (short) 10);
        Room room83 = hotel82.findAvailableRoom();
        hotel54.reserveRoom(room83);
        hotel1.reserveRoom(room83);
        Room room86 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNull(room86);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1583");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) 'a');
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        Room room21 = hotel10.findAvailableRoom();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel10.reserveRoom(room32);
        hotel8.reserveRoom(room32);
        Room room36 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room36);
        Room room38 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room38);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1584");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        hotel28.displayRoomStatus();
        Room room30 = hotel28.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel28.reserveRoom(room50);
        hotel28.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        hotel56.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel56.reserveRoom(room74);
        hotel28.reserveRoom(room74);
        hotel6.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        Hotel hotel81 = new Hotel((int) (short) 0);
        Room room82 = hotel81.findAvailableRoom();
        Hotel hotel84 = new Hotel(10);
        Room room85 = hotel84.findAvailableRoom();
        hotel81.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room85);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1585");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel(0);
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel8.reserveRoom(room12);
        hotel8.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (short) 0);
        Room room17 = hotel16.findAvailableRoom();
        Hotel hotel19 = new Hotel(10);
        Room room20 = hotel19.findAvailableRoom();
        hotel16.reserveRoom(room20);
        hotel8.reserveRoom(room20);
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Room room27 = hotel24.findAvailableRoom();
        Room room28 = hotel24.findAvailableRoom();
        Hotel hotel30 = new Hotel(0);
        hotel30.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel30.reserveRoom(room34);
        Room room36 = hotel30.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel42.reserveRoom(room73);
        hotel38.reserveRoom(room73);
        hotel30.reserveRoom(room73);
        hotel24.reserveRoom(room73);
        hotel8.reserveRoom(room73);
        hotel1.reserveRoom(room73);
        java.lang.Class<?> wildcardClass81 = room73.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1586");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (short) 0);
        Room room18 = hotel17.findAvailableRoom();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        Room room21 = hotel17.findAvailableRoom();
        Hotel hotel23 = new Hotel(0);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Room room26 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        hotel23.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) ' ');
        Hotel hotel32 = new Hotel((int) (short) 0);
        Room room33 = hotel32.findAvailableRoom();
        Hotel hotel35 = new Hotel(10);
        Room room36 = hotel35.findAvailableRoom();
        hotel32.reserveRoom(room36);
        hotel30.reserveRoom(room36);
        hotel23.reserveRoom(room36);
        hotel17.reserveRoom(room36);
        hotel13.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        Room room44 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass45 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1587");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room41 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Room room45 = hotel38.findAvailableRoom();
        hotel1.reserveRoom(room45);
        java.lang.Class<?> wildcardClass47 = room45.getClass();
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1588");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Room room11 = hotel9.findAvailableRoom();
        Room room12 = hotel9.findAvailableRoom();
        Room room13 = hotel9.findAvailableRoom();
        Hotel hotel15 = new Hotel(1);
        hotel15.displayRoomStatus();
        Hotel hotel18 = new Hotel(10);
        Room room19 = hotel18.findAvailableRoom();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        hotel38.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel38.reserveRoom(room56);
        hotel29.reserveRoom(room56);
        hotel21.reserveRoom(room56);
        hotel18.reserveRoom(room56);
        hotel15.reserveRoom(room56);
        hotel9.reserveRoom(room56);
        hotel1.reserveRoom(room56);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1589");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        Room room33 = hotel1.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (short) 0);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        hotel35.displayRoomStatus();
        Room room39 = hotel35.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel41.reserveRoom(room72);
        hotel35.reserveRoom(room72);
        hotel1.reserveRoom(room72);
        java.lang.Class<?> wildcardClass77 = room72.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1590");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (short) 1);
        hotel5.displayRoomStatus();
        Room room7 = hotel5.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        hotel9.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel18.reserveRoom(room27);
        hotel9.reserveRoom(room27);
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel31.reserveRoom(room40);
        hotel9.reserveRoom(room40);
        Room room43 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        hotel9.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        hotel47.displayRoomStatus();
        Room room49 = hotel47.findAvailableRoom();
        Hotel hotel51 = new Hotel((int) (byte) 0);
        Hotel hotel53 = new Hotel(0);
        hotel53.displayRoomStatus();
        Room room55 = hotel53.findAvailableRoom();
        Room room56 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        hotel53.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) ' ');
        Hotel hotel62 = new Hotel((int) (short) 0);
        Room room63 = hotel62.findAvailableRoom();
        Hotel hotel65 = new Hotel(10);
        Room room66 = hotel65.findAvailableRoom();
        hotel62.reserveRoom(room66);
        hotel60.reserveRoom(room66);
        hotel53.reserveRoom(room66);
        hotel51.reserveRoom(room66);
        hotel47.reserveRoom(room66);
        hotel9.reserveRoom(room66);
        hotel5.reserveRoom(room66);
        Hotel hotel75 = new Hotel((int) ' ');
        Hotel hotel77 = new Hotel((int) (short) 0);
        Room room78 = hotel77.findAvailableRoom();
        Hotel hotel80 = new Hotel(10);
        Room room81 = hotel80.findAvailableRoom();
        hotel77.reserveRoom(room81);
        hotel75.reserveRoom(room81);
        Hotel hotel85 = new Hotel((int) (byte) -1);
        Hotel hotel87 = new Hotel((int) (byte) -1);
        Room room88 = hotel87.findAvailableRoom();
        hotel87.displayRoomStatus();
        Hotel hotel91 = new Hotel((int) (byte) 1);
        Room room92 = hotel91.findAvailableRoom();
        hotel87.reserveRoom(room92);
        hotel85.reserveRoom(room92);
        hotel75.reserveRoom(room92);
        hotel5.reserveRoom(room92);
        hotel1.reserveRoom(room92);
        Room room98 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNull(room88);
        org.junit.Assert.assertNotNull(room92);
        org.junit.Assert.assertNotNull(room98);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1591");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room60 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room60);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1592");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        Room room51 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room51);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1593");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        Room room19 = hotel1.findAvailableRoom();
        Room room20 = hotel1.findAvailableRoom();
        Hotel hotel22 = new Hotel(10);
        Room room23 = hotel22.findAvailableRoom();
        Room room24 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Room room26 = hotel22.findAvailableRoom();
        hotel1.reserveRoom(room26);
        java.lang.Class<?> wildcardClass28 = room26.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1594");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel27.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel27.reserveRoom(room73);
        hotel5.reserveRoom(room73);
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        hotel5.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        Room room88 = hotel1.findAvailableRoom();
        Room room89 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass91 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNull(room88);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1595");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel60 = new Hotel(10);
        Room room61 = hotel60.findAvailableRoom();
        Room room62 = hotel60.findAvailableRoom();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        hotel73.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel73.reserveRoom(room91);
        hotel64.reserveRoom(room91);
        hotel60.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        java.lang.Class<?> wildcardClass97 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1596");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel3.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel3.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        Hotel hotel55 = new Hotel(0);
        hotel55.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel55.reserveRoom(room59);
        hotel55.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) 'a');
        hotel63.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        hotel63.reserveRoom(room71);
        hotel55.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        Room room76 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass78 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1597");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room17 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room17);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1598");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel((-1));
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) ' ');
        Hotel hotel14 = new Hotel((int) (short) 0);
        Room room15 = hotel14.findAvailableRoom();
        Hotel hotel17 = new Hotel(10);
        Room room18 = hotel17.findAvailableRoom();
        hotel14.reserveRoom(room18);
        hotel12.reserveRoom(room18);
        Room room21 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) 'a');
        hotel24.displayRoomStatus();
        Room room26 = hotel24.findAvailableRoom();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        hotel28.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel28.reserveRoom(room55);
        hotel24.reserveRoom(room55);
        hotel9.reserveRoom(room55);
        hotel6.reserveRoom(room55);
        hotel1.reserveRoom(room55);
        java.lang.Class<?> wildcardClass63 = room55.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1599");
        Hotel hotel1 = new Hotel(100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (short) -1);
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Room room12 = hotel7.findAvailableRoom();
        Hotel hotel14 = new Hotel(10);
        Room room15 = hotel14.findAvailableRoom();
        hotel7.reserveRoom(room15);
        hotel4.reserveRoom(room15);
        hotel1.reserveRoom(room15);
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel42.reserveRoom(room51);
        hotel33.reserveRoom(room51);
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel33.reserveRoom(room64);
        hotel29.reserveRoom(room64);
        hotel20.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        java.lang.Class<?> wildcardClass70 = hotel1.getClass();
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1600");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass12 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1601");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel(1);
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        hotel14.reserveRoom(room41);
        hotel10.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        hotel50.displayRoomStatus();
        Room room52 = hotel50.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        hotel50.reserveRoom(room72);
        Room room76 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) ' ');
        Hotel hotel81 = new Hotel((int) 'a');
        hotel81.displayRoomStatus();
        Room room83 = hotel81.findAvailableRoom();
        hotel79.reserveRoom(room83);
        hotel50.reserveRoom(room83);
        hotel1.reserveRoom(room83);
        java.lang.Class<?> wildcardClass87 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1602");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) '4');
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel16.reserveRoom(room47);
        hotel12.reserveRoom(room47);
        hotel10.reserveRoom(room47);
        Room room52 = hotel10.findAvailableRoom();
        hotel1.reserveRoom(room52);
        java.lang.Class<?> wildcardClass54 = room52.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1603");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel7.reserveRoom(room11);
        hotel7.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (short) 0);
        Room room16 = hotel15.findAvailableRoom();
        Hotel hotel18 = new Hotel(10);
        Room room19 = hotel18.findAvailableRoom();
        hotel15.reserveRoom(room19);
        hotel7.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Room room26 = hotel23.findAvailableRoom();
        Room room27 = hotel23.findAvailableRoom();
        Hotel hotel29 = new Hotel(0);
        hotel29.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel29.reserveRoom(room33);
        Room room35 = hotel29.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel41.reserveRoom(room72);
        hotel37.reserveRoom(room72);
        hotel29.reserveRoom(room72);
        hotel23.reserveRoom(room72);
        hotel7.reserveRoom(room72);
        hotel1.reserveRoom(room72);
        Room room80 = hotel1.findAvailableRoom();
        Room room81 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (short) 1);
        Hotel hotel86 = new Hotel((int) (short) 0);
        Room room87 = hotel86.findAvailableRoom();
        Hotel hotel89 = new Hotel(10);
        Room room90 = hotel89.findAvailableRoom();
        hotel86.reserveRoom(room90);
        hotel84.reserveRoom(room90);
        hotel84.displayRoomStatus();
        hotel84.displayRoomStatus();
        hotel84.displayRoomStatus();
        hotel84.displayRoomStatus();
        hotel84.displayRoomStatus();
        Room room98 = hotel84.findAvailableRoom();
        hotel1.reserveRoom(room98);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNull(room87);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room98);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1604");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass13 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1605");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Room room23 = hotel1.findAvailableRoom();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Room room28 = hotel25.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel30.reserveRoom(room52);
        hotel30.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel30.reserveRoom(room76);
        hotel25.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel85.displayRoomStatus();
        Room room88 = hotel85.findAvailableRoom();
        Room room89 = hotel85.findAvailableRoom();
        hotel1.reserveRoom(room89);
        Room room91 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNull(room91);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1606");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room31 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room33 = hotel1.findAvailableRoom();
        Hotel hotel35 = new Hotel(10);
        Room room36 = hotel35.findAvailableRoom();
        Room room37 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Room room39 = hotel35.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (short) 10);
        Room room42 = hotel41.findAvailableRoom();
        Room room43 = hotel41.findAvailableRoom();
        hotel35.reserveRoom(room43);
        hotel1.reserveRoom(room43);
        java.lang.Class<?> wildcardClass46 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1607");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass13 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1608");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (short) 0);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        hotel8.displayRoomStatus();
        Room room12 = hotel8.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel8.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        java.lang.Class<?> wildcardClass50 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1609");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        Room room18 = hotel1.findAvailableRoom();
        Room room19 = hotel1.findAvailableRoom();
        Room room20 = hotel1.findAvailableRoom();
        Room room21 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass22 = room21.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room21);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1610");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        Room room39 = hotel28.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel28.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) 'a');
        hotel56.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        hotel56.reserveRoom(room64);
        hotel56.displayRoomStatus();
        hotel56.displayRoomStatus();
        Room room69 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room69);
        Room room71 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room71);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1611");
        Hotel hotel1 = new Hotel((-1));
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(0);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        hotel4.displayRoomStatus();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel4.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room17 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room17);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1612");
        Hotel hotel1 = new Hotel((int) (short) 1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Room room11 = hotel7.findAvailableRoom();
        Hotel hotel13 = new Hotel(0);
        hotel13.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel13.reserveRoom(room17);
        Room room19 = hotel13.findAvailableRoom();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel25.reserveRoom(room56);
        hotel21.reserveRoom(room56);
        hotel13.reserveRoom(room56);
        hotel7.reserveRoom(room56);
        hotel1.reserveRoom(room56);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1613");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel(10);
        Room room9 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel15.reserveRoom(room50);
        hotel13.reserveRoom(room50);
        hotel13.displayRoomStatus();
        hotel13.displayRoomStatus();
        Room room57 = hotel13.findAvailableRoom();
        Room room58 = hotel13.findAvailableRoom();
        hotel1.reserveRoom(room58);
        java.lang.Class<?> wildcardClass60 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1614");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel41.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        hotel1.displayRoomStatus();
        Room room92 = hotel1.findAvailableRoom();
        Room room93 = hotel1.findAvailableRoom();
        Room room94 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNull(room92);
        org.junit.Assert.assertNull(room93);
        org.junit.Assert.assertNull(room94);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1615");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel59 = new Hotel(10);
        hotel59.displayRoomStatus();
        Room room61 = hotel59.findAvailableRoom();
        Hotel hotel63 = new Hotel(0);
        Room room64 = hotel63.findAvailableRoom();
        Hotel hotel66 = new Hotel((int) ' ');
        Hotel hotel68 = new Hotel((int) (short) 0);
        Room room69 = hotel68.findAvailableRoom();
        Hotel hotel71 = new Hotel(10);
        Room room72 = hotel71.findAvailableRoom();
        hotel68.reserveRoom(room72);
        hotel66.reserveRoom(room72);
        Room room75 = hotel66.findAvailableRoom();
        hotel63.reserveRoom(room75);
        hotel59.reserveRoom(room75);
        Room room78 = hotel59.findAvailableRoom();
        hotel1.reserveRoom(room78);
        Room room80 = hotel1.findAvailableRoom();
        Room room81 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass82 = room81.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNull(room81);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1616");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (short) 0);
        Room room8 = hotel7.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) 'a');
        hotel10.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel10.reserveRoom(room18);
        hotel10.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel27.reserveRoom(room58);
        hotel23.reserveRoom(room58);
        hotel10.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        hotel1.reserveRoom(room58);
        Room room65 = hotel1.findAvailableRoom();
        Room room66 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNull(room66);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1617");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) 'a');
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel4.reserveRoom(room12);
        Room room15 = hotel4.findAvailableRoom();
        Room room16 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room16);
        Room room18 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room20 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room20);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1618");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        Room room29 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass30 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1619");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) ' ');
        Hotel hotel7 = new Hotel((int) 'a');
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        hotel5.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel1.reserveRoom(room14);
        java.lang.Class<?> wildcardClass16 = room14.getClass();
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1620");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) 'a');
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        hotel8.reserveRoom(room32);
        hotel8.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (short) 10);
        Room room37 = hotel36.findAvailableRoom();
        hotel8.reserveRoom(room37);
        hotel1.reserveRoom(room37);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel41.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1621");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1622");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room31 = hotel1.findAvailableRoom();
        Room room32 = hotel1.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        Hotel hotel56 = new Hotel((int) 'a');
        hotel56.displayRoomStatus();
        Room room58 = hotel56.findAvailableRoom();
        hotel34.reserveRoom(room58);
        Room room60 = hotel34.findAvailableRoom();
        Room room61 = hotel34.findAvailableRoom();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        hotel63.displayRoomStatus();
        Room room71 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Room room73 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        hotel63.displayRoomStatus();
        hotel63.displayRoomStatus();
        Hotel hotel78 = new Hotel(10);
        Room room79 = hotel78.findAvailableRoom();
        Room room80 = hotel78.findAvailableRoom();
        Room room81 = hotel78.findAvailableRoom();
        hotel63.reserveRoom(room81);
        hotel34.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        java.lang.Class<?> wildcardClass85 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1623");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Room room14 = hotel10.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel10.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Hotel hotel21 = new Hotel((int) (short) 0);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Room room24 = hotel21.findAvailableRoom();
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) 'a');
        hotel29.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel29.reserveRoom(room37);
        hotel29.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel68.reserveRoom(room77);
        hotel46.reserveRoom(room77);
        hotel42.reserveRoom(room77);
        hotel29.reserveRoom(room77);
        hotel26.reserveRoom(room77);
        hotel21.reserveRoom(room77);
        hotel1.reserveRoom(room77);
        java.lang.Class<?> wildcardClass85 = room77.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1624");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 10);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(0);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel17 = new Hotel(10);
        Room room18 = hotel17.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        hotel20.displayRoomStatus();
        Room room22 = hotel20.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        hotel24.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        hotel24.reserveRoom(room42);
        hotel20.reserveRoom(room42);
        hotel20.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel20.reserveRoom(room57);
        hotel17.reserveRoom(room57);
        hotel12.reserveRoom(room57);
        hotel12.displayRoomStatus();
        hotel12.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel12.reserveRoom(room66);
        hotel9.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        hotel1.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) ' ');
        Room room73 = hotel72.findAvailableRoom();
        hotel1.reserveRoom(room73);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room73);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1625");
        Hotel hotel1 = new Hotel((int) (byte) 100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        hotel12.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        hotel46.displayRoomStatus();
        Room room48 = hotel46.findAvailableRoom();
        Room room49 = hotel46.findAvailableRoom();
        Hotel hotel51 = new Hotel(1);
        hotel51.displayRoomStatus();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel64.reserveRoom(room82);
        hotel55.reserveRoom(room82);
        hotel51.reserveRoom(room82);
        hotel51.displayRoomStatus();
        hotel51.displayRoomStatus();
        Room room89 = hotel51.findAvailableRoom();
        hotel46.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        Room room92 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(room92);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1626");
        Hotel hotel1 = new Hotel((int) (short) -1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(0);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Room room7 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room9 = hotel4.findAvailableRoom();
        Hotel hotel11 = new Hotel(0);
        hotel11.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel11.reserveRoom(room15);
        hotel11.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (short) 0);
        Room room20 = hotel19.findAvailableRoom();
        Hotel hotel22 = new Hotel(10);
        Room room23 = hotel22.findAvailableRoom();
        hotel19.reserveRoom(room23);
        hotel11.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Room room30 = hotel27.findAvailableRoom();
        Room room31 = hotel27.findAvailableRoom();
        Hotel hotel33 = new Hotel(0);
        hotel33.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel33.reserveRoom(room37);
        Room room39 = hotel33.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel54.reserveRoom(room63);
        hotel45.reserveRoom(room63);
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel45.reserveRoom(room76);
        hotel41.reserveRoom(room76);
        hotel33.reserveRoom(room76);
        hotel27.reserveRoom(room76);
        hotel11.reserveRoom(room76);
        hotel4.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        Room room85 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room85);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1627");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Hotel hotel7 = new Hotel(100);
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        hotel9.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel18.reserveRoom(room27);
        hotel9.reserveRoom(room27);
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel31.reserveRoom(room58);
        hotel9.reserveRoom(room58);
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Room room67 = hotel64.findAvailableRoom();
        hotel9.reserveRoom(room67);
        hotel9.displayRoomStatus();
        hotel9.displayRoomStatus();
        hotel9.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        hotel9.reserveRoom(room78);
        hotel7.reserveRoom(room78);
        hotel5.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        Room room84 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass85 = room84.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room84);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1628");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel(0);
        hotel8.displayRoomStatus();
        Room room10 = hotel8.findAvailableRoom();
        Room room11 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        hotel8.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) ' ');
        Hotel hotel17 = new Hotel((int) (short) 0);
        Room room18 = hotel17.findAvailableRoom();
        Hotel hotel20 = new Hotel(10);
        Room room21 = hotel20.findAvailableRoom();
        hotel17.reserveRoom(room21);
        hotel15.reserveRoom(room21);
        hotel8.reserveRoom(room21);
        hotel8.displayRoomStatus();
        Hotel hotel27 = new Hotel((-1));
        Hotel hotel29 = new Hotel((int) (byte) -1);
        hotel29.displayRoomStatus();
        Room room31 = hotel29.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel42.reserveRoom(room51);
        hotel33.reserveRoom(room51);
        hotel29.reserveRoom(room51);
        hotel27.reserveRoom(room51);
        Hotel hotel57 = new Hotel(0);
        hotel57.displayRoomStatus();
        Room room59 = hotel57.findAvailableRoom();
        Room room60 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        hotel57.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) ' ');
        Hotel hotel66 = new Hotel((int) (short) 0);
        Room room67 = hotel66.findAvailableRoom();
        Hotel hotel69 = new Hotel(10);
        Room room70 = hotel69.findAvailableRoom();
        hotel66.reserveRoom(room70);
        hotel64.reserveRoom(room70);
        hotel57.reserveRoom(room70);
        hotel27.reserveRoom(room70);
        hotel8.reserveRoom(room70);
        hotel1.reserveRoom(room70);
        Room room77 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass78 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1629");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Room room7 = hotel4.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Room room12 = hotel9.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        hotel14.displayRoomStatus();
        Room room16 = hotel14.findAvailableRoom();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel14.reserveRoom(room36);
        hotel14.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel14.reserveRoom(room60);
        hotel9.reserveRoom(room60);
        Room room65 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Room room67 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Room room73 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        hotel70.displayRoomStatus();
        hotel70.displayRoomStatus();
        Room room77 = hotel70.findAvailableRoom();
        hotel9.reserveRoom(room77);
        hotel4.reserveRoom(room77);
        hotel1.reserveRoom(room77);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(room77);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1630");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room65 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room67 = hotel62.findAvailableRoom();
        Room room68 = hotel62.findAvailableRoom();
        hotel1.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (short) 1);
        Hotel hotel73 = new Hotel((int) (short) 0);
        Room room74 = hotel73.findAvailableRoom();
        Hotel hotel76 = new Hotel(10);
        Room room77 = hotel76.findAvailableRoom();
        hotel73.reserveRoom(room77);
        hotel71.reserveRoom(room77);
        hotel71.displayRoomStatus();
        hotel71.displayRoomStatus();
        hotel71.displayRoomStatus();
        hotel71.displayRoomStatus();
        hotel71.displayRoomStatus();
        Room room85 = hotel71.findAvailableRoom();
        hotel1.reserveRoom(room85);
        java.lang.Class<?> wildcardClass87 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1631");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Hotel hotel46 = new Hotel((int) (byte) -1);
        hotel46.displayRoomStatus();
        Room room48 = hotel46.findAvailableRoom();
        Room room49 = hotel46.findAvailableRoom();
        Room room50 = hotel46.findAvailableRoom();
        Room room51 = hotel46.findAvailableRoom();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        hotel53.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel62.reserveRoom(room71);
        hotel53.reserveRoom(room71);
        Hotel hotel75 = new Hotel((int) 'a');
        hotel75.displayRoomStatus();
        Room room77 = hotel75.findAvailableRoom();
        hotel53.reserveRoom(room77);
        hotel53.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (short) 10);
        Room room82 = hotel81.findAvailableRoom();
        hotel53.reserveRoom(room82);
        hotel46.reserveRoom(room82);
        hotel46.displayRoomStatus();
        hotel46.displayRoomStatus();
        Hotel hotel88 = new Hotel((int) 'a');
        hotel88.displayRoomStatus();
        Room room90 = hotel88.findAvailableRoom();
        hotel46.reserveRoom(room90);
        hotel1.reserveRoom(room90);
        Room room93 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room93);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1632");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room18 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room20 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = room20.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room20);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1633");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel10.reserveRoom(room34);
        hotel1.reserveRoom(room34);
        java.lang.Class<?> wildcardClass37 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1634");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel(1);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel10.reserveRoom(room37);
        hotel6.reserveRoom(room37);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Room room44 = hotel6.findAvailableRoom();
        hotel1.reserveRoom(room44);
        Room room46 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room48 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass49 = room48.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1635");
        Hotel hotel1 = new Hotel((int) '#');
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel3.displayRoomStatus();
        hotel3.displayRoomStatus();
        Room room31 = hotel3.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        hotel33.displayRoomStatus();
        Room room35 = hotel33.findAvailableRoom();
        Room room36 = hotel33.findAvailableRoom();
        Hotel hotel38 = new Hotel(1);
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel42.reserveRoom(room69);
        hotel38.reserveRoom(room69);
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Room room76 = hotel38.findAvailableRoom();
        hotel33.reserveRoom(room76);
        Room room78 = hotel33.findAvailableRoom();
        hotel3.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        Room room81 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass82 = room81.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1636");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass19 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1637");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Room room34 = hotel31.findAvailableRoom();
        Hotel hotel36 = new Hotel(1);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel40.reserveRoom(room67);
        hotel36.reserveRoom(room67);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Room room74 = hotel36.findAvailableRoom();
        hotel31.reserveRoom(room74);
        Room room76 = hotel31.findAvailableRoom();
        hotel1.reserveRoom(room76);
        hotel1.displayRoomStatus();
        Room room79 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room79);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1638");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        Hotel hotel45 = new Hotel(0);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Hotel hotel50 = new Hotel(0);
        hotel50.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel50.reserveRoom(room54);
        hotel45.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        Room room58 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room58);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1639");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        Room room10 = hotel1.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (short) 0);
        Room room13 = hotel12.findAvailableRoom();
        Hotel hotel15 = new Hotel(10);
        Room room16 = hotel15.findAvailableRoom();
        hotel12.reserveRoom(room16);
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Room room22 = hotel19.findAvailableRoom();
        hotel12.reserveRoom(room22);
        Room room24 = hotel12.findAvailableRoom();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel35.reserveRoom(room44);
        hotel26.reserveRoom(room44);
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel26.reserveRoom(room57);
        Room room60 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        hotel26.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        hotel64.displayRoomStatus();
        Room room66 = hotel64.findAvailableRoom();
        Hotel hotel68 = new Hotel((int) (byte) 0);
        Hotel hotel70 = new Hotel(0);
        hotel70.displayRoomStatus();
        Room room72 = hotel70.findAvailableRoom();
        Room room73 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        hotel70.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) ' ');
        Hotel hotel79 = new Hotel((int) (short) 0);
        Room room80 = hotel79.findAvailableRoom();
        Hotel hotel82 = new Hotel(10);
        Room room83 = hotel82.findAvailableRoom();
        hotel79.reserveRoom(room83);
        hotel77.reserveRoom(room83);
        hotel70.reserveRoom(room83);
        hotel68.reserveRoom(room83);
        hotel64.reserveRoom(room83);
        hotel26.reserveRoom(room83);
        hotel12.reserveRoom(room83);
        hotel1.reserveRoom(room83);
        Room room92 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNull(room92);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1640");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) '4');
        Hotel hotel62 = new Hotel(0);
        Room room63 = hotel62.findAvailableRoom();
        Hotel hotel65 = new Hotel((int) ' ');
        Hotel hotel67 = new Hotel((int) (short) 0);
        Room room68 = hotel67.findAvailableRoom();
        Hotel hotel70 = new Hotel(10);
        Room room71 = hotel70.findAvailableRoom();
        hotel67.reserveRoom(room71);
        hotel65.reserveRoom(room71);
        Room room74 = hotel65.findAvailableRoom();
        hotel62.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) 'a');
        hotel77.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) -1);
        Room room81 = hotel80.findAvailableRoom();
        hotel80.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel80.reserveRoom(room85);
        hotel77.reserveRoom(room85);
        Room room88 = hotel77.findAvailableRoom();
        Room room89 = hotel77.findAvailableRoom();
        Room room90 = hotel77.findAvailableRoom();
        hotel62.reserveRoom(room90);
        hotel60.reserveRoom(room90);
        hotel1.reserveRoom(room90);
        Room room94 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room94);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1641");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = room7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1642");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel(0);
        hotel8.displayRoomStatus();
        Room room10 = hotel8.findAvailableRoom();
        Room room11 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        hotel8.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) ' ');
        Hotel hotel17 = new Hotel((int) (short) 0);
        Room room18 = hotel17.findAvailableRoom();
        Hotel hotel20 = new Hotel(10);
        Room room21 = hotel20.findAvailableRoom();
        hotel17.reserveRoom(room21);
        hotel15.reserveRoom(room21);
        hotel8.reserveRoom(room21);
        Room room25 = hotel8.findAvailableRoom();
        Room room26 = hotel8.findAvailableRoom();
        Room room27 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        Room room33 = hotel30.findAvailableRoom();
        Room room34 = hotel30.findAvailableRoom();
        Room room35 = hotel30.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        Hotel hotel59 = new Hotel((int) 'a');
        hotel59.displayRoomStatus();
        Room room61 = hotel59.findAvailableRoom();
        hotel37.reserveRoom(room61);
        hotel37.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (short) 10);
        Room room66 = hotel65.findAvailableRoom();
        hotel37.reserveRoom(room66);
        hotel30.reserveRoom(room66);
        hotel30.displayRoomStatus();
        hotel30.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) 'a');
        hotel72.displayRoomStatus();
        Room room74 = hotel72.findAvailableRoom();
        hotel30.reserveRoom(room74);
        hotel8.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Room room82 = hotel79.findAvailableRoom();
        Room room83 = hotel79.findAvailableRoom();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel79.reserveRoom(room86);
        Room room88 = hotel79.findAvailableRoom();
        hotel1.reserveRoom(room88);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room88);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1643");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (short) 0);
        Room room6 = hotel5.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) 'a');
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel8.reserveRoom(room16);
        Room room19 = hotel8.findAvailableRoom();
        Room room20 = hotel8.findAvailableRoom();
        hotel5.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        Room room23 = hotel1.findAvailableRoom();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        Room room36 = hotel25.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel25.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1644");
        Hotel hotel1 = new Hotel((int) 'a');
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel3.reserveRoom(room8);
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel3.reserveRoom(room12);
        Room room14 = hotel3.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Room room29 = hotel1.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (short) 10);
        Room room32 = hotel31.findAvailableRoom();
        Hotel hotel34 = new Hotel(0);
        hotel34.displayRoomStatus();
        Room room36 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel39 = new Hotel(10);
        Room room40 = hotel39.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        hotel42.displayRoomStatus();
        Room room44 = hotel42.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        hotel42.reserveRoom(room64);
        hotel42.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) -1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel70.reserveRoom(room75);
        Hotel hotel78 = new Hotel((int) (byte) 1);
        Room room79 = hotel78.findAvailableRoom();
        hotel70.reserveRoom(room79);
        hotel42.reserveRoom(room79);
        hotel39.reserveRoom(room79);
        hotel34.reserveRoom(room79);
        hotel34.displayRoomStatus();
        hotel34.displayRoomStatus();
        Hotel hotel87 = new Hotel((int) (byte) 1);
        Room room88 = hotel87.findAvailableRoom();
        hotel34.reserveRoom(room88);
        hotel31.reserveRoom(room88);
        hotel1.reserveRoom(room88);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(room88);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1645");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel((int) (byte) 10);
        Hotel hotel8 = new Hotel(0);
        Room room9 = hotel8.findAvailableRoom();
        Hotel hotel11 = new Hotel((-1));
        hotel11.displayRoomStatus();
        Hotel hotel14 = new Hotel(0);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        hotel14.displayRoomStatus();
        Hotel hotel19 = new Hotel(0);
        hotel19.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel19.reserveRoom(room23);
        hotel14.reserveRoom(room23);
        hotel11.reserveRoom(room23);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        hotel28.displayRoomStatus();
        hotel28.displayRoomStatus();
        Room room33 = hotel28.findAvailableRoom();
        Hotel hotel35 = new Hotel(10);
        Room room36 = hotel35.findAvailableRoom();
        hotel28.reserveRoom(room36);
        hotel28.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel68.reserveRoom(room77);
        hotel46.reserveRoom(room77);
        hotel42.reserveRoom(room77);
        hotel40.reserveRoom(room77);
        hotel40.displayRoomStatus();
        hotel40.displayRoomStatus();
        Room room84 = hotel40.findAvailableRoom();
        Room room85 = hotel40.findAvailableRoom();
        hotel28.reserveRoom(room85);
        hotel11.reserveRoom(room85);
        hotel8.reserveRoom(room85);
        hotel6.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        java.lang.Class<?> wildcardClass91 = room85.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1646");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        Room room29 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room31 = hotel1.findAvailableRoom();
        Room room32 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room34);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1647");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel(0);
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel8.reserveRoom(room12);
        hotel8.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (short) 0);
        Room room17 = hotel16.findAvailableRoom();
        Hotel hotel19 = new Hotel(10);
        Room room20 = hotel19.findAvailableRoom();
        hotel16.reserveRoom(room20);
        hotel8.reserveRoom(room20);
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Room room27 = hotel24.findAvailableRoom();
        Room room28 = hotel24.findAvailableRoom();
        Hotel hotel30 = new Hotel(0);
        hotel30.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel30.reserveRoom(room34);
        Room room36 = hotel30.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel42.reserveRoom(room73);
        hotel38.reserveRoom(room73);
        hotel30.reserveRoom(room73);
        hotel24.reserveRoom(room73);
        hotel8.reserveRoom(room73);
        hotel1.reserveRoom(room73);
        java.lang.Class<?> wildcardClass81 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1648");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        hotel1.displayRoomStatus();
        Hotel hotel21 = new Hotel(0);
        Room room22 = hotel21.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        Room room33 = hotel24.findAvailableRoom();
        hotel21.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) 'a');
        hotel36.displayRoomStatus();
        Room room38 = hotel36.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel40.reserveRoom(room67);
        hotel36.reserveRoom(room67);
        hotel21.reserveRoom(room67);
        hotel1.reserveRoom(room67);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1649");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        hotel44.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel53.reserveRoom(room62);
        hotel44.reserveRoom(room62);
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel44.reserveRoom(room75);
        hotel40.reserveRoom(room75);
        hotel31.reserveRoom(room75);
        hotel1.reserveRoom(room75);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1650");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        Hotel hotel45 = new Hotel(0);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Hotel hotel50 = new Hotel(0);
        hotel50.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel50.reserveRoom(room54);
        hotel45.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room60 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room60);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1651");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel(10);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) 'a');
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        hotel16.reserveRoom(room43);
        hotel12.reserveRoom(room43);
        hotel9.reserveRoom(room43);
        hotel1.reserveRoom(room43);
        Room room50 = hotel1.findAvailableRoom();
        Hotel hotel52 = new Hotel((int) (short) 10);
        Room room53 = hotel52.findAvailableRoom();
        Room room54 = hotel52.findAvailableRoom();
        hotel1.reserveRoom(room54);
        Room room56 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room56);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1652");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        hotel13.displayRoomStatus();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel13.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel13.reserveRoom(room59);
        hotel8.reserveRoom(room59);
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        Room room66 = hotel1.findAvailableRoom();
        Room room67 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room69 = hotel1.findAvailableRoom();
        Room room70 = hotel1.findAvailableRoom();
        Room room71 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNull(room70);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1653");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel(1);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel10.reserveRoom(room37);
        hotel6.reserveRoom(room37);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Room room44 = hotel6.findAvailableRoom();
        hotel1.reserveRoom(room44);
        Room room46 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room50 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1654");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (short) -1);
        hotel45.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        hotel48.displayRoomStatus();
        hotel48.displayRoomStatus();
        Room room53 = hotel48.findAvailableRoom();
        Hotel hotel55 = new Hotel(10);
        Room room56 = hotel55.findAvailableRoom();
        hotel48.reserveRoom(room56);
        hotel45.reserveRoom(room56);
        hotel1.reserveRoom(room56);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room56);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1655");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        hotel1.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        hotel47.displayRoomStatus();
        Room room49 = hotel47.findAvailableRoom();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel47.reserveRoom(room69);
        hotel47.displayRoomStatus();
        hotel47.displayRoomStatus();
        Room room75 = hotel47.findAvailableRoom();
        Hotel hotel77 = new Hotel((int) (short) 0);
        Room room78 = hotel77.findAvailableRoom();
        Hotel hotel80 = new Hotel((int) 'a');
        hotel80.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) -1);
        Room room84 = hotel83.findAvailableRoom();
        hotel83.displayRoomStatus();
        Hotel hotel87 = new Hotel((int) (byte) 1);
        Room room88 = hotel87.findAvailableRoom();
        hotel83.reserveRoom(room88);
        hotel80.reserveRoom(room88);
        Room room91 = hotel80.findAvailableRoom();
        Room room92 = hotel80.findAvailableRoom();
        hotel77.reserveRoom(room92);
        hotel47.reserveRoom(room92);
        hotel1.reserveRoom(room92);
        Room room96 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(room92);
        org.junit.Assert.assertNotNull(room96);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1656");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1657");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (short) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        Room room12 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass14 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1658");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) 'a');
        hotel29.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel29.reserveRoom(room37);
        Room room40 = hotel29.findAvailableRoom();
        Room room41 = hotel29.findAvailableRoom();
        hotel1.reserveRoom(room41);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel46 = new Hotel(100);
        hotel46.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (short) 0);
        Room room50 = hotel49.findAvailableRoom();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        hotel56.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel56.reserveRoom(room74);
        Hotel hotel78 = new Hotel((int) (byte) -1);
        Room room79 = hotel78.findAvailableRoom();
        hotel78.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel78.reserveRoom(room83);
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel78.reserveRoom(room87);
        hotel56.reserveRoom(room87);
        hotel52.reserveRoom(room87);
        hotel49.reserveRoom(room87);
        hotel46.reserveRoom(room87);
        Room room93 = hotel46.findAvailableRoom();
        hotel1.reserveRoom(room93);
        Room room95 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass96 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNull(room95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1659");
        Hotel hotel1 = new Hotel((int) (short) 100);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room2);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1660");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel27.reserveRoom(room54);
        hotel5.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        Hotel hotel61 = new Hotel((int) ' ');
        Hotel hotel63 = new Hotel((int) 'a');
        hotel63.displayRoomStatus();
        Room room65 = hotel63.findAvailableRoom();
        hotel61.reserveRoom(room65);
        hotel1.reserveRoom(room65);
        hotel1.displayRoomStatus();
        Room room69 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room69);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1661");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Room room40 = hotel1.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        Hotel hotel64 = new Hotel((int) 'a');
        hotel64.displayRoomStatus();
        Room room66 = hotel64.findAvailableRoom();
        hotel42.reserveRoom(room66);
        hotel42.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (short) 10);
        Room room71 = hotel70.findAvailableRoom();
        hotel42.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        Room room74 = hotel1.findAvailableRoom();
        Room room75 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNull(room75);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1662");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1663");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Room room30 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room33 = hotel1.findAvailableRoom();
        Room room34 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel37 = new Hotel(0);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        hotel37.displayRoomStatus();
        Hotel hotel42 = new Hotel(0);
        hotel42.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel42.reserveRoom(room46);
        hotel37.reserveRoom(room46);
        hotel1.reserveRoom(room46);
        Room room50 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room50);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1664");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel30 = new Hotel(0);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel35 = new Hotel(10);
        Room room36 = hotel35.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        hotel38.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel38.reserveRoom(room75);
        hotel35.reserveRoom(room75);
        hotel30.reserveRoom(room75);
        hotel1.reserveRoom(room75);
        hotel1.displayRoomStatus();
        Room room82 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass83 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1665");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room38 = hotel1.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        hotel40.displayRoomStatus();
        Room room42 = hotel40.findAvailableRoom();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        hotel44.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel53.reserveRoom(room62);
        hotel44.reserveRoom(room62);
        hotel40.reserveRoom(room62);
        Room room66 = hotel40.findAvailableRoom();
        Room room67 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        hotel40.displayRoomStatus();
        Hotel hotel71 = new Hotel(10);
        Room room72 = hotel71.findAvailableRoom();
        hotel40.reserveRoom(room72);
        hotel1.reserveRoom(room72);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room72);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1666");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room41 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Room room45 = hotel38.findAvailableRoom();
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room49 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass50 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1667");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Room room23 = hotel1.findAvailableRoom();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Room room28 = hotel25.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel30.reserveRoom(room52);
        hotel30.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel30.reserveRoom(room76);
        hotel25.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass84 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1668");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room37 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room39 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass40 = room39.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room39);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1669");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room10 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass12 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1670");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Hotel hotel45 = new Hotel(100);
        hotel45.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (short) 0);
        Room room49 = hotel48.findAvailableRoom();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel55.reserveRoom(room86);
        hotel51.reserveRoom(room86);
        hotel48.reserveRoom(room86);
        hotel45.reserveRoom(room86);
        Room room92 = hotel45.findAvailableRoom();
        hotel1.reserveRoom(room92);
        Room room94 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room96 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass97 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room92);
        org.junit.Assert.assertNull(room94);
        org.junit.Assert.assertNull(room96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1671");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room18 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel22 = new Hotel(1);
        hotel22.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        hotel25.displayRoomStatus();
        Room room27 = hotel25.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel25.reserveRoom(room47);
        hotel25.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel53.reserveRoom(room62);
        hotel25.reserveRoom(room62);
        Hotel hotel66 = new Hotel(0);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Room room71 = hotel68.findAvailableRoom();
        hotel66.reserveRoom(room71);
        hotel25.reserveRoom(room71);
        hotel22.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        Hotel hotel77 = new Hotel((int) 'a');
        Room room78 = hotel77.findAvailableRoom();
        hotel1.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) 'a');
        hotel81.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) -1);
        Room room85 = hotel84.findAvailableRoom();
        hotel84.displayRoomStatus();
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel84.reserveRoom(room89);
        hotel81.reserveRoom(room89);
        hotel81.displayRoomStatus();
        hotel81.displayRoomStatus();
        Room room94 = hotel81.findAvailableRoom();
        hotel1.reserveRoom(room94);
        java.lang.Class<?> wildcardClass96 = room94.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room85);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(room94);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1672");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room58 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room58);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1673");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) 'a');
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel4.reserveRoom(room12);
        hotel4.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel21.reserveRoom(room52);
        hotel17.reserveRoom(room52);
        hotel4.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Hotel hotel59 = new Hotel((int) (short) 1);
        Hotel hotel61 = new Hotel((int) (short) 0);
        Room room62 = hotel61.findAvailableRoom();
        Hotel hotel64 = new Hotel(10);
        Room room65 = hotel64.findAvailableRoom();
        hotel61.reserveRoom(room65);
        hotel59.reserveRoom(room65);
        hotel1.reserveRoom(room65);
        Hotel hotel70 = new Hotel((int) (byte) 10);
        Room room71 = hotel70.findAvailableRoom();
        Room room72 = hotel70.findAvailableRoom();
        Hotel hotel74 = new Hotel((int) (byte) -1);
        Room room75 = hotel74.findAvailableRoom();
        hotel74.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) 1);
        Room room79 = hotel78.findAvailableRoom();
        hotel74.reserveRoom(room79);
        Room room81 = hotel74.findAvailableRoom();
        Room room82 = hotel74.findAvailableRoom();
        Hotel hotel84 = new Hotel((int) (short) 1);
        hotel84.displayRoomStatus();
        hotel84.displayRoomStatus();
        hotel84.displayRoomStatus();
        Room room88 = hotel84.findAvailableRoom();
        hotel74.reserveRoom(room88);
        hotel70.reserveRoom(room88);
        hotel1.reserveRoom(room88);
        Room room92 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNull(room92);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1674");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1675");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel27.reserveRoom(room54);
        hotel5.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        Hotel hotel61 = new Hotel((int) ' ');
        Hotel hotel63 = new Hotel((int) 'a');
        hotel63.displayRoomStatus();
        Room room65 = hotel63.findAvailableRoom();
        hotel61.reserveRoom(room65);
        hotel1.reserveRoom(room65);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass69 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1676");
        Hotel hotel1 = new Hotel(0);
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        hotel15.displayRoomStatus();
        Room room17 = hotel15.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel15.reserveRoom(room37);
        hotel15.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        hotel15.reserveRoom(room61);
        hotel10.reserveRoom(room61);
        Room room66 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room68 = hotel10.findAvailableRoom();
        hotel1.reserveRoom(room68);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room72 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room72);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1677");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (short) 0);
        Room room25 = hotel24.findAvailableRoom();
        Hotel hotel27 = new Hotel(10);
        Room room28 = hotel27.findAvailableRoom();
        hotel24.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel54.reserveRoom(room63);
        hotel45.reserveRoom(room63);
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel45.reserveRoom(room76);
        hotel41.reserveRoom(room76);
        hotel32.reserveRoom(room76);
        Room room81 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel84.displayRoomStatus();
        Room room87 = hotel84.findAvailableRoom();
        hotel84.displayRoomStatus();
        Room room89 = hotel84.findAvailableRoom();
        hotel32.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        Room room92 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNull(room92);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1678");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room41 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Room room45 = hotel38.findAvailableRoom();
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room50 = hotel1.findAvailableRoom();
        Room room51 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room51);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1679");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        hotel67.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel67.reserveRoom(room85);
        hotel58.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        Room room90 = hotel1.findAvailableRoom();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        hotel92.displayRoomStatus();
        Room room94 = hotel92.findAvailableRoom();
        Room room95 = hotel92.findAvailableRoom();
        hotel1.reserveRoom(room95);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room94);
        org.junit.Assert.assertNotNull(room95);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1680");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        Room room37 = hotel1.findAvailableRoom();
        Room room38 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass39 = room38.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room38);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1681");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (short) 0);
        Room room8 = hotel7.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) 'a');
        hotel10.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel10.reserveRoom(room18);
        hotel10.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel27.reserveRoom(room58);
        hotel23.reserveRoom(room58);
        hotel10.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        hotel1.reserveRoom(room58);
        Room room65 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room67 = hotel1.findAvailableRoom();
        Room room68 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNull(room68);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1682");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel(10);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) 'a');
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        hotel16.reserveRoom(room43);
        hotel12.reserveRoom(room43);
        hotel9.reserveRoom(room43);
        hotel1.reserveRoom(room43);
        Room room50 = hotel1.findAvailableRoom();
        Hotel hotel52 = new Hotel((int) (short) 10);
        Room room53 = hotel52.findAvailableRoom();
        Room room54 = hotel52.findAvailableRoom();
        hotel1.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        hotel57.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        hotel66.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel75.reserveRoom(room84);
        hotel66.reserveRoom(room84);
        hotel57.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        hotel1.displayRoomStatus();
        Room room90 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNull(room90);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1683");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel1.reserveRoom(room11);
        hotel1.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) ' ');
        Hotel hotel18 = new Hotel((int) 'a');
        hotel18.displayRoomStatus();
        Room room20 = hotel18.findAvailableRoom();
        hotel16.reserveRoom(room20);
        Room room22 = hotel16.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) 'a');
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        Room room37 = hotel26.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel39.reserveRoom(room48);
        hotel26.reserveRoom(room48);
        hotel24.reserveRoom(room48);
        Room room52 = hotel24.findAvailableRoom();
        Hotel hotel54 = new Hotel((-1));
        Hotel hotel56 = new Hotel((int) (byte) -1);
        hotel56.displayRoomStatus();
        Room room58 = hotel56.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        hotel56.reserveRoom(room78);
        hotel54.reserveRoom(room78);
        hotel24.reserveRoom(room78);
        hotel16.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1684");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        hotel9.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel9.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Room room41 = hotel1.findAvailableRoom();
        Room room42 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room42);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1685");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        hotel9.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel9.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        Room room42 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room42);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1686");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Room room14 = hotel10.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel10.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Hotel hotel21 = new Hotel(0);
        Room room22 = hotel21.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        Room room33 = hotel24.findAvailableRoom();
        hotel21.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) 'a');
        hotel36.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel36.reserveRoom(room44);
        Room room47 = hotel36.findAvailableRoom();
        Room room48 = hotel36.findAvailableRoom();
        Room room49 = hotel36.findAvailableRoom();
        hotel21.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        java.lang.Class<?> wildcardClass52 = room49.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1687");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel1.reserveRoom(room11);
        Room room14 = hotel1.findAvailableRoom();
        Room room15 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1688");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel(10);
        Room room9 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room9);
        Hotel hotel12 = new Hotel((int) (short) 0);
        Room room13 = hotel12.findAvailableRoom();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        hotel38.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        hotel47.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel56.reserveRoom(room65);
        hotel47.reserveRoom(room65);
        hotel38.reserveRoom(room65);
        hotel16.reserveRoom(room65);
        hotel12.reserveRoom(room65);
        Hotel hotel72 = new Hotel((int) ' ');
        Hotel hotel74 = new Hotel((int) 'a');
        hotel74.displayRoomStatus();
        Room room76 = hotel74.findAvailableRoom();
        hotel72.reserveRoom(room76);
        hotel12.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        java.lang.Class<?> wildcardClass80 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1689");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room46 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass47 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1690");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room9);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1691");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) 'a');
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel9.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        java.lang.Class<?> wildcardClass21 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1692");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel(1);
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        hotel14.reserveRoom(room41);
        hotel10.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Hotel hotel48 = new Hotel(10);
        Room room49 = hotel48.findAvailableRoom();
        Room room50 = hotel48.findAvailableRoom();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        hotel52.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) -1);
        Room room62 = hotel61.findAvailableRoom();
        hotel61.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel61.reserveRoom(room66);
        hotel61.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) -1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel70.reserveRoom(room75);
        Hotel hotel78 = new Hotel((int) (byte) 1);
        Room room79 = hotel78.findAvailableRoom();
        hotel70.reserveRoom(room79);
        hotel61.reserveRoom(room79);
        hotel52.reserveRoom(room79);
        hotel48.reserveRoom(room79);
        Room room84 = hotel48.findAvailableRoom();
        hotel1.reserveRoom(room84);
        java.lang.Class<?> wildcardClass86 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1693");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Room room20 = hotel17.findAvailableRoom();
        Room room21 = hotel17.findAvailableRoom();
        Hotel hotel23 = new Hotel(0);
        hotel23.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel23.reserveRoom(room27);
        Room room29 = hotel23.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel35.reserveRoom(room66);
        hotel31.reserveRoom(room66);
        hotel23.reserveRoom(room66);
        hotel17.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        hotel1.displayRoomStatus();
        Room room74 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room74);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1694");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel7.reserveRoom(room11);
        Room room13 = hotel7.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel15.reserveRoom(room50);
        hotel7.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) 'a');
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        Room room71 = hotel60.findAvailableRoom();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel60.reserveRoom(room82);
        hotel58.reserveRoom(room82);
        hotel1.reserveRoom(room82);
        hotel1.displayRoomStatus();
        Room room88 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room90 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNull(room88);
        org.junit.Assert.assertNull(room90);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1695");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Hotel hotel10 = new Hotel(1);
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel16 = new Hotel(10);
        Room room17 = hotel16.findAvailableRoom();
        Room room18 = hotel16.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (short) 0);
        Room room21 = hotel20.findAvailableRoom();
        Room room22 = hotel20.findAvailableRoom();
        Room room23 = hotel20.findAvailableRoom();
        Room room24 = hotel20.findAvailableRoom();
        Hotel hotel26 = new Hotel(0);
        hotel26.displayRoomStatus();
        Room room28 = hotel26.findAvailableRoom();
        Room room29 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        hotel26.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) ' ');
        Hotel hotel35 = new Hotel((int) (short) 0);
        Room room36 = hotel35.findAvailableRoom();
        Hotel hotel38 = new Hotel(10);
        Room room39 = hotel38.findAvailableRoom();
        hotel35.reserveRoom(room39);
        hotel33.reserveRoom(room39);
        hotel26.reserveRoom(room39);
        hotel20.reserveRoom(room39);
        hotel16.reserveRoom(room39);
        hotel10.reserveRoom(room39);
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Room room50 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        hotel47.displayRoomStatus();
        hotel47.displayRoomStatus();
        Room room54 = hotel47.findAvailableRoom();
        hotel10.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Room room63 = hotel60.findAvailableRoom();
        hotel57.reserveRoom(room63);
        hotel10.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        Room room68 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1696");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        Hotel hotel30 = new Hotel(0);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        Room room33 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        hotel30.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) ' ');
        Hotel hotel39 = new Hotel((int) (short) 0);
        Room room40 = hotel39.findAvailableRoom();
        Hotel hotel42 = new Hotel(10);
        Room room43 = hotel42.findAvailableRoom();
        hotel39.reserveRoom(room43);
        hotel37.reserveRoom(room43);
        hotel30.reserveRoom(room43);
        hotel1.reserveRoom(room43);
        java.lang.Class<?> wildcardClass48 = room43.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1697");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1698");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass8 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1699");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        hotel1.displayRoomStatus();
        Room room16 = hotel1.findAvailableRoom();
        Room room17 = hotel1.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        hotel19.displayRoomStatus();
        Room room21 = hotel19.findAvailableRoom();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        hotel19.reserveRoom(room41);
        Room room45 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel48 = new Hotel(0);
        hotel48.displayRoomStatus();
        Room room50 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel53 = new Hotel(10);
        Room room54 = hotel53.findAvailableRoom();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        hotel56.displayRoomStatus();
        Room room58 = hotel56.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        hotel56.reserveRoom(room78);
        hotel56.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) -1);
        Room room85 = hotel84.findAvailableRoom();
        hotel84.displayRoomStatus();
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel84.reserveRoom(room89);
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel84.reserveRoom(room93);
        hotel56.reserveRoom(room93);
        hotel53.reserveRoom(room93);
        hotel48.reserveRoom(room93);
        hotel19.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room85);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(room93);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1700");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room42 = hotel1.findAvailableRoom();
        Room room43 = hotel1.findAvailableRoom();
        Room room44 = hotel1.findAvailableRoom();
        Room room45 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room48 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room48);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1701");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Room room40 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1702");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room11 = hotel1.findAvailableRoom();
        Room room12 = hotel1.findAvailableRoom();
        Room room13 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1703");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room36 = hotel1.findAvailableRoom();
        Room room37 = hotel1.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (short) 0);
        Room room40 = hotel39.findAvailableRoom();
        Room room41 = hotel39.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        hotel43.displayRoomStatus();
        Room room45 = hotel43.findAvailableRoom();
        Hotel hotel47 = new Hotel((int) (byte) 0);
        Hotel hotel49 = new Hotel(0);
        hotel49.displayRoomStatus();
        Room room51 = hotel49.findAvailableRoom();
        Room room52 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        hotel49.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) ' ');
        Hotel hotel58 = new Hotel((int) (short) 0);
        Room room59 = hotel58.findAvailableRoom();
        Hotel hotel61 = new Hotel(10);
        Room room62 = hotel61.findAvailableRoom();
        hotel58.reserveRoom(room62);
        hotel56.reserveRoom(room62);
        hotel49.reserveRoom(room62);
        hotel47.reserveRoom(room62);
        hotel43.reserveRoom(room62);
        hotel39.reserveRoom(room62);
        hotel1.reserveRoom(room62);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room62);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1704");
        Hotel hotel1 = new Hotel((int) (byte) 100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel9.reserveRoom(room55);
        hotel4.reserveRoom(room55);
        Room room60 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room62 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room64 = hotel4.findAvailableRoom();
        Hotel hotel66 = new Hotel(0);
        hotel66.displayRoomStatus();
        Room room68 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        hotel66.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel66.reserveRoom(room81);
        hotel4.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        java.lang.Class<?> wildcardClass86 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1705");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room21 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass22 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1706");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) ' ');
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel30.reserveRoom(room34);
        hotel1.reserveRoom(room34);
        Room room37 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room37);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1707");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel27.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel27.reserveRoom(room73);
        hotel5.reserveRoom(room73);
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        hotel5.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        Room room88 = hotel1.findAvailableRoom();
        Room room89 = hotel1.findAvailableRoom();
        Room room90 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room93 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNull(room88);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNull(room90);
        org.junit.Assert.assertNull(room93);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1708");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) 'a');
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel4.reserveRoom(room12);
        Room room15 = hotel4.findAvailableRoom();
        Room room16 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room16);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass19 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1709");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        Room room66 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass68 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1710");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Room room32 = hotel29.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        hotel34.displayRoomStatus();
        Room room36 = hotel34.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        hotel38.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel38.reserveRoom(room56);
        hotel34.reserveRoom(room56);
        hotel34.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        hotel62.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel71.reserveRoom(room80);
        hotel62.reserveRoom(room80);
        hotel34.reserveRoom(room80);
        hotel29.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        java.lang.Class<?> wildcardClass86 = room80.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1711");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room18 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room20 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room20);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1712");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1713");
        Hotel hotel1 = new Hotel((int) '4');
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Room room43 = hotel1.findAvailableRoom();
        Room room44 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass45 = room44.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1714");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel(0);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel12.reserveRoom(room21);
        hotel6.reserveRoom(room21);
        hotel1.reserveRoom(room21);
        java.lang.Class<?> wildcardClass25 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1715");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Room room8 = hotel5.findAvailableRoom();
        Room room9 = hotel5.findAvailableRoom();
        Hotel hotel11 = new Hotel(0);
        hotel11.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel11.reserveRoom(room15);
        Room room17 = hotel11.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel23.reserveRoom(room54);
        hotel19.reserveRoom(room54);
        hotel11.reserveRoom(room54);
        hotel5.reserveRoom(room54);
        hotel5.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) 'a');
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        Room room75 = hotel64.findAvailableRoom();
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel64.reserveRoom(room86);
        hotel62.reserveRoom(room86);
        hotel5.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        Room room92 = hotel1.findAvailableRoom();
        Room room93 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNull(room92);
        org.junit.Assert.assertNull(room93);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1716");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) 'a');
        hotel69.displayRoomStatus();
        Room room71 = hotel69.findAvailableRoom();
        hotel1.reserveRoom(room71);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room71);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1717");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) 'a');
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        hotel8.reserveRoom(room32);
        hotel8.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (short) 10);
        Room room37 = hotel36.findAvailableRoom();
        hotel8.reserveRoom(room37);
        hotel1.reserveRoom(room37);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass42 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1718");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room26 = hotel1.findAvailableRoom();
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel42.reserveRoom(room73);
        hotel38.reserveRoom(room73);
        hotel29.reserveRoom(room73);
        Room room78 = hotel29.findAvailableRoom();
        Hotel hotel80 = new Hotel((int) (short) 1);
        Hotel hotel82 = new Hotel((int) (short) 0);
        Room room83 = hotel82.findAvailableRoom();
        Hotel hotel85 = new Hotel(10);
        Room room86 = hotel85.findAvailableRoom();
        hotel82.reserveRoom(room86);
        hotel80.reserveRoom(room86);
        Room room89 = hotel80.findAvailableRoom();
        hotel29.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        Room room92 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass93 = room92.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNull(room92);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1719");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) 'a');
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel8.reserveRoom(room16);
        Room room19 = hotel8.findAvailableRoom();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        hotel21.displayRoomStatus();
        Room room23 = hotel21.findAvailableRoom();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        hotel21.reserveRoom(room43);
        hotel21.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel21.reserveRoom(room67);
        hotel8.reserveRoom(room67);
        hotel1.reserveRoom(room67);
        hotel1.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Room room78 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel81.displayRoomStatus();
        Room room84 = hotel81.findAvailableRoom();
        hotel81.displayRoomStatus();
        Room room86 = hotel81.findAvailableRoom();
        hotel75.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room86);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1720");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel14.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass56 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1721");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1722");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room18 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room22 = hotel1.findAvailableRoom();
        Room room23 = hotel1.findAvailableRoom();
        Hotel hotel25 = new Hotel((int) (short) 0);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Room room28 = hotel25.findAvailableRoom();
        Room room29 = hotel25.findAvailableRoom();
        Room room30 = hotel25.findAvailableRoom();
        Room room31 = hotel25.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Hotel hotel35 = new Hotel((int) (byte) -1);
        hotel35.displayRoomStatus();
        Room room37 = hotel35.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel39.reserveRoom(room57);
        hotel35.reserveRoom(room57);
        hotel35.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        hotel63.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel63.reserveRoom(room81);
        hotel35.reserveRoom(room81);
        hotel33.reserveRoom(room81);
        hotel25.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1723");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Hotel hotel3 = new Hotel(100);
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel27.reserveRoom(room54);
        hotel5.reserveRoom(room54);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Room room63 = hotel60.findAvailableRoom();
        hotel5.reserveRoom(room63);
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        hotel5.reserveRoom(room74);
        hotel3.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        hotel1.displayRoomStatus();
        Room room80 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room80);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1724");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel9.reserveRoom(room55);
        hotel4.reserveRoom(room55);
        Room room60 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room62 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room64 = hotel4.findAvailableRoom();
        Hotel hotel66 = new Hotel(0);
        hotel66.displayRoomStatus();
        Room room68 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        hotel66.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel66.reserveRoom(room81);
        hotel4.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1725");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel(1);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel10.reserveRoom(room37);
        hotel6.reserveRoom(room37);
        hotel6.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Room room47 = hotel44.findAvailableRoom();
        Room room48 = hotel44.findAvailableRoom();
        hotel6.reserveRoom(room48);
        hotel1.reserveRoom(room48);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room48);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1726");
        Hotel hotel1 = new Hotel((int) (short) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        Room room10 = hotel5.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel5.reserveRoom(room13);
        Hotel hotel16 = new Hotel((int) (short) 0);
        Room room17 = hotel16.findAvailableRoom();
        Room room18 = hotel16.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel20.reserveRoom(room38);
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel42.reserveRoom(room69);
        hotel20.reserveRoom(room69);
        hotel16.reserveRoom(room69);
        Hotel hotel76 = new Hotel((int) ' ');
        Hotel hotel78 = new Hotel((int) 'a');
        hotel78.displayRoomStatus();
        Room room80 = hotel78.findAvailableRoom();
        hotel76.reserveRoom(room80);
        hotel16.reserveRoom(room80);
        hotel5.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room80);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1727");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) 'a');
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        Room room21 = hotel10.findAvailableRoom();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel10.reserveRoom(room32);
        hotel8.reserveRoom(room32);
        Room room36 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room36);
        java.lang.Class<?> wildcardClass38 = room36.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1728");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass30 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1729");
        Hotel hotel1 = new Hotel((int) ' ');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) 'a');
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel6.reserveRoom(room15);
        Room room17 = hotel6.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel4.reserveRoom(room28);
        Room room32 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room32);
        java.lang.Class<?> wildcardClass34 = hotel1.getClass();
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1730");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (short) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel9.reserveRoom(room16);
        hotel4.reserveRoom(room16);
        Room room20 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room20);
        java.lang.Class<?> wildcardClass22 = room20.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1731");
        Hotel hotel1 = new Hotel((int) (short) 100);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        Room room8 = hotel6.findAvailableRoom();
        Room room9 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Room room15 = hotel12.findAvailableRoom();
        Room room16 = hotel12.findAvailableRoom();
        Room room17 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (short) 10);
        Room room21 = hotel20.findAvailableRoom();
        Hotel hotel23 = new Hotel(0);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel28 = new Hotel(10);
        Room room29 = hotel28.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel31.reserveRoom(room53);
        hotel31.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel59.reserveRoom(room68);
        hotel31.reserveRoom(room68);
        hotel28.reserveRoom(room68);
        hotel23.reserveRoom(room68);
        hotel23.displayRoomStatus();
        hotel23.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel23.reserveRoom(room77);
        hotel20.reserveRoom(room77);
        hotel12.reserveRoom(room77);
        hotel6.reserveRoom(room77);
        hotel1.reserveRoom(room77);
        Room room83 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room83);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1732");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel(1);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel10.reserveRoom(room37);
        hotel6.reserveRoom(room37);
        hotel6.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Room room47 = hotel44.findAvailableRoom();
        Room room48 = hotel44.findAvailableRoom();
        hotel6.reserveRoom(room48);
        hotel1.reserveRoom(room48);
        hotel1.displayRoomStatus();
        Room room52 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room52);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1733");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room3);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1734");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        Room room57 = hotel1.findAvailableRoom();
        Hotel hotel59 = new Hotel((int) (short) 0);
        Room room60 = hotel59.findAvailableRoom();
        Hotel hotel62 = new Hotel(10);
        Room room63 = hotel62.findAvailableRoom();
        hotel59.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        Room room67 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room67);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1735");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel31.reserveRoom(room40);
        hotel1.reserveRoom(room40);
        Room room43 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room43);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1736");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel1.reserveRoom(room11);
        hotel1.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) ' ');
        Hotel hotel18 = new Hotel((int) 'a');
        hotel18.displayRoomStatus();
        Room room20 = hotel18.findAvailableRoom();
        hotel16.reserveRoom(room20);
        Room room22 = hotel16.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) 'a');
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        Room room37 = hotel26.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel39.reserveRoom(room48);
        hotel26.reserveRoom(room48);
        hotel24.reserveRoom(room48);
        Room room52 = hotel24.findAvailableRoom();
        Hotel hotel54 = new Hotel((-1));
        Hotel hotel56 = new Hotel((int) (byte) -1);
        hotel56.displayRoomStatus();
        Room room58 = hotel56.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        hotel56.reserveRoom(room78);
        hotel54.reserveRoom(room78);
        hotel24.reserveRoom(room78);
        hotel16.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        hotel1.displayRoomStatus();
        Room room87 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room87);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1737");
        Hotel hotel1 = new Hotel((int) (short) 100);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel4.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel13.reserveRoom(room22);
        hotel4.reserveRoom(room22);
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel26.reserveRoom(room53);
        hotel4.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass61 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1738");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1739");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room42 = hotel1.findAvailableRoom();
        Room room43 = hotel1.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) 'a');
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        Room room58 = hotel47.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel47.reserveRoom(room69);
        hotel45.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        hotel1.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        Room room84 = hotel1.findAvailableRoom();
        Room room85 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room85);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1740");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        Room room64 = hotel43.findAvailableRoom();
        Hotel hotel66 = new Hotel((int) (short) 0);
        Room room67 = hotel66.findAvailableRoom();
        Hotel hotel69 = new Hotel(10);
        Room room70 = hotel69.findAvailableRoom();
        hotel66.reserveRoom(room70);
        hotel43.reserveRoom(room70);
        hotel43.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) 'a');
        Room room76 = hotel75.findAvailableRoom();
        hotel43.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room76);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1741");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1742");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (short) 0);
        Room room9 = hotel8.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) 'a');
        hotel11.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel11.reserveRoom(room19);
        Room room22 = hotel11.findAvailableRoom();
        Room room23 = hotel11.findAvailableRoom();
        hotel8.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Room room30 = hotel27.findAvailableRoom();
        hotel1.reserveRoom(room30);
        java.lang.Class<?> wildcardClass32 = room30.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1743");
        Hotel hotel1 = new Hotel((int) (short) -1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) 'a');
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel6.reserveRoom(room15);
        Room room17 = hotel6.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel4.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Hotel hotel34 = new Hotel(0);
        hotel34.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel34.reserveRoom(room38);
        Room room40 = hotel34.findAvailableRoom();
        Hotel hotel42 = new Hotel(0);
        hotel42.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel42.reserveRoom(room46);
        Room room48 = hotel42.findAvailableRoom();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel42.reserveRoom(room85);
        hotel34.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        Room room92 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNull(room92);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1744");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (short) 0);
        Room room9 = hotel8.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel15.reserveRoom(room46);
        hotel11.reserveRoom(room46);
        hotel8.reserveRoom(room46);
        hotel8.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) ' ');
        Hotel hotel55 = new Hotel((int) 'a');
        hotel55.displayRoomStatus();
        Room room57 = hotel55.findAvailableRoom();
        hotel53.reserveRoom(room57);
        hotel8.reserveRoom(room57);
        Hotel hotel61 = new Hotel(10);
        Room room62 = hotel61.findAvailableRoom();
        Room room63 = hotel61.findAvailableRoom();
        hotel8.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        Room room66 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room68 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room66);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1745");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) ' ');
        Hotel hotel28 = new Hotel((int) (short) 0);
        Room room29 = hotel28.findAvailableRoom();
        Hotel hotel31 = new Hotel(10);
        Room room32 = hotel31.findAvailableRoom();
        hotel28.reserveRoom(room32);
        hotel26.reserveRoom(room32);
        Room room35 = hotel26.findAvailableRoom();
        hotel1.reserveRoom(room35);
        hotel1.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) ' ');
        Hotel hotel41 = new Hotel((int) 'a');
        hotel41.displayRoomStatus();
        Room room43 = hotel41.findAvailableRoom();
        hotel39.reserveRoom(room43);
        hotel1.reserveRoom(room43);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room43);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1746");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        hotel23.reserveRoom(room45);
        hotel23.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel23.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        java.lang.Class<?> wildcardClass83 = room80.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1747");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1748");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) ' ');
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel30.reserveRoom(room34);
        hotel1.reserveRoom(room34);
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        hotel38.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel38.reserveRoom(room56);
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        hotel69.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) -1);
        Room room79 = hotel78.findAvailableRoom();
        hotel78.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel78.reserveRoom(room83);
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel78.reserveRoom(room87);
        hotel69.reserveRoom(room87);
        hotel60.reserveRoom(room87);
        hotel38.reserveRoom(room87);
        hotel1.reserveRoom(room87);
        java.lang.Class<?> wildcardClass93 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1749");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) ' ');
        Hotel hotel7 = new Hotel((int) 'a');
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        hotel5.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        Room room13 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room13);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1750");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Hotel hotel33 = new Hotel((int) (short) 0);
        hotel33.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel54.reserveRoom(room63);
        hotel45.reserveRoom(room63);
        hotel36.reserveRoom(room63);
        hotel33.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        Hotel hotel70 = new Hotel((int) ' ');
        Hotel hotel72 = new Hotel((int) (short) 0);
        Room room73 = hotel72.findAvailableRoom();
        Hotel hotel75 = new Hotel(10);
        Room room76 = hotel75.findAvailableRoom();
        hotel72.reserveRoom(room76);
        hotel70.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass81 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1751");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Room room29 = hotel8.findAvailableRoom();
        Room room30 = hotel8.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Room room35 = hotel32.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        hotel37.displayRoomStatus();
        Room room39 = hotel37.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel37.reserveRoom(room59);
        hotel37.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        hotel65.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) -1);
        Room room75 = hotel74.findAvailableRoom();
        hotel74.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) 1);
        Room room79 = hotel78.findAvailableRoom();
        hotel74.reserveRoom(room79);
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel74.reserveRoom(room83);
        hotel65.reserveRoom(room83);
        hotel37.reserveRoom(room83);
        hotel32.reserveRoom(room83);
        hotel8.reserveRoom(room83);
        hotel1.reserveRoom(room83);
        Room room90 = hotel1.findAvailableRoom();
        Room room91 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNull(room90);
        org.junit.Assert.assertNull(room91);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1752");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Room room13 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room17 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass18 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1753");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) 10);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Room room8 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room8);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room8);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1754");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room30 = hotel1.findAvailableRoom();
        Room room31 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass33 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1755");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel(1);
        hotel22.displayRoomStatus();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel26.reserveRoom(room53);
        hotel22.reserveRoom(room53);
        hotel13.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        Hotel hotel61 = new Hotel(1);
        hotel61.displayRoomStatus();
        hotel61.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) ' ');
        Hotel hotel67 = new Hotel((int) 'a');
        hotel67.displayRoomStatus();
        Room room69 = hotel67.findAvailableRoom();
        hotel65.reserveRoom(room69);
        hotel61.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        hotel1.displayRoomStatus();
        Room room74 = hotel1.findAvailableRoom();
        Room room75 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNull(room75);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1756");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1757");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass6 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1758");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel14.reserveRoom(room49);
        hotel11.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        Hotel hotel56 = new Hotel((int) (byte) -1);
        hotel56.displayRoomStatus();
        Room room58 = hotel56.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        hotel56.reserveRoom(room78);
        hotel56.displayRoomStatus();
        hotel56.displayRoomStatus();
        Room room84 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room86 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel89 = new Hotel((int) (short) 100);
        hotel89.displayRoomStatus();
        Room room91 = hotel89.findAvailableRoom();
        hotel56.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room86);
        org.junit.Assert.assertNotNull(room91);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1759");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Room room41 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (short) 1);
        Hotel hotel46 = new Hotel((int) (short) 0);
        Room room47 = hotel46.findAvailableRoom();
        Hotel hotel49 = new Hotel(10);
        Room room50 = hotel49.findAvailableRoom();
        hotel46.reserveRoom(room50);
        hotel44.reserveRoom(room50);
        hotel44.displayRoomStatus();
        hotel44.displayRoomStatus();
        Hotel hotel56 = new Hotel(10);
        Room room57 = hotel56.findAvailableRoom();
        Room room58 = hotel56.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (short) 0);
        Room room61 = hotel60.findAvailableRoom();
        Room room62 = hotel60.findAvailableRoom();
        Room room63 = hotel60.findAvailableRoom();
        Room room64 = hotel60.findAvailableRoom();
        Hotel hotel66 = new Hotel(0);
        hotel66.displayRoomStatus();
        Room room68 = hotel66.findAvailableRoom();
        Room room69 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        hotel66.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) ' ');
        Hotel hotel75 = new Hotel((int) (short) 0);
        Room room76 = hotel75.findAvailableRoom();
        Hotel hotel78 = new Hotel(10);
        Room room79 = hotel78.findAvailableRoom();
        hotel75.reserveRoom(room79);
        hotel73.reserveRoom(room79);
        hotel66.reserveRoom(room79);
        hotel60.reserveRoom(room79);
        hotel56.reserveRoom(room79);
        hotel44.reserveRoom(room79);
        hotel44.displayRoomStatus();
        Room room87 = hotel44.findAvailableRoom();
        hotel34.reserveRoom(room87);
        hotel1.reserveRoom(room87);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(room87);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1760");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel(0);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Room room9 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) ' ');
        Hotel hotel15 = new Hotel((int) (short) 0);
        Room room16 = hotel15.findAvailableRoom();
        Hotel hotel18 = new Hotel(10);
        Room room19 = hotel18.findAvailableRoom();
        hotel15.reserveRoom(room19);
        hotel13.reserveRoom(room19);
        hotel6.reserveRoom(room19);
        hotel6.displayRoomStatus();
        Hotel hotel25 = new Hotel((-1));
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel25.reserveRoom(room49);
        Hotel hotel55 = new Hotel(0);
        hotel55.displayRoomStatus();
        Room room57 = hotel55.findAvailableRoom();
        Room room58 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        hotel55.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) ' ');
        Hotel hotel64 = new Hotel((int) (short) 0);
        Room room65 = hotel64.findAvailableRoom();
        Hotel hotel67 = new Hotel(10);
        Room room68 = hotel67.findAvailableRoom();
        hotel64.reserveRoom(room68);
        hotel62.reserveRoom(room68);
        hotel55.reserveRoom(room68);
        hotel25.reserveRoom(room68);
        hotel6.reserveRoom(room68);
        hotel1.reserveRoom(room68);
        Room room75 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room75);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1761");
        Hotel hotel1 = new Hotel((int) 'a');
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1762");
        Hotel hotel1 = new Hotel((int) (short) 10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel(0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) ' ');
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Hotel hotel14 = new Hotel(10);
        Room room15 = hotel14.findAvailableRoom();
        hotel11.reserveRoom(room15);
        hotel9.reserveRoom(room15);
        Room room18 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room18);
        Hotel hotel21 = new Hotel((int) 'a');
        hotel21.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        hotel21.reserveRoom(room29);
        Room room32 = hotel21.findAvailableRoom();
        Room room33 = hotel21.findAvailableRoom();
        Room room34 = hotel21.findAvailableRoom();
        hotel6.reserveRoom(room34);
        hotel1.reserveRoom(room34);
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room34);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1763");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        hotel11.reserveRoom(room42);
        Hotel hotel46 = new Hotel(10);
        Room room47 = hotel46.findAvailableRoom();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        hotel49.displayRoomStatus();
        Room room51 = hotel49.findAvailableRoom();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        hotel53.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel62.reserveRoom(room71);
        hotel53.reserveRoom(room71);
        hotel49.reserveRoom(room71);
        hotel49.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel49.reserveRoom(room86);
        hotel46.reserveRoom(room86);
        hotel11.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1764");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room31 = hotel1.findAvailableRoom();
        Room room32 = hotel1.findAvailableRoom();
        Room room33 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room33);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1765");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (short) 0);
        Room room15 = hotel14.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) 'a');
        hotel17.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel17.reserveRoom(room25);
        Room room28 = hotel17.findAvailableRoom();
        Room room29 = hotel17.findAvailableRoom();
        hotel14.reserveRoom(room29);
        hotel7.reserveRoom(room29);
        hotel1.reserveRoom(room29);
        Hotel hotel34 = new Hotel((int) 'a');
        hotel34.displayRoomStatus();
        Room room36 = hotel34.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (short) 0);
        Room room39 = hotel38.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) 'a');
        hotel41.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        hotel41.reserveRoom(room49);
        Room room52 = hotel41.findAvailableRoom();
        Room room53 = hotel41.findAvailableRoom();
        hotel38.reserveRoom(room53);
        hotel34.reserveRoom(room53);
        Room room56 = hotel34.findAvailableRoom();
        hotel1.reserveRoom(room56);
        Room room58 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room58);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1766");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Room room20 = hotel17.findAvailableRoom();
        Room room21 = hotel17.findAvailableRoom();
        Hotel hotel23 = new Hotel(0);
        hotel23.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel23.reserveRoom(room27);
        Room room29 = hotel23.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel35.reserveRoom(room66);
        hotel31.reserveRoom(room66);
        hotel23.reserveRoom(room66);
        hotel17.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        Hotel hotel74 = new Hotel((int) (short) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel74.displayRoomStatus();
        Room room77 = hotel74.findAvailableRoom();
        hotel1.reserveRoom(room77);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass80 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1767");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room41 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (short) 0);
        Room room46 = hotel45.findAvailableRoom();
        Hotel hotel48 = new Hotel((int) 'a');
        hotel48.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel48.reserveRoom(room56);
        Room room59 = hotel48.findAvailableRoom();
        Room room60 = hotel48.findAvailableRoom();
        hotel45.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        Room room63 = hotel38.findAvailableRoom();
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room67 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room67);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1768");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        Hotel hotel37 = new Hotel((int) 'a');
        hotel37.displayRoomStatus();
        Room room39 = hotel37.findAvailableRoom();
        hotel15.reserveRoom(room39);
        Room room41 = hotel15.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) 'a');
        hotel43.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel43.reserveRoom(room51);
        Room room54 = hotel43.findAvailableRoom();
        Room room55 = hotel43.findAvailableRoom();
        hotel15.reserveRoom(room55);
        hotel1.reserveRoom(room55);
        Room room58 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass59 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1769");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) 'a');
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel9.reserveRoom(room17);
        hotel9.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel35.reserveRoom(room44);
        hotel26.reserveRoom(room44);
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel26.reserveRoom(room57);
        hotel22.reserveRoom(room57);
        hotel9.reserveRoom(room57);
        hotel6.reserveRoom(room57);
        hotel1.reserveRoom(room57);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room66 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNull(room66);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1770");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass6 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1771");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room45 = hotel1.findAvailableRoom();
        Room room46 = hotel1.findAvailableRoom();
        Room room47 = hotel1.findAvailableRoom();
        Hotel hotel49 = new Hotel((int) '4');
        Hotel hotel51 = new Hotel(0);
        Room room52 = hotel51.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) ' ');
        Hotel hotel56 = new Hotel((int) (short) 0);
        Room room57 = hotel56.findAvailableRoom();
        Hotel hotel59 = new Hotel(10);
        Room room60 = hotel59.findAvailableRoom();
        hotel56.reserveRoom(room60);
        hotel54.reserveRoom(room60);
        Room room63 = hotel54.findAvailableRoom();
        hotel51.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) 'a');
        hotel66.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        hotel66.reserveRoom(room74);
        Room room77 = hotel66.findAvailableRoom();
        Room room78 = hotel66.findAvailableRoom();
        Room room79 = hotel66.findAvailableRoom();
        hotel51.reserveRoom(room79);
        hotel49.reserveRoom(room79);
        hotel1.reserveRoom(room79);
        java.lang.Class<?> wildcardClass83 = room79.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1772");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room24 = hotel1.findAvailableRoom();
        Hotel hotel26 = new Hotel((int) 'a');
        hotel26.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel26.reserveRoom(room34);
        hotel26.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel43.reserveRoom(room74);
        hotel39.reserveRoom(room74);
        hotel26.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        java.lang.Class<?> wildcardClass80 = room74.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1773");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel40 = new Hotel(10);
        Room room41 = hotel40.findAvailableRoom();
        Room room42 = hotel40.findAvailableRoom();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        hotel44.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        hotel53.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel62.reserveRoom(room71);
        hotel53.reserveRoom(room71);
        hotel44.reserveRoom(room71);
        hotel40.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        java.lang.Class<?> wildcardClass77 = hotel1.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1774");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        Room room15 = hotel1.findAvailableRoom();
        Room room16 = hotel1.findAvailableRoom();
        Room room17 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room17);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1775");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass8 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1776");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room31 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass35 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1777");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room37 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room39 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass41 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1778");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room39 = hotel1.findAvailableRoom();
        Room room40 = hotel1.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (short) 0);
        Room room50 = hotel49.findAvailableRoom();
        Room room51 = hotel49.findAvailableRoom();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        hotel53.displayRoomStatus();
        Room room55 = hotel53.findAvailableRoom();
        Hotel hotel57 = new Hotel((int) (byte) 0);
        Hotel hotel59 = new Hotel(0);
        hotel59.displayRoomStatus();
        Room room61 = hotel59.findAvailableRoom();
        Room room62 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        hotel59.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) ' ');
        Hotel hotel68 = new Hotel((int) (short) 0);
        Room room69 = hotel68.findAvailableRoom();
        Hotel hotel71 = new Hotel(10);
        Room room72 = hotel71.findAvailableRoom();
        hotel68.reserveRoom(room72);
        hotel66.reserveRoom(room72);
        hotel59.reserveRoom(room72);
        hotel57.reserveRoom(room72);
        hotel53.reserveRoom(room72);
        hotel49.reserveRoom(room72);
        hotel42.reserveRoom(room72);
        hotel1.reserveRoom(room72);
        java.lang.Class<?> wildcardClass81 = room72.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1779");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        Room room18 = hotel7.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel7.reserveRoom(room29);
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Room room34 = hotel7.findAvailableRoom();
        Room room35 = hotel7.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        hotel37.displayRoomStatus();
        Room room39 = hotel37.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel37.reserveRoom(room59);
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        Room room75 = hotel64.findAvailableRoom();
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel64.reserveRoom(room86);
        hotel37.reserveRoom(room86);
        hotel7.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        hotel1.displayRoomStatus();
        Room room93 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNull(room93);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1780");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        Room room57 = hotel1.findAvailableRoom();
        Room room58 = hotel1.findAvailableRoom();
        Room room59 = hotel1.findAvailableRoom();
        Room room60 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room59);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1781");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) ' ');
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        hotel10.displayRoomStatus();
        Room room12 = hotel10.findAvailableRoom();
        Room room13 = hotel10.findAvailableRoom();
        Hotel hotel15 = new Hotel(1);
        hotel15.displayRoomStatus();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        hotel28.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel28.reserveRoom(room46);
        hotel19.reserveRoom(room46);
        hotel15.reserveRoom(room46);
        hotel15.displayRoomStatus();
        hotel15.displayRoomStatus();
        Room room53 = hotel15.findAvailableRoom();
        hotel10.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Room room60 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        hotel57.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (short) 0);
        Room room65 = hotel64.findAvailableRoom();
        Hotel hotel67 = new Hotel((int) 'a');
        hotel67.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) -1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel70.reserveRoom(room75);
        hotel67.reserveRoom(room75);
        Room room78 = hotel67.findAvailableRoom();
        Room room79 = hotel67.findAvailableRoom();
        hotel64.reserveRoom(room79);
        hotel57.reserveRoom(room79);
        hotel1.reserveRoom(room79);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room79);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1782");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel14.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room56);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1783");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        java.lang.Class<?> wildcardClass27 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1784");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Hotel hotel45 = new Hotel(100);
        hotel45.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (short) 0);
        Room room49 = hotel48.findAvailableRoom();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel55.reserveRoom(room86);
        hotel51.reserveRoom(room86);
        hotel48.reserveRoom(room86);
        hotel45.reserveRoom(room86);
        Room room92 = hotel45.findAvailableRoom();
        hotel1.reserveRoom(room92);
        Room room94 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room96 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room92);
        org.junit.Assert.assertNull(room94);
        org.junit.Assert.assertNull(room96);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1785");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        Room room37 = hotel1.findAvailableRoom();
        Room room38 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass39 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1786");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        Room room29 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room31 = hotel1.findAvailableRoom();
        Room room32 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room32);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1787");
        Hotel hotel1 = new Hotel((int) (short) 1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Room room11 = hotel7.findAvailableRoom();
        Hotel hotel13 = new Hotel(0);
        hotel13.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel13.reserveRoom(room17);
        Room room19 = hotel13.findAvailableRoom();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel25.reserveRoom(room56);
        hotel21.reserveRoom(room56);
        hotel13.reserveRoom(room56);
        hotel7.reserveRoom(room56);
        hotel1.reserveRoom(room56);
        hotel1.displayRoomStatus();
        Hotel hotel65 = new Hotel(1);
        hotel65.displayRoomStatus();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) ' ');
        Hotel hotel71 = new Hotel((int) 'a');
        hotel71.displayRoomStatus();
        Room room73 = hotel71.findAvailableRoom();
        hotel69.reserveRoom(room73);
        hotel65.reserveRoom(room73);
        hotel1.reserveRoom(room73);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room73);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1788");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room30 = hotel1.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) 'a');
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        Room room45 = hotel34.findAvailableRoom();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel34.reserveRoom(room56);
        hotel32.reserveRoom(room56);
        hotel1.reserveRoom(room56);
        Room room61 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1789");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room10 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room12 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room12);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1790");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        Room room29 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room31 = hotel1.findAvailableRoom();
        Room room32 = hotel1.findAvailableRoom();
        Room room33 = hotel1.findAvailableRoom();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        Room room37 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room37);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1791");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (short) 0);
        Room room25 = hotel24.findAvailableRoom();
        Hotel hotel27 = new Hotel(10);
        Room room28 = hotel27.findAvailableRoom();
        hotel24.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Room room36 = hotel33.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        hotel38.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        hotel66.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel75.reserveRoom(room84);
        hotel66.reserveRoom(room84);
        hotel38.reserveRoom(room84);
        hotel33.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass91 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1792");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass36 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1793");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room26 = hotel1.findAvailableRoom();
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) ' ');
        Room room30 = hotel29.findAvailableRoom();
        hotel1.reserveRoom(room30);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass33 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1794");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room24 = hotel1.findAvailableRoom();
        Hotel hotel26 = new Hotel((int) 'a');
        hotel26.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel26.reserveRoom(room34);
        hotel26.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel43.reserveRoom(room74);
        hotel39.reserveRoom(room74);
        hotel26.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        Room room80 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass81 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1795");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(0);
        Room room6 = hotel5.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        Room room17 = hotel8.findAvailableRoom();
        hotel5.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass22 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1796");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((-1));
        Hotel hotel7 = new Hotel(1);
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        hotel10.displayRoomStatus();
        Room room12 = hotel10.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel10.reserveRoom(room32);
        hotel10.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel10.reserveRoom(room47);
        Hotel hotel51 = new Hotel(0);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Room room56 = hotel53.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel10.reserveRoom(room56);
        hotel7.reserveRoom(room56);
        hotel5.reserveRoom(room56);
        hotel1.reserveRoom(room56);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room56);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1797");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Room room42 = hotel39.findAvailableRoom();
        Room room43 = hotel39.findAvailableRoom();
        hotel1.reserveRoom(room43);
        Room room45 = hotel1.findAvailableRoom();
        Room room46 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass47 = hotel1.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1798");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel41.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room94 = hotel1.findAvailableRoom();
        Room room95 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass96 = room95.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNull(room94);
        org.junit.Assert.assertNull(room95);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1799");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) ' ');
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        hotel10.displayRoomStatus();
        Room room12 = hotel10.findAvailableRoom();
        Room room13 = hotel10.findAvailableRoom();
        Hotel hotel15 = new Hotel(1);
        hotel15.displayRoomStatus();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        hotel28.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel28.reserveRoom(room46);
        hotel19.reserveRoom(room46);
        hotel15.reserveRoom(room46);
        hotel15.displayRoomStatus();
        hotel15.displayRoomStatus();
        Room room53 = hotel15.findAvailableRoom();
        hotel10.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Room room60 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        hotel57.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (short) 0);
        Room room65 = hotel64.findAvailableRoom();
        Hotel hotel67 = new Hotel((int) 'a');
        hotel67.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) -1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel70.reserveRoom(room75);
        hotel67.reserveRoom(room75);
        Room room78 = hotel67.findAvailableRoom();
        Room room79 = hotel67.findAvailableRoom();
        hotel64.reserveRoom(room79);
        hotel57.reserveRoom(room79);
        hotel1.reserveRoom(room79);
        Room room83 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNull(room83);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1800");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Room room30 = hotel1.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel32.reserveRoom(room59);
        hotel32.displayRoomStatus();
        hotel32.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) ' ');
        Hotel hotel68 = new Hotel((int) 'a');
        hotel68.displayRoomStatus();
        Room room70 = hotel68.findAvailableRoom();
        hotel66.reserveRoom(room70);
        hotel32.reserveRoom(room70);
        hotel32.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (short) 10);
        Room room76 = hotel75.findAvailableRoom();
        Room room77 = hotel75.findAvailableRoom();
        hotel32.reserveRoom(room77);
        hotel1.reserveRoom(room77);
        java.lang.Class<?> wildcardClass80 = room77.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1801");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room11 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room11);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1802");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel(0);
        hotel6.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel1.reserveRoom(room10);
        Hotel hotel14 = new Hotel((int) (short) 0);
        Room room15 = hotel14.findAvailableRoom();
        Hotel hotel17 = new Hotel(10);
        Room room18 = hotel17.findAvailableRoom();
        hotel14.reserveRoom(room18);
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Room room24 = hotel21.findAvailableRoom();
        hotel14.reserveRoom(room24);
        hotel1.reserveRoom(room24);
        Hotel hotel28 = new Hotel((int) (short) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Room room31 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) 'a');
        hotel34.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel34.reserveRoom(room42);
        hotel34.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel51.reserveRoom(room82);
        hotel47.reserveRoom(room82);
        hotel34.reserveRoom(room82);
        Hotel hotel88 = new Hotel((int) (short) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel34.reserveRoom(room89);
        hotel28.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass94 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1803");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room65 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass66 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1804");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) 1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Room room9 = hotel6.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        hotel11.reserveRoom(room33);
        hotel11.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel39.reserveRoom(room57);
        hotel11.reserveRoom(room57);
        hotel6.reserveRoom(room57);
        Room room62 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Room room64 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Room room70 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        hotel67.displayRoomStatus();
        hotel67.displayRoomStatus();
        Room room74 = hotel67.findAvailableRoom();
        hotel6.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        hotel1.displayRoomStatus();
        Room room78 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room80 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room80);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1805");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Room room41 = hotel1.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) ' ');
        Hotel hotel45 = new Hotel((int) 'a');
        hotel45.displayRoomStatus();
        Room room47 = hotel45.findAvailableRoom();
        hotel43.reserveRoom(room47);
        Room room49 = hotel43.findAvailableRoom();
        Room room50 = hotel43.findAvailableRoom();
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass52 = room50.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1806");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room15 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room17 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room20 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1807");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass32 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1808");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        Room room8 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room8);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1809");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel(0);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        Room room7 = hotel3.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Room room12 = hotel9.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel9.reserveRoom(room19);
        hotel3.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        java.lang.Class<?> wildcardClass24 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1810");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel(0);
        Room room14 = hotel13.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) ' ');
        Hotel hotel18 = new Hotel((int) (short) 0);
        Room room19 = hotel18.findAvailableRoom();
        Hotel hotel21 = new Hotel(10);
        Room room22 = hotel21.findAvailableRoom();
        hotel18.reserveRoom(room22);
        hotel16.reserveRoom(room22);
        Room room25 = hotel16.findAvailableRoom();
        hotel13.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) 'a');
        hotel28.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel28.reserveRoom(room36);
        Room room39 = hotel28.findAvailableRoom();
        Room room40 = hotel28.findAvailableRoom();
        Room room41 = hotel28.findAvailableRoom();
        hotel13.reserveRoom(room41);
        Room room43 = hotel13.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        hotel45.reserveRoom(room72);
        hotel13.reserveRoom(room72);
        hotel1.reserveRoom(room72);
        Room room78 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room78);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1811");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(1);
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel(10);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        hotel30.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel39.reserveRoom(room48);
        hotel30.reserveRoom(room48);
        hotel21.reserveRoom(room48);
        hotel13.reserveRoom(room48);
        hotel10.reserveRoom(room48);
        hotel7.reserveRoom(room48);
        hotel1.reserveRoom(room48);
        java.lang.Class<?> wildcardClass56 = room48.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1812");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        hotel13.displayRoomStatus();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel13.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel13.reserveRoom(room59);
        hotel8.reserveRoom(room59);
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        Room room66 = hotel1.findAvailableRoom();
        Room room67 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room69 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass70 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1813");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        hotel28.displayRoomStatus();
        Room room30 = hotel28.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel28.reserveRoom(room50);
        hotel28.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        hotel56.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel56.reserveRoom(room74);
        hotel28.reserveRoom(room74);
        hotel6.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        Hotel hotel81 = new Hotel((int) (short) 0);
        Room room82 = hotel81.findAvailableRoom();
        Hotel hotel84 = new Hotel(10);
        Room room85 = hotel84.findAvailableRoom();
        hotel81.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        Room room88 = hotel1.findAvailableRoom();
        Hotel hotel90 = new Hotel((int) (byte) 1);
        hotel90.displayRoomStatus();
        Room room92 = hotel90.findAvailableRoom();
        Room room93 = hotel90.findAvailableRoom();
        Room room94 = hotel90.findAvailableRoom();
        Room room95 = hotel90.findAvailableRoom();
        hotel1.reserveRoom(room95);
        Room room97 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room92);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNotNull(room94);
        org.junit.Assert.assertNotNull(room95);
        org.junit.Assert.assertNotNull(room97);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1814");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        Room room10 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room14 = hotel1.findAvailableRoom();
        Room room15 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room15);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1815");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (short) 0);
        Room room25 = hotel24.findAvailableRoom();
        Hotel hotel27 = new Hotel(10);
        Room room28 = hotel27.findAvailableRoom();
        hotel24.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Room room31 = hotel1.findAvailableRoom();
        Room room32 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1816");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (short) 0);
        Room room9 = hotel8.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) 'a');
        hotel11.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel11.reserveRoom(room19);
        Room room22 = hotel11.findAvailableRoom();
        Room room23 = hotel11.findAvailableRoom();
        hotel8.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Room room30 = hotel27.findAvailableRoom();
        hotel1.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        hotel33.displayRoomStatus();
        Room room35 = hotel33.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel33.reserveRoom(room55);
        hotel33.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) -1);
        Room room62 = hotel61.findAvailableRoom();
        hotel61.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel61.reserveRoom(room66);
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel61.reserveRoom(room70);
        hotel33.reserveRoom(room70);
        hotel1.reserveRoom(room70);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass75 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1817");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        Room room50 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room52 = hotel1.findAvailableRoom();
        Room room53 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass54 = room53.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room53);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1818");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel4.reserveRoom(room13);
        Room room15 = hotel4.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel1.reserveRoom(room26);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Room room34 = hotel31.findAvailableRoom();
        Hotel hotel36 = new Hotel(1);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel40.reserveRoom(room67);
        hotel36.reserveRoom(room67);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Room room74 = hotel36.findAvailableRoom();
        hotel31.reserveRoom(room74);
        Room room76 = hotel31.findAvailableRoom();
        Room room77 = hotel31.findAvailableRoom();
        hotel1.reserveRoom(room77);
        Room room79 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass80 = room79.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room79);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1819");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        Room room12 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room14 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass15 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1820");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        hotel6.reserveRoom(room33);
        Hotel hotel38 = new Hotel((int) (short) 0);
        hotel38.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        hotel50.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel59.reserveRoom(room68);
        hotel50.reserveRoom(room68);
        hotel41.reserveRoom(room68);
        hotel38.reserveRoom(room68);
        hotel6.reserveRoom(room68);
        Hotel hotel75 = new Hotel((int) ' ');
        Hotel hotel77 = new Hotel((int) (short) 0);
        Room room78 = hotel77.findAvailableRoom();
        Hotel hotel80 = new Hotel(10);
        Room room81 = hotel80.findAvailableRoom();
        hotel77.reserveRoom(room81);
        hotel75.reserveRoom(room81);
        hotel6.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        java.lang.Class<?> wildcardClass86 = room81.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1821");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room42 = hotel1.findAvailableRoom();
        Hotel hotel44 = new Hotel((int) ' ');
        Hotel hotel46 = new Hotel((int) (short) 0);
        Room room47 = hotel46.findAvailableRoom();
        Hotel hotel49 = new Hotel(10);
        Room room50 = hotel49.findAvailableRoom();
        hotel46.reserveRoom(room50);
        hotel44.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass54 = room50.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1822");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        hotel8.displayRoomStatus();
        Room room10 = hotel8.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel21.reserveRoom(room30);
        hotel12.reserveRoom(room30);
        hotel8.reserveRoom(room30);
        hotel8.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel8.reserveRoom(room54);
        hotel3.reserveRoom(room54);
        Room room59 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room61 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room61);
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        hotel73.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel73.reserveRoom(room91);
        hotel64.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        Room room96 = hotel1.findAvailableRoom();
        Room room97 = hotel1.findAvailableRoom();
        Room room98 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNull(room96);
        org.junit.Assert.assertNull(room97);
        org.junit.Assert.assertNull(room98);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1823");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room58 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass59 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1824");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room14 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass15 = room14.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1825");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room18 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room22 = hotel1.findAvailableRoom();
        Room room23 = hotel1.findAvailableRoom();
        Hotel hotel25 = new Hotel((int) (short) 1);
        hotel25.displayRoomStatus();
        hotel25.displayRoomStatus();
        hotel25.displayRoomStatus();
        Room room29 = hotel25.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Room room34 = hotel31.findAvailableRoom();
        Room room35 = hotel31.findAvailableRoom();
        Hotel hotel37 = new Hotel(0);
        hotel37.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel37.reserveRoom(room41);
        Room room43 = hotel37.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel71.reserveRoom(room80);
        hotel49.reserveRoom(room80);
        hotel45.reserveRoom(room80);
        hotel37.reserveRoom(room80);
        hotel31.reserveRoom(room80);
        hotel25.reserveRoom(room80);
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Room room91 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Room room93 = hotel88.findAvailableRoom();
        hotel25.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        java.lang.Class<?> wildcardClass96 = room93.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1826");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel(1);
        hotel22.displayRoomStatus();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel26.reserveRoom(room53);
        hotel22.reserveRoom(room53);
        hotel13.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        Hotel hotel61 = new Hotel(1);
        hotel61.displayRoomStatus();
        hotel61.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) ' ');
        Hotel hotel67 = new Hotel((int) 'a');
        hotel67.displayRoomStatus();
        Room room69 = hotel67.findAvailableRoom();
        hotel65.reserveRoom(room69);
        hotel61.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        hotel1.displayRoomStatus();
        Room room74 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass75 = room74.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1827");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1828");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        hotel15.displayRoomStatus();
        Room room17 = hotel15.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel15.reserveRoom(room37);
        hotel15.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        hotel15.reserveRoom(room61);
        hotel10.reserveRoom(room61);
        Room room66 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Room room74 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Room room76 = hotel71.findAvailableRoom();
        Room room77 = hotel71.findAvailableRoom();
        hotel10.reserveRoom(room77);
        Room room79 = hotel10.findAvailableRoom();
        hotel1.reserveRoom(room79);
        hotel1.displayRoomStatus();
        Room room82 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass83 = room82.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNull(room82);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1829");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel14.reserveRoom(room49);
        hotel11.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        Hotel hotel56 = new Hotel((int) (byte) -1);
        hotel56.displayRoomStatus();
        Room room58 = hotel56.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        hotel56.reserveRoom(room78);
        hotel56.displayRoomStatus();
        hotel56.displayRoomStatus();
        Room room84 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room86 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel89 = new Hotel((int) (short) 100);
        hotel89.displayRoomStatus();
        Room room91 = hotel89.findAvailableRoom();
        hotel56.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        java.lang.Class<?> wildcardClass94 = room91.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room86);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1830");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room18 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel22 = new Hotel(1);
        hotel22.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        hotel25.displayRoomStatus();
        Room room27 = hotel25.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel25.reserveRoom(room47);
        hotel25.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel53.reserveRoom(room62);
        hotel25.reserveRoom(room62);
        Hotel hotel66 = new Hotel(0);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Room room71 = hotel68.findAvailableRoom();
        hotel66.reserveRoom(room71);
        hotel25.reserveRoom(room71);
        hotel22.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        Hotel hotel77 = new Hotel((int) 'a');
        Room room78 = hotel77.findAvailableRoom();
        hotel1.reserveRoom(room78);
        Room room80 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room80);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1831");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel9.reserveRoom(room18);
        Room room20 = hotel9.findAvailableRoom();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        hotel9.displayRoomStatus();
        Room room36 = hotel9.findAvailableRoom();
        Room room37 = hotel9.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        hotel39.displayRoomStatus();
        Room room41 = hotel39.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        hotel39.reserveRoom(room61);
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        Room room77 = hotel66.findAvailableRoom();
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        Hotel hotel87 = new Hotel((int) (byte) 1);
        Room room88 = hotel87.findAvailableRoom();
        hotel79.reserveRoom(room88);
        hotel66.reserveRoom(room88);
        hotel39.reserveRoom(room88);
        hotel9.reserveRoom(room88);
        hotel1.reserveRoom(room88);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room88);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1832");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel41.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        Room room91 = hotel1.findAvailableRoom();
        Room room92 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNull(room91);
        org.junit.Assert.assertNull(room92);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1833");
        Hotel hotel1 = new Hotel((int) '4');
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        java.lang.Class<?> wildcardClass43 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1834");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Room room34 = hotel31.findAvailableRoom();
        Hotel hotel36 = new Hotel(1);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel40.reserveRoom(room67);
        hotel36.reserveRoom(room67);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Room room74 = hotel36.findAvailableRoom();
        hotel31.reserveRoom(room74);
        Room room76 = hotel31.findAvailableRoom();
        hotel1.reserveRoom(room76);
        Room room78 = hotel1.findAvailableRoom();
        Room room79 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass80 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1835");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Hotel hotel46 = new Hotel(10);
        hotel46.displayRoomStatus();
        Room room48 = hotel46.findAvailableRoom();
        hotel1.reserveRoom(room48);
        java.lang.Class<?> wildcardClass50 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1836");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1837");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (short) 1);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Room room10 = hotel6.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        hotel12.reserveRoom(room39);
        hotel12.displayRoomStatus();
        hotel12.displayRoomStatus();
        hotel12.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (short) 0);
        Room room48 = hotel47.findAvailableRoom();
        Hotel hotel50 = new Hotel(10);
        Room room51 = hotel50.findAvailableRoom();
        hotel47.reserveRoom(room51);
        hotel12.reserveRoom(room51);
        hotel6.reserveRoom(room51);
        hotel1.reserveRoom(room51);
        Room room56 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass57 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1838");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (short) 10);
        Hotel hotel6 = new Hotel(0);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Room room9 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) ' ');
        Hotel hotel15 = new Hotel((int) (short) 0);
        Room room16 = hotel15.findAvailableRoom();
        Hotel hotel18 = new Hotel(10);
        Room room19 = hotel18.findAvailableRoom();
        hotel15.reserveRoom(room19);
        hotel13.reserveRoom(room19);
        hotel6.reserveRoom(room19);
        hotel6.displayRoomStatus();
        Hotel hotel25 = new Hotel((-1));
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel25.reserveRoom(room49);
        Hotel hotel55 = new Hotel(0);
        hotel55.displayRoomStatus();
        Room room57 = hotel55.findAvailableRoom();
        Room room58 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        hotel55.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) ' ');
        Hotel hotel64 = new Hotel((int) (short) 0);
        Room room65 = hotel64.findAvailableRoom();
        Hotel hotel67 = new Hotel(10);
        Room room68 = hotel67.findAvailableRoom();
        hotel64.reserveRoom(room68);
        hotel62.reserveRoom(room68);
        hotel55.reserveRoom(room68);
        hotel25.reserveRoom(room68);
        hotel6.reserveRoom(room68);
        hotel4.reserveRoom(room68);
        hotel1.reserveRoom(room68);
        Room room76 = hotel1.findAvailableRoom();
        Room room77 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room76);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1839");
        Hotel hotel1 = new Hotel(100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (short) 0);
        Room room5 = hotel4.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        hotel11.reserveRoom(room42);
        hotel7.reserveRoom(room42);
        hotel4.reserveRoom(room42);
        hotel1.reserveRoom(room42);
        Room room48 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass49 = room48.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1840");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        Room room10 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room10);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1841");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        hotel28.displayRoomStatus();
        Room room30 = hotel28.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel28.reserveRoom(room50);
        hotel28.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        hotel56.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel56.reserveRoom(room74);
        hotel28.reserveRoom(room74);
        hotel6.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        Hotel hotel81 = new Hotel((int) (short) 0);
        Room room82 = hotel81.findAvailableRoom();
        Hotel hotel84 = new Hotel(10);
        Room room85 = hotel84.findAvailableRoom();
        hotel81.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        Room room88 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room88);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1842");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) 'a');
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel4.reserveRoom(room12);
        Room room15 = hotel4.findAvailableRoom();
        Room room16 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room16);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel21 = new Hotel(1);
        hotel21.displayRoomStatus();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel25.reserveRoom(room52);
        hotel21.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1843");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        Room room7 = hotel3.findAvailableRoom();
        Room room8 = hotel3.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel10.reserveRoom(room34);
        hotel10.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (short) 10);
        Room room39 = hotel38.findAvailableRoom();
        hotel10.reserveRoom(room39);
        hotel3.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        Room room43 = hotel1.findAvailableRoom();
        Room room44 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room44);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1844");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room26 = hotel1.findAvailableRoom();
        Room room27 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass28 = room27.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room27);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1845");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        Hotel hotel45 = new Hotel(0);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Hotel hotel50 = new Hotel(0);
        hotel50.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel50.reserveRoom(room54);
        hotel45.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        Room room58 = hotel1.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (short) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Room room63 = hotel60.findAvailableRoom();
        hotel1.reserveRoom(room63);
        java.lang.Class<?> wildcardClass65 = room63.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1846");
        Hotel hotel1 = new Hotel((int) (short) 10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(0);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        Hotel hotel10 = new Hotel(0);
        hotel10.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel5.reserveRoom(room14);
        Hotel hotel18 = new Hotel((int) (short) 0);
        Room room19 = hotel18.findAvailableRoom();
        Hotel hotel21 = new Hotel(10);
        Room room22 = hotel21.findAvailableRoom();
        hotel18.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Room room28 = hotel25.findAvailableRoom();
        hotel18.reserveRoom(room28);
        hotel5.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        Room room33 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass34 = room33.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1847");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (short) 0);
        Room room32 = hotel31.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) 'a');
        hotel34.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel34.reserveRoom(room42);
        Room room45 = hotel34.findAvailableRoom();
        Room room46 = hotel34.findAvailableRoom();
        hotel31.reserveRoom(room46);
        hotel1.reserveRoom(room46);
        Room room49 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room49);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1848");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        Room room13 = hotel6.findAvailableRoom();
        Room room14 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel(1);
        hotel27.displayRoomStatus();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel31.reserveRoom(room58);
        hotel27.reserveRoom(room58);
        hotel18.reserveRoom(room58);
        hotel6.reserveRoom(room58);
        Hotel hotel66 = new Hotel(1);
        hotel66.displayRoomStatus();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) ' ');
        Hotel hotel72 = new Hotel((int) 'a');
        hotel72.displayRoomStatus();
        Room room74 = hotel72.findAvailableRoom();
        hotel70.reserveRoom(room74);
        hotel66.reserveRoom(room74);
        hotel6.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        java.lang.Class<?> wildcardClass79 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1849");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((-1));
        hotel5.displayRoomStatus();
        Hotel hotel8 = new Hotel(0);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        hotel8.displayRoomStatus();
        Hotel hotel13 = new Hotel(0);
        hotel13.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel13.reserveRoom(room17);
        hotel8.reserveRoom(room17);
        hotel5.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Room room22 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1850");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        Room room66 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room68 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass70 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1851");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room41 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (short) 0);
        Room room46 = hotel45.findAvailableRoom();
        Hotel hotel48 = new Hotel((int) 'a');
        hotel48.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel48.reserveRoom(room56);
        Room room59 = hotel48.findAvailableRoom();
        Room room60 = hotel48.findAvailableRoom();
        hotel45.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        Room room63 = hotel38.findAvailableRoom();
        hotel1.reserveRoom(room63);
        Hotel hotel66 = new Hotel(0);
        hotel66.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel66.reserveRoom(room70);
        hotel1.reserveRoom(room70);
        Room room73 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNull(room73);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1852");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel(1);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Room room14 = hotel6.findAvailableRoom();
        hotel1.reserveRoom(room14);
        java.lang.Class<?> wildcardClass16 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1853");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(0);
        Room room6 = hotel5.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        Room room17 = hotel8.findAvailableRoom();
        hotel5.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Room room20 = hotel1.findAvailableRoom();
        Hotel hotel22 = new Hotel(100);
        hotel22.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (short) 0);
        Room room26 = hotel25.findAvailableRoom();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel54.reserveRoom(room63);
        hotel32.reserveRoom(room63);
        hotel28.reserveRoom(room63);
        hotel25.reserveRoom(room63);
        hotel22.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1854");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel27.reserveRoom(room54);
        hotel5.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        Hotel hotel61 = new Hotel((int) ' ');
        Hotel hotel63 = new Hotel((int) 'a');
        hotel63.displayRoomStatus();
        Room room65 = hotel63.findAvailableRoom();
        hotel61.reserveRoom(room65);
        hotel1.reserveRoom(room65);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room71 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room71);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1855");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel(0);
        hotel8.displayRoomStatus();
        Room room10 = hotel8.findAvailableRoom();
        Room room11 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        hotel8.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) ' ');
        Hotel hotel17 = new Hotel((int) (short) 0);
        Room room18 = hotel17.findAvailableRoom();
        Hotel hotel20 = new Hotel(10);
        Room room21 = hotel20.findAvailableRoom();
        hotel17.reserveRoom(room21);
        hotel15.reserveRoom(room21);
        hotel8.reserveRoom(room21);
        Room room25 = hotel8.findAvailableRoom();
        Room room26 = hotel8.findAvailableRoom();
        Room room27 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        Room room33 = hotel30.findAvailableRoom();
        Room room34 = hotel30.findAvailableRoom();
        Room room35 = hotel30.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        Hotel hotel59 = new Hotel((int) 'a');
        hotel59.displayRoomStatus();
        Room room61 = hotel59.findAvailableRoom();
        hotel37.reserveRoom(room61);
        hotel37.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (short) 10);
        Room room66 = hotel65.findAvailableRoom();
        hotel37.reserveRoom(room66);
        hotel30.reserveRoom(room66);
        hotel30.displayRoomStatus();
        hotel30.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) 'a');
        hotel72.displayRoomStatus();
        Room room74 = hotel72.findAvailableRoom();
        hotel30.reserveRoom(room74);
        hotel8.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        java.lang.Class<?> wildcardClass78 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1856");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) 'a');
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel7.reserveRoom(room15);
        hotel7.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        hotel24.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        hotel24.reserveRoom(room42);
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel24.reserveRoom(room55);
        hotel20.reserveRoom(room55);
        hotel7.reserveRoom(room55);
        Hotel hotel61 = new Hotel((int) (short) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel7.reserveRoom(room62);
        hotel1.reserveRoom(room62);
        java.lang.Class<?> wildcardClass65 = room62.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1857");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Room room44 = hotel1.findAvailableRoom();
        Room room45 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass47 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1858");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Room room23 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room25 = hotel1.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (short) 1);
        Hotel hotel29 = new Hotel((int) (short) 0);
        Room room30 = hotel29.findAvailableRoom();
        Hotel hotel32 = new Hotel(10);
        Room room33 = hotel32.findAvailableRoom();
        hotel29.reserveRoom(room33);
        hotel27.reserveRoom(room33);
        hotel27.displayRoomStatus();
        hotel27.displayRoomStatus();
        Hotel hotel39 = new Hotel(10);
        Room room40 = hotel39.findAvailableRoom();
        Room room41 = hotel39.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (short) 0);
        Room room44 = hotel43.findAvailableRoom();
        Room room45 = hotel43.findAvailableRoom();
        Room room46 = hotel43.findAvailableRoom();
        Room room47 = hotel43.findAvailableRoom();
        Hotel hotel49 = new Hotel(0);
        hotel49.displayRoomStatus();
        Room room51 = hotel49.findAvailableRoom();
        Room room52 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        hotel49.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) ' ');
        Hotel hotel58 = new Hotel((int) (short) 0);
        Room room59 = hotel58.findAvailableRoom();
        Hotel hotel61 = new Hotel(10);
        Room room62 = hotel61.findAvailableRoom();
        hotel58.reserveRoom(room62);
        hotel56.reserveRoom(room62);
        hotel49.reserveRoom(room62);
        hotel43.reserveRoom(room62);
        hotel39.reserveRoom(room62);
        hotel27.reserveRoom(room62);
        hotel1.reserveRoom(room62);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room62);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1859");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel9.reserveRoom(room55);
        hotel1.reserveRoom(room55);
        Room room60 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1860");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        Room room17 = hotel8.findAvailableRoom();
        Room room18 = hotel8.findAvailableRoom();
        Hotel hotel20 = new Hotel(1);
        hotel20.displayRoomStatus();
        Hotel hotel23 = new Hotel(10);
        Room room24 = hotel23.findAvailableRoom();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        hotel34.reserveRoom(room61);
        hotel26.reserveRoom(room61);
        hotel23.reserveRoom(room61);
        hotel20.reserveRoom(room61);
        hotel8.reserveRoom(room61);
        hotel1.reserveRoom(room61);
        java.lang.Class<?> wildcardClass70 = room61.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1861");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        Room room62 = hotel1.findAvailableRoom();
        Room room63 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNull(room63);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1862");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1863");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (short) 10);
        Hotel hotel6 = new Hotel((int) (short) 10);
        Room room7 = hotel6.findAvailableRoom();
        hotel4.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        org.junit.Assert.assertNotNull(room7);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1864");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room65 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        hotel62.displayRoomStatus();
        hotel62.displayRoomStatus();
        Room room69 = hotel62.findAvailableRoom();
        hotel1.reserveRoom(room69);
        java.lang.Class<?> wildcardClass71 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1865");
        Hotel hotel1 = new Hotel(100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (short) 0);
        Room room5 = hotel4.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        hotel11.reserveRoom(room42);
        hotel7.reserveRoom(room42);
        hotel4.reserveRoom(room42);
        hotel1.reserveRoom(room42);
        Hotel hotel49 = new Hotel((int) (short) 1);
        Hotel hotel51 = new Hotel((int) (short) 0);
        Room room52 = hotel51.findAvailableRoom();
        Hotel hotel54 = new Hotel(10);
        Room room55 = hotel54.findAvailableRoom();
        hotel51.reserveRoom(room55);
        hotel49.reserveRoom(room55);
        hotel49.displayRoomStatus();
        hotel49.displayRoomStatus();
        Hotel hotel61 = new Hotel(10);
        Room room62 = hotel61.findAvailableRoom();
        Room room63 = hotel61.findAvailableRoom();
        Hotel hotel65 = new Hotel((int) (short) 0);
        Room room66 = hotel65.findAvailableRoom();
        Room room67 = hotel65.findAvailableRoom();
        Room room68 = hotel65.findAvailableRoom();
        Room room69 = hotel65.findAvailableRoom();
        Hotel hotel71 = new Hotel(0);
        hotel71.displayRoomStatus();
        Room room73 = hotel71.findAvailableRoom();
        Room room74 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        hotel71.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) ' ');
        Hotel hotel80 = new Hotel((int) (short) 0);
        Room room81 = hotel80.findAvailableRoom();
        Hotel hotel83 = new Hotel(10);
        Room room84 = hotel83.findAvailableRoom();
        hotel80.reserveRoom(room84);
        hotel78.reserveRoom(room84);
        hotel71.reserveRoom(room84);
        hotel65.reserveRoom(room84);
        hotel61.reserveRoom(room84);
        hotel49.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room84);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1866");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel35.reserveRoom(room44);
        hotel13.reserveRoom(room44);
        hotel9.reserveRoom(room44);
        hotel9.displayRoomStatus();
        hotel9.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        Room room72 = hotel51.findAvailableRoom();
        Hotel hotel74 = new Hotel((int) (short) 0);
        Room room75 = hotel74.findAvailableRoom();
        Hotel hotel77 = new Hotel(10);
        Room room78 = hotel77.findAvailableRoom();
        hotel74.reserveRoom(room78);
        hotel51.reserveRoom(room78);
        hotel51.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) 'a');
        Room room84 = hotel83.findAvailableRoom();
        hotel51.reserveRoom(room84);
        hotel9.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room84);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1867");
        Hotel hotel1 = new Hotel((-1));
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(0);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        hotel4.displayRoomStatus();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel4.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        hotel18.displayRoomStatus();
        hotel18.displayRoomStatus();
        Room room23 = hotel18.findAvailableRoom();
        Hotel hotel25 = new Hotel(10);
        Room room26 = hotel25.findAvailableRoom();
        hotel18.reserveRoom(room26);
        hotel18.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel36.reserveRoom(room67);
        hotel32.reserveRoom(room67);
        hotel30.reserveRoom(room67);
        hotel30.displayRoomStatus();
        hotel30.displayRoomStatus();
        Room room74 = hotel30.findAvailableRoom();
        Room room75 = hotel30.findAvailableRoom();
        hotel18.reserveRoom(room75);
        hotel1.reserveRoom(room75);
        java.lang.Class<?> wildcardClass78 = room75.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1868");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room20 = hotel1.findAvailableRoom();
        Hotel hotel22 = new Hotel((int) (byte) 100);
        hotel22.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel25.reserveRoom(room60);
        hotel22.reserveRoom(room60);
        hotel1.reserveRoom(room60);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1869");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Room room16 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        hotel13.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (short) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel13.reserveRoom(room21);
        hotel13.displayRoomStatus();
        Room room24 = hotel13.findAvailableRoom();
        hotel1.reserveRoom(room24);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room24);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1870");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Room room43 = hotel38.findAvailableRoom();
        Hotel hotel45 = new Hotel(10);
        Room room46 = hotel45.findAvailableRoom();
        hotel38.reserveRoom(room46);
        hotel1.reserveRoom(room46);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room46);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1871");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(0);
        Room room6 = hotel5.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        Room room17 = hotel8.findAvailableRoom();
        hotel5.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Room room20 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass21 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1872");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room18 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel22 = new Hotel(1);
        hotel22.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        hotel25.displayRoomStatus();
        Room room27 = hotel25.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel25.reserveRoom(room47);
        hotel25.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel53.reserveRoom(room62);
        hotel25.reserveRoom(room62);
        Hotel hotel66 = new Hotel(0);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Room room71 = hotel68.findAvailableRoom();
        hotel66.reserveRoom(room71);
        hotel25.reserveRoom(room71);
        hotel22.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        Hotel hotel77 = new Hotel((int) 'a');
        Room room78 = hotel77.findAvailableRoom();
        hotel1.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) 'a');
        hotel81.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) -1);
        Room room85 = hotel84.findAvailableRoom();
        hotel84.displayRoomStatus();
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel84.reserveRoom(room89);
        hotel81.reserveRoom(room89);
        hotel81.displayRoomStatus();
        hotel81.displayRoomStatus();
        Room room94 = hotel81.findAvailableRoom();
        hotel1.reserveRoom(room94);
        Room room96 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room85);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(room94);
        org.junit.Assert.assertNull(room96);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1873");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room45 = hotel1.findAvailableRoom();
        Room room46 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room48 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass50 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1874");
        Hotel hotel1 = new Hotel((int) (short) -1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) 'a');
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel6.reserveRoom(room15);
        Room room17 = hotel6.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel4.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1875");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel6.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room17 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass18 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1876");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room31 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (short) 100);
        hotel34.displayRoomStatus();
        Room room36 = hotel34.findAvailableRoom();
        hotel1.reserveRoom(room36);
        java.lang.Class<?> wildcardClass38 = room36.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1877");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room46 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room46);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1878");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        hotel28.displayRoomStatus();
        Room room30 = hotel28.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel28.reserveRoom(room50);
        hotel28.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        hotel56.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel56.reserveRoom(room74);
        hotel28.reserveRoom(room74);
        hotel6.reserveRoom(room74);
        Hotel hotel80 = new Hotel((int) (byte) -1);
        Room room81 = hotel80.findAvailableRoom();
        hotel80.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel80.reserveRoom(room85);
        hotel6.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass92 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1879");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        hotel29.displayRoomStatus();
        Room room31 = hotel29.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel42.reserveRoom(room51);
        hotel33.reserveRoom(room51);
        hotel29.reserveRoom(room51);
        Room room55 = hotel29.findAvailableRoom();
        Room room56 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        hotel29.displayRoomStatus();
        Room room59 = hotel29.findAvailableRoom();
        Hotel hotel61 = new Hotel((int) ' ');
        Hotel hotel63 = new Hotel((int) 'a');
        hotel63.displayRoomStatus();
        Room room65 = hotel63.findAvailableRoom();
        hotel61.reserveRoom(room65);
        hotel29.reserveRoom(room65);
        hotel1.reserveRoom(room65);
        hotel1.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1880");
        Hotel hotel1 = new Hotel((int) (byte) 100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel9.reserveRoom(room55);
        hotel4.reserveRoom(room55);
        Room room60 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room62 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room64 = hotel4.findAvailableRoom();
        Hotel hotel66 = new Hotel(0);
        hotel66.displayRoomStatus();
        Room room68 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        hotel66.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel66.reserveRoom(room81);
        hotel4.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        Room room86 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room88 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass89 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1881");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        hotel13.displayRoomStatus();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel13.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel13.reserveRoom(room59);
        hotel8.reserveRoom(room59);
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (short) 0);
        Room room68 = hotel67.findAvailableRoom();
        Hotel hotel70 = new Hotel(10);
        Room room71 = hotel70.findAvailableRoom();
        hotel67.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        Room room74 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass75 = room74.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room74);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1882");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        Room room39 = hotel28.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel28.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) 'a');
        hotel56.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        hotel56.reserveRoom(room64);
        hotel56.displayRoomStatus();
        hotel56.displayRoomStatus();
        Room room69 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room69);
        java.lang.Class<?> wildcardClass71 = room69.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1883");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) 'a');
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        hotel8.reserveRoom(room32);
        hotel8.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (short) 10);
        Room room37 = hotel36.findAvailableRoom();
        hotel8.reserveRoom(room37);
        hotel1.reserveRoom(room37);
        hotel1.displayRoomStatus();
        Room room41 = hotel1.findAvailableRoom();
        Hotel hotel43 = new Hotel(10);
        Room room44 = hotel43.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        hotel46.displayRoomStatus();
        Room room48 = hotel46.findAvailableRoom();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        hotel50.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel59.reserveRoom(room68);
        hotel50.reserveRoom(room68);
        hotel46.reserveRoom(room68);
        hotel46.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) -1);
        Room room75 = hotel74.findAvailableRoom();
        hotel74.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) 1);
        Room room79 = hotel78.findAvailableRoom();
        hotel74.reserveRoom(room79);
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel74.reserveRoom(room83);
        hotel46.reserveRoom(room83);
        hotel43.reserveRoom(room83);
        Room room87 = hotel43.findAvailableRoom();
        hotel1.reserveRoom(room87);
        java.lang.Class<?> wildcardClass89 = room87.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1884");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        Room room15 = hotel9.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel21.reserveRoom(room52);
        hotel17.reserveRoom(room52);
        hotel9.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        Room room60 = hotel1.findAvailableRoom();
        Room room61 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass62 = room61.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNull(room61);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1885");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room41 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room43 = hotel38.findAvailableRoom();
        hotel1.reserveRoom(room43);
        Room room45 = hotel1.findAvailableRoom();
        Room room46 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room46);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1886");
        Hotel hotel1 = new Hotel((int) (short) -1);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) 'a');
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        hotel5.reserveRoom(room29);
        hotel5.displayRoomStatus();
        Room room32 = hotel5.findAvailableRoom();
        Hotel hotel34 = new Hotel(0);
        hotel34.displayRoomStatus();
        Room room36 = hotel34.findAvailableRoom();
        Room room37 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        hotel34.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) ' ');
        Hotel hotel43 = new Hotel((int) (short) 0);
        Room room44 = hotel43.findAvailableRoom();
        Hotel hotel46 = new Hotel(10);
        Room room47 = hotel46.findAvailableRoom();
        hotel43.reserveRoom(room47);
        hotel41.reserveRoom(room47);
        hotel34.reserveRoom(room47);
        hotel5.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        hotel1.displayRoomStatus();
        Room room54 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room47);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1887");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Room room36 = hotel9.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (short) 100);
        Room room39 = hotel38.findAvailableRoom();
        hotel9.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (short) 10);
        Room room44 = hotel43.findAvailableRoom();
        Room room45 = hotel43.findAvailableRoom();
        hotel1.reserveRoom(room45);
        Room room47 = hotel1.findAvailableRoom();
        Room room48 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room48);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1888");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel3.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel3.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        hotel1.displayRoomStatus();
        Room room55 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room55);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1889");
        Hotel hotel1 = new Hotel((int) 'a');
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1890");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel7.reserveRoom(room11);
        Room room13 = hotel7.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel15.reserveRoom(room50);
        hotel7.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) 'a');
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        Room room71 = hotel60.findAvailableRoom();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel60.reserveRoom(room82);
        hotel58.reserveRoom(room82);
        hotel1.reserveRoom(room82);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room91 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNull(room91);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1891");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) 'a');
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel8.reserveRoom(room35);
        hotel4.reserveRoom(room35);
        hotel1.reserveRoom(room35);
        Hotel hotel42 = new Hotel((int) (short) 0);
        Room room43 = hotel42.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel71.reserveRoom(room80);
        hotel49.reserveRoom(room80);
        hotel45.reserveRoom(room80);
        hotel42.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room86 = hotel1.findAvailableRoom();
        Room room87 = hotel1.findAvailableRoom();
        Room room88 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room88);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1892");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass10 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1893");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room12 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room12);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1894");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Room room32 = hotel1.findAvailableRoom();
        Room room33 = hotel1.findAvailableRoom();
        Room room34 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel38 = new Hotel(0);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Hotel hotel43 = new Hotel(0);
        hotel43.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel43.reserveRoom(room47);
        hotel38.reserveRoom(room47);
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        hotel53.displayRoomStatus();
        Room room55 = hotel53.findAvailableRoom();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        hotel57.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel57.reserveRoom(room75);
        hotel53.reserveRoom(room75);
        Room room79 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) ' ');
        Hotel hotel84 = new Hotel((int) 'a');
        hotel84.displayRoomStatus();
        Room room86 = hotel84.findAvailableRoom();
        hotel82.reserveRoom(room86);
        hotel53.reserveRoom(room86);
        hotel38.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room86);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1895");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        Room room12 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room14 = hotel1.findAvailableRoom();
        Room room15 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room15);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1896");
        Hotel hotel1 = new Hotel((int) (short) 1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Room room11 = hotel7.findAvailableRoom();
        Hotel hotel13 = new Hotel(0);
        hotel13.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel13.reserveRoom(room17);
        Room room19 = hotel13.findAvailableRoom();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel25.reserveRoom(room56);
        hotel21.reserveRoom(room56);
        hotel13.reserveRoom(room56);
        hotel7.reserveRoom(room56);
        hotel1.reserveRoom(room56);
        hotel1.displayRoomStatus();
        Hotel hotel65 = new Hotel(0);
        hotel65.displayRoomStatus();
        Room room67 = hotel65.findAvailableRoom();
        Room room68 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        hotel65.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) ' ');
        Hotel hotel74 = new Hotel((int) (short) 0);
        Room room75 = hotel74.findAvailableRoom();
        Hotel hotel77 = new Hotel(10);
        Room room78 = hotel77.findAvailableRoom();
        hotel74.reserveRoom(room78);
        hotel72.reserveRoom(room78);
        hotel65.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        Room room83 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room83);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1897");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel31.reserveRoom(room53);
        hotel31.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel59.reserveRoom(room68);
        hotel31.reserveRoom(room68);
        hotel1.reserveRoom(room68);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Room room76 = hotel73.findAvailableRoom();
        Room room77 = hotel73.findAvailableRoom();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel73.reserveRoom(room80);
        Hotel hotel83 = new Hotel((int) (short) 1);
        hotel83.displayRoomStatus();
        hotel83.displayRoomStatus();
        hotel83.displayRoomStatus();
        Room room87 = hotel83.findAvailableRoom();
        hotel73.reserveRoom(room87);
        hotel1.reserveRoom(room87);
        Room room90 = hotel1.findAvailableRoom();
        Room room91 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass92 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNull(room90);
        org.junit.Assert.assertNull(room91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1898");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Room room41 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel46 = new Hotel(1);
        hotel46.displayRoomStatus();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        hotel50.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        hotel59.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel68.reserveRoom(room77);
        hotel59.reserveRoom(room77);
        hotel50.reserveRoom(room77);
        hotel46.reserveRoom(room77);
        hotel46.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel84.displayRoomStatus();
        Room room87 = hotel84.findAvailableRoom();
        Room room88 = hotel84.findAvailableRoom();
        hotel46.reserveRoom(room88);
        Room room90 = hotel46.findAvailableRoom();
        hotel1.reserveRoom(room90);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room90);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1899");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room46 = hotel1.findAvailableRoom();
        Hotel hotel48 = new Hotel(100);
        hotel48.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (short) 0);
        Room room52 = hotel51.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        Hotel hotel80 = new Hotel((int) (byte) -1);
        Room room81 = hotel80.findAvailableRoom();
        hotel80.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel80.reserveRoom(room85);
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel80.reserveRoom(room89);
        hotel58.reserveRoom(room89);
        hotel54.reserveRoom(room89);
        hotel51.reserveRoom(room89);
        hotel48.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        java.lang.Class<?> wildcardClass96 = room89.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1900");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) 'a');
        hotel43.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel43.reserveRoom(room51);
        hotel43.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel60.reserveRoom(room91);
        hotel56.reserveRoom(room91);
        hotel43.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        Room room97 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNull(room97);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1901");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        hotel13.displayRoomStatus();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel13.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel13.reserveRoom(room59);
        hotel8.reserveRoom(room59);
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        Room room66 = hotel1.findAvailableRoom();
        Room room67 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room69 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel72 = new Hotel(1);
        hotel72.displayRoomStatus();
        hotel72.displayRoomStatus();
        hotel72.displayRoomStatus();
        hotel72.displayRoomStatus();
        hotel72.displayRoomStatus();
        hotel72.displayRoomStatus();
        hotel72.displayRoomStatus();
        Room room80 = hotel72.findAvailableRoom();
        hotel1.reserveRoom(room80);
        java.lang.Class<?> wildcardClass82 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1902");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel11.reserveRoom(room60);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel11.reserveRoom(room69);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel11.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room84 = hotel1.findAvailableRoom();
        Hotel hotel86 = new Hotel((int) (byte) -1);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel86.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        hotel1.displayRoomStatus();
        Room room98 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass99 = room98.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNull(room98);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1903");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Room room41 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        hotel45.displayRoomStatus();
        Room room47 = hotel45.findAvailableRoom();
        Room room48 = hotel45.findAvailableRoom();
        Room room49 = hotel45.findAvailableRoom();
        Room room50 = hotel45.findAvailableRoom();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        hotel52.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) -1);
        Room room62 = hotel61.findAvailableRoom();
        hotel61.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel61.reserveRoom(room66);
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel61.reserveRoom(room70);
        hotel52.reserveRoom(room70);
        Hotel hotel74 = new Hotel((int) 'a');
        hotel74.displayRoomStatus();
        Room room76 = hotel74.findAvailableRoom();
        hotel52.reserveRoom(room76);
        hotel52.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (short) 10);
        Room room81 = hotel80.findAvailableRoom();
        hotel52.reserveRoom(room81);
        hotel45.reserveRoom(room81);
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Hotel hotel87 = new Hotel((int) 'a');
        hotel87.displayRoomStatus();
        Room room89 = hotel87.findAvailableRoom();
        hotel45.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room89);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1904");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel60 = new Hotel(10);
        Room room61 = hotel60.findAvailableRoom();
        Room room62 = hotel60.findAvailableRoom();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        hotel73.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel73.reserveRoom(room91);
        hotel64.reserveRoom(room91);
        hotel60.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        Room room97 = hotel1.findAvailableRoom();
        Room room98 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNull(room97);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1905");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        hotel12.reserveRoom(room39);
        Hotel hotel44 = new Hotel((int) (short) 0);
        hotel44.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        hotel47.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        hotel56.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel56.reserveRoom(room74);
        hotel47.reserveRoom(room74);
        hotel44.reserveRoom(room74);
        hotel12.reserveRoom(room74);
        Hotel hotel81 = new Hotel((int) ' ');
        Hotel hotel83 = new Hotel((int) (short) 0);
        Room room84 = hotel83.findAvailableRoom();
        Hotel hotel86 = new Hotel(10);
        Room room87 = hotel86.findAvailableRoom();
        hotel83.reserveRoom(room87);
        hotel81.reserveRoom(room87);
        hotel12.reserveRoom(room87);
        hotel7.reserveRoom(room87);
        hotel1.reserveRoom(room87);
        Room room93 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNull(room93);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1906");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room9);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1907");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        hotel23.reserveRoom(room45);
        hotel23.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel23.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass75 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1908");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) '#');
        Room room8 = hotel7.findAvailableRoom();
        Hotel hotel10 = new Hotel(1);
        hotel10.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        hotel13.displayRoomStatus();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel13.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel13.reserveRoom(room50);
        Hotel hotel54 = new Hotel(0);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel13.reserveRoom(room59);
        hotel10.reserveRoom(room59);
        Room room63 = hotel10.findAvailableRoom();
        hotel7.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1909");
        Hotel hotel1 = new Hotel((-1));
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(0);
        Room room5 = hotel4.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) ' ');
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel7.reserveRoom(room13);
        Room room16 = hotel7.findAvailableRoom();
        hotel4.reserveRoom(room16);
        Hotel hotel19 = new Hotel((int) 'a');
        hotel19.displayRoomStatus();
        Room room21 = hotel19.findAvailableRoom();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel4.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room57);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1910");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Room room30 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room33 = hotel1.findAvailableRoom();
        Room room34 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel37 = new Hotel(0);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        hotel37.displayRoomStatus();
        Hotel hotel42 = new Hotel(0);
        hotel42.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel42.reserveRoom(room46);
        hotel37.reserveRoom(room46);
        hotel1.reserveRoom(room46);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room46);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1911");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Hotel hotel12 = new Hotel(100);
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel54.reserveRoom(room63);
        hotel45.reserveRoom(room63);
        hotel36.reserveRoom(room63);
        hotel14.reserveRoom(room63);
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Room room72 = hotel69.findAvailableRoom();
        hotel14.reserveRoom(room72);
        hotel14.displayRoomStatus();
        hotel14.displayRoomStatus();
        hotel14.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) -1);
        Room room79 = hotel78.findAvailableRoom();
        hotel78.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel78.reserveRoom(room83);
        hotel14.reserveRoom(room83);
        hotel12.reserveRoom(room83);
        hotel10.reserveRoom(room83);
        hotel1.reserveRoom(room83);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room83);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1912");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        hotel13.displayRoomStatus();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel13.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel13.reserveRoom(room59);
        hotel8.reserveRoom(room59);
        hotel1.reserveRoom(room59);
        Room room65 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room67 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNull(room67);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1913");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel(10);
        Room room6 = hotel5.findAvailableRoom();
        Room room7 = hotel5.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Room room11 = hotel9.findAvailableRoom();
        Room room12 = hotel9.findAvailableRoom();
        Room room13 = hotel9.findAvailableRoom();
        Hotel hotel15 = new Hotel(0);
        hotel15.displayRoomStatus();
        Room room17 = hotel15.findAvailableRoom();
        Room room18 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        hotel15.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) ' ');
        Hotel hotel24 = new Hotel((int) (short) 0);
        Room room25 = hotel24.findAvailableRoom();
        Hotel hotel27 = new Hotel(10);
        Room room28 = hotel27.findAvailableRoom();
        hotel24.reserveRoom(room28);
        hotel22.reserveRoom(room28);
        hotel15.reserveRoom(room28);
        hotel9.reserveRoom(room28);
        hotel5.reserveRoom(room28);
        Room room34 = hotel5.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel5.reserveRoom(room37);
        hotel1.reserveRoom(room37);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room37);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1914");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room41 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (short) 0);
        Room room46 = hotel45.findAvailableRoom();
        Hotel hotel48 = new Hotel((int) 'a');
        hotel48.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel48.reserveRoom(room56);
        Room room59 = hotel48.findAvailableRoom();
        Room room60 = hotel48.findAvailableRoom();
        hotel45.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        Room room63 = hotel38.findAvailableRoom();
        hotel1.reserveRoom(room63);
        Hotel hotel66 = new Hotel(0);
        hotel66.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel66.reserveRoom(room70);
        hotel1.reserveRoom(room70);
        Hotel hotel74 = new Hotel((int) ' ');
        Hotel hotel76 = new Hotel((int) (short) 0);
        Room room77 = hotel76.findAvailableRoom();
        Hotel hotel79 = new Hotel(10);
        Room room80 = hotel79.findAvailableRoom();
        hotel76.reserveRoom(room80);
        hotel74.reserveRoom(room80);
        Room room83 = hotel74.findAvailableRoom();
        Room room84 = hotel74.findAvailableRoom();
        Room room85 = hotel74.findAvailableRoom();
        hotel1.reserveRoom(room85);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room85);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1915");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room39 = hotel1.findAvailableRoom();
        Room room40 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass41 = room40.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1916");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room18 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room22 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room24 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room24);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1917");
        Hotel hotel1 = new Hotel((int) (short) 0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel4.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel4.reserveRoom(room31);
        hotel1.reserveRoom(room31);
        Room room36 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1918");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel60 = new Hotel(10);
        Room room61 = hotel60.findAvailableRoom();
        Room room62 = hotel60.findAvailableRoom();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        hotel73.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel73.reserveRoom(room91);
        hotel64.reserveRoom(room91);
        hotel60.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        Room room97 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNull(room97);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1919");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel21.reserveRoom(room30);
        hotel12.reserveRoom(room30);
        Room room33 = hotel12.findAvailableRoom();
        Room room34 = hotel12.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Room room39 = hotel36.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        hotel41.displayRoomStatus();
        Room room43 = hotel41.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel54.reserveRoom(room63);
        hotel45.reserveRoom(room63);
        hotel41.reserveRoom(room63);
        hotel41.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        hotel69.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) -1);
        Room room79 = hotel78.findAvailableRoom();
        hotel78.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel78.reserveRoom(room83);
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel78.reserveRoom(room87);
        hotel69.reserveRoom(room87);
        hotel41.reserveRoom(room87);
        hotel36.reserveRoom(room87);
        hotel12.reserveRoom(room87);
        hotel7.reserveRoom(room87);
        hotel1.reserveRoom(room87);
        java.lang.Class<?> wildcardClass95 = room87.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1920");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room39 = hotel1.findAvailableRoom();
        Hotel hotel41 = new Hotel(0);
        hotel41.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel41.reserveRoom(room45);
        hotel41.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) 'a');
        hotel49.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        hotel49.reserveRoom(room57);
        hotel41.reserveRoom(room57);
        hotel1.reserveRoom(room57);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1921");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Room room20 = hotel17.findAvailableRoom();
        Room room21 = hotel17.findAvailableRoom();
        Hotel hotel23 = new Hotel(0);
        hotel23.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel23.reserveRoom(room27);
        Room room29 = hotel23.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel35.reserveRoom(room66);
        hotel31.reserveRoom(room66);
        hotel23.reserveRoom(room66);
        hotel17.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        Hotel hotel74 = new Hotel((int) (short) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel74.displayRoomStatus();
        Room room77 = hotel74.findAvailableRoom();
        hotel1.reserveRoom(room77);
        hotel1.displayRoomStatus();
        Room room80 = hotel1.findAvailableRoom();
        Hotel hotel82 = new Hotel((int) (short) 100);
        Room room83 = hotel82.findAvailableRoom();
        hotel1.reserveRoom(room83);
        Room room85 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass87 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1922");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel((int) 'a');
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) 'a');
        hotel13.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel13.reserveRoom(room21);
        Room room24 = hotel13.findAvailableRoom();
        Room room25 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room25);
        hotel6.reserveRoom(room25);
        Room room28 = hotel6.findAvailableRoom();
        Room room29 = hotel6.findAvailableRoom();
        Room room30 = hotel6.findAvailableRoom();
        hotel1.reserveRoom(room30);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room30);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1923");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel31.reserveRoom(room53);
        hotel31.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel59.reserveRoom(room68);
        hotel31.reserveRoom(room68);
        hotel1.reserveRoom(room68);
        hotel1.displayRoomStatus();
        Room room73 = hotel1.findAvailableRoom();
        Room room74 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNull(room74);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1924");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Room room27 = hotel6.findAvailableRoom();
        Room room28 = hotel6.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Room room33 = hotel30.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        hotel35.displayRoomStatus();
        Room room37 = hotel35.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel39.reserveRoom(room57);
        hotel35.reserveRoom(room57);
        hotel35.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        hotel63.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel63.reserveRoom(room81);
        hotel35.reserveRoom(room81);
        hotel30.reserveRoom(room81);
        hotel6.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        Room room88 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room90 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass92 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNull(room88);
        org.junit.Assert.assertNull(room90);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1925");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room6);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1926");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel27.reserveRoom(room54);
        hotel5.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        Hotel hotel61 = new Hotel((int) ' ');
        Hotel hotel63 = new Hotel((int) 'a');
        hotel63.displayRoomStatus();
        Room room65 = hotel63.findAvailableRoom();
        hotel61.reserveRoom(room65);
        hotel1.reserveRoom(room65);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room70 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1927");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        Room room51 = hotel1.findAvailableRoom();
        Room room52 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room54 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        Room room57 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room57);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1928");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) 'a');
        hotel29.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel29.reserveRoom(room37);
        Room room40 = hotel29.findAvailableRoom();
        Room room41 = hotel29.findAvailableRoom();
        hotel1.reserveRoom(room41);
        java.lang.Class<?> wildcardClass43 = room41.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1929");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room18 = hotel1.findAvailableRoom();
        Room room19 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) 'a');
        hotel22.displayRoomStatus();
        Room room24 = hotel22.findAvailableRoom();
        hotel1.reserveRoom(room24);
        Room room26 = hotel1.findAvailableRoom();
        Room room27 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room27);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1930");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room52 = hotel1.findAvailableRoom();
        Room room53 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass54 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1931");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel30 = new Hotel(0);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel35 = new Hotel(10);
        Room room36 = hotel35.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        hotel38.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel38.reserveRoom(room75);
        hotel35.reserveRoom(room75);
        hotel30.reserveRoom(room75);
        hotel1.reserveRoom(room75);
        hotel1.displayRoomStatus();
        Room room82 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass84 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1932");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) 'a');
        hotel36.displayRoomStatus();
        Room room38 = hotel36.findAvailableRoom();
        hotel14.reserveRoom(room38);
        Room room40 = hotel14.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) 'a');
        hotel42.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel42.reserveRoom(room50);
        Room room53 = hotel42.findAvailableRoom();
        Room room54 = hotel42.findAvailableRoom();
        hotel14.reserveRoom(room54);
        hotel14.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) 'a');
        hotel58.displayRoomStatus();
        Room room60 = hotel58.findAvailableRoom();
        hotel14.reserveRoom(room60);
        hotel1.reserveRoom(room60);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room60);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1933");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        hotel9.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel9.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Hotel hotel42 = new Hotel(1);
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel46.reserveRoom(room73);
        hotel42.reserveRoom(room73);
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        Room room82 = hotel42.findAvailableRoom();
        hotel1.reserveRoom(room82);
        hotel1.displayRoomStatus();
        Hotel hotel86 = new Hotel(1);
        hotel86.displayRoomStatus();
        hotel86.displayRoomStatus();
        Room room89 = hotel86.findAvailableRoom();
        hotel1.reserveRoom(room89);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room89);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1934");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room9);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1935");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        Hotel hotel10 = new Hotel(0);
        hotel10.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel10.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (short) 0);
        Room room19 = hotel18.findAvailableRoom();
        Hotel hotel21 = new Hotel(10);
        Room room22 = hotel21.findAvailableRoom();
        hotel18.reserveRoom(room22);
        hotel10.reserveRoom(room22);
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Room room29 = hotel26.findAvailableRoom();
        Room room30 = hotel26.findAvailableRoom();
        Hotel hotel32 = new Hotel(0);
        hotel32.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel32.reserveRoom(room36);
        Room room38 = hotel32.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        hotel44.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel53.reserveRoom(room62);
        hotel44.reserveRoom(room62);
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel44.reserveRoom(room75);
        hotel40.reserveRoom(room75);
        hotel32.reserveRoom(room75);
        hotel26.reserveRoom(room75);
        hotel10.reserveRoom(room75);
        Hotel hotel83 = new Hotel((int) (short) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel83.displayRoomStatus();
        Room room86 = hotel83.findAvailableRoom();
        hotel10.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        Room room89 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room89);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1936");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room26 = hotel1.findAvailableRoom();
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel42.reserveRoom(room73);
        hotel38.reserveRoom(room73);
        hotel29.reserveRoom(room73);
        Room room78 = hotel29.findAvailableRoom();
        Hotel hotel80 = new Hotel((int) (short) 1);
        Hotel hotel82 = new Hotel((int) (short) 0);
        Room room83 = hotel82.findAvailableRoom();
        Hotel hotel85 = new Hotel(10);
        Room room86 = hotel85.findAvailableRoom();
        hotel82.reserveRoom(room86);
        hotel80.reserveRoom(room86);
        Room room89 = hotel80.findAvailableRoom();
        hotel29.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room89);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1937");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        hotel9.displayRoomStatus();
        Room room37 = hotel9.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        hotel39.displayRoomStatus();
        Room room41 = hotel39.findAvailableRoom();
        Room room42 = hotel39.findAvailableRoom();
        Hotel hotel44 = new Hotel(1);
        hotel44.displayRoomStatus();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        hotel57.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel57.reserveRoom(room75);
        hotel48.reserveRoom(room75);
        hotel44.reserveRoom(room75);
        hotel44.displayRoomStatus();
        hotel44.displayRoomStatus();
        Room room82 = hotel44.findAvailableRoom();
        hotel39.reserveRoom(room82);
        Room room84 = hotel39.findAvailableRoom();
        hotel9.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room84);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1938");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) 'a');
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel8.reserveRoom(room16);
        Room room19 = hotel8.findAvailableRoom();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        hotel21.displayRoomStatus();
        Room room23 = hotel21.findAvailableRoom();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        hotel21.reserveRoom(room43);
        hotel21.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel21.reserveRoom(room67);
        hotel8.reserveRoom(room67);
        hotel1.reserveRoom(room67);
        hotel1.displayRoomStatus();
        Room room74 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room74);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1939");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) 'a');
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel8.reserveRoom(room16);
        Room room19 = hotel8.findAvailableRoom();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        hotel21.displayRoomStatus();
        Room room23 = hotel21.findAvailableRoom();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        hotel21.reserveRoom(room43);
        hotel21.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel21.reserveRoom(room67);
        hotel8.reserveRoom(room67);
        hotel1.reserveRoom(room67);
        hotel1.displayRoomStatus();
        Room room74 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass75 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1940");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Room room34 = hotel31.findAvailableRoom();
        Hotel hotel36 = new Hotel(1);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel40.reserveRoom(room67);
        hotel36.reserveRoom(room67);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Room room74 = hotel36.findAvailableRoom();
        hotel31.reserveRoom(room74);
        Room room76 = hotel31.findAvailableRoom();
        hotel1.reserveRoom(room76);
        hotel1.displayRoomStatus();
        Room room79 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room79);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1941");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room30 = hotel1.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel32.reserveRoom(room40);
        Room room43 = hotel32.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        hotel45.displayRoomStatus();
        Room room47 = hotel45.findAvailableRoom();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel45.reserveRoom(room67);
        hotel45.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        hotel73.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel73.reserveRoom(room91);
        hotel45.reserveRoom(room91);
        hotel32.reserveRoom(room91);
        Room room96 = hotel32.findAvailableRoom();
        hotel1.reserveRoom(room96);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(room96);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1942");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass10 = room9.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1943");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        hotel1.displayRoomStatus();
        Room room3 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1944");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Room room52 = hotel49.findAvailableRoom();
        hotel46.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Room room58 = hotel55.findAvailableRoom();
        Room room59 = hotel55.findAvailableRoom();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel55.reserveRoom(room62);
        hotel46.reserveRoom(room62);
        hotel1.reserveRoom(room62);
        java.lang.Class<?> wildcardClass66 = room62.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1945");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Room room41 = hotel38.findAvailableRoom();
        hotel1.reserveRoom(room41);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room41);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1946");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        hotel7.reserveRoom(room29);
        hotel7.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel35.reserveRoom(room44);
        hotel7.reserveRoom(room44);
        hotel1.reserveRoom(room44);
        Room room48 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room48);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1947");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel(0);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel12.reserveRoom(room21);
        hotel6.reserveRoom(room21);
        hotel1.reserveRoom(room21);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(room21);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1948");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(0);
        Room room6 = hotel5.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        Room room17 = hotel8.findAvailableRoom();
        hotel5.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        hotel1.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        hotel22.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel35.reserveRoom(room66);
        hotel31.reserveRoom(room66);
        hotel22.reserveRoom(room66);
        hotel22.displayRoomStatus();
        hotel22.displayRoomStatus();
        Room room73 = hotel22.findAvailableRoom();
        Hotel hotel75 = new Hotel((int) 'a');
        hotel75.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) -1);
        Room room79 = hotel78.findAvailableRoom();
        hotel78.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel78.reserveRoom(room83);
        hotel75.reserveRoom(room83);
        hotel75.displayRoomStatus();
        Room room87 = hotel75.findAvailableRoom();
        hotel22.reserveRoom(room87);
        hotel1.reserveRoom(room87);
        java.lang.Class<?> wildcardClass90 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1949");
        Hotel hotel1 = new Hotel((int) (short) 10);
        Hotel hotel3 = new Hotel(0);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        hotel3.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) ' ');
        Hotel hotel12 = new Hotel((int) (short) 0);
        Room room13 = hotel12.findAvailableRoom();
        Hotel hotel15 = new Hotel(10);
        Room room16 = hotel15.findAvailableRoom();
        hotel12.reserveRoom(room16);
        hotel10.reserveRoom(room16);
        hotel3.reserveRoom(room16);
        hotel3.displayRoomStatus();
        Hotel hotel22 = new Hotel((-1));
        Hotel hotel24 = new Hotel((int) (byte) -1);
        hotel24.displayRoomStatus();
        Room room26 = hotel24.findAvailableRoom();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        hotel28.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel28.reserveRoom(room46);
        hotel24.reserveRoom(room46);
        hotel22.reserveRoom(room46);
        Hotel hotel52 = new Hotel(0);
        hotel52.displayRoomStatus();
        Room room54 = hotel52.findAvailableRoom();
        Room room55 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        hotel52.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) ' ');
        Hotel hotel61 = new Hotel((int) (short) 0);
        Room room62 = hotel61.findAvailableRoom();
        Hotel hotel64 = new Hotel(10);
        Room room65 = hotel64.findAvailableRoom();
        hotel61.reserveRoom(room65);
        hotel59.reserveRoom(room65);
        hotel52.reserveRoom(room65);
        hotel22.reserveRoom(room65);
        hotel3.reserveRoom(room65);
        hotel1.reserveRoom(room65);
        Hotel hotel73 = new Hotel((int) 'a');
        hotel73.displayRoomStatus();
        Room room75 = hotel73.findAvailableRoom();
        Hotel hotel77 = new Hotel((int) (short) 0);
        Room room78 = hotel77.findAvailableRoom();
        Hotel hotel80 = new Hotel((int) 'a');
        hotel80.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) -1);
        Room room84 = hotel83.findAvailableRoom();
        hotel83.displayRoomStatus();
        Hotel hotel87 = new Hotel((int) (byte) 1);
        Room room88 = hotel87.findAvailableRoom();
        hotel83.reserveRoom(room88);
        hotel80.reserveRoom(room88);
        Room room91 = hotel80.findAvailableRoom();
        Room room92 = hotel80.findAvailableRoom();
        hotel77.reserveRoom(room92);
        hotel73.reserveRoom(room92);
        Room room95 = hotel73.findAvailableRoom();
        hotel1.reserveRoom(room95);
        Room room97 = hotel1.findAvailableRoom();
        Room room98 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(room92);
        org.junit.Assert.assertNotNull(room95);
        org.junit.Assert.assertNotNull(room97);
        org.junit.Assert.assertNotNull(room98);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1950");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        Room room60 = hotel1.findAvailableRoom();
        Room room61 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room61);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1951");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Room room41 = hotel1.findAvailableRoom();
        Room room42 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass43 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1952");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (short) 100);
        Room room31 = hotel30.findAvailableRoom();
        hotel1.reserveRoom(room31);
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass35 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1953");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Hotel hotel42 = new Hotel(0);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Room room47 = hotel44.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        hotel1.displayRoomStatus();
        Room room51 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room51);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1954");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        Room room10 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1955");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Hotel hotel36 = new Hotel(10);
        Room room37 = hotel36.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        hotel39.displayRoomStatus();
        Room room41 = hotel39.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        hotel39.reserveRoom(room61);
        hotel39.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel39.reserveRoom(room76);
        hotel36.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        java.lang.Class<?> wildcardClass81 = room76.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1956");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (short) 100);
        Room room31 = hotel30.findAvailableRoom();
        hotel1.reserveRoom(room31);
        Room room33 = hotel1.findAvailableRoom();
        Room room34 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass35 = room34.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1957");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        Room room10 = hotel1.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        Room room38 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel41 = new Hotel(0);
        hotel41.displayRoomStatus();
        Room room43 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel46 = new Hotel(10);
        Room room47 = hotel46.findAvailableRoom();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        hotel49.displayRoomStatus();
        Room room51 = hotel49.findAvailableRoom();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        hotel53.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel62.reserveRoom(room71);
        hotel53.reserveRoom(room71);
        hotel49.reserveRoom(room71);
        hotel49.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel49.reserveRoom(room86);
        hotel46.reserveRoom(room86);
        hotel41.reserveRoom(room86);
        hotel12.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1958");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        Room room15 = hotel9.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel21.reserveRoom(room52);
        hotel17.reserveRoom(room52);
        hotel9.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1959");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel60 = new Hotel(10);
        Room room61 = hotel60.findAvailableRoom();
        Room room62 = hotel60.findAvailableRoom();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        hotel73.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel73.reserveRoom(room91);
        hotel64.reserveRoom(room91);
        hotel60.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1960");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        hotel28.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel28.reserveRoom(room55);
        hotel6.reserveRoom(room55);
        hotel1.reserveRoom(room55);
        Room room61 = hotel1.findAvailableRoom();
        Hotel hotel63 = new Hotel((int) (byte) 10);
        hotel63.displayRoomStatus();
        hotel63.displayRoomStatus();
        Room room66 = hotel63.findAvailableRoom();
        Room room67 = hotel63.findAvailableRoom();
        Room room68 = hotel63.findAvailableRoom();
        hotel1.reserveRoom(room68);
        Hotel hotel71 = new Hotel(0);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Room room76 = hotel73.findAvailableRoom();
        hotel71.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room76);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1961");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) 'a');
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) 'a');
        hotel13.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel13.reserveRoom(room21);
        Room room24 = hotel13.findAvailableRoom();
        Room room25 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room25);
        hotel6.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        java.lang.Class<?> wildcardClass29 = room25.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1962");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Room room27 = hotel6.findAvailableRoom();
        Room room28 = hotel6.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Room room33 = hotel30.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        hotel35.displayRoomStatus();
        Room room37 = hotel35.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel39.reserveRoom(room57);
        hotel35.reserveRoom(room57);
        hotel35.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        hotel63.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel63.reserveRoom(room81);
        hotel35.reserveRoom(room81);
        hotel30.reserveRoom(room81);
        hotel6.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        Room room88 = hotel1.findAvailableRoom();
        Room room89 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNull(room88);
        org.junit.Assert.assertNull(room89);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1963");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room12 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (short) 100);
        hotel15.displayRoomStatus();
        hotel15.displayRoomStatus();
        hotel15.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        Room room22 = hotel20.findAvailableRoom();
        Room room23 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        hotel26.displayRoomStatus();
        Room room28 = hotel26.findAvailableRoom();
        Room room29 = hotel26.findAvailableRoom();
        Room room30 = hotel26.findAvailableRoom();
        Room room31 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (short) 10);
        Room room35 = hotel34.findAvailableRoom();
        Hotel hotel37 = new Hotel(0);
        hotel37.displayRoomStatus();
        Room room39 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel42 = new Hotel(10);
        Room room43 = hotel42.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        hotel45.displayRoomStatus();
        Room room47 = hotel45.findAvailableRoom();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel45.reserveRoom(room67);
        hotel45.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel45.reserveRoom(room82);
        hotel42.reserveRoom(room82);
        hotel37.reserveRoom(room82);
        hotel37.displayRoomStatus();
        hotel37.displayRoomStatus();
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel37.reserveRoom(room91);
        hotel34.reserveRoom(room91);
        hotel26.reserveRoom(room91);
        hotel20.reserveRoom(room91);
        hotel15.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room91);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1964");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Room room17 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Room room20 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel23 = new Hotel(1);
        hotel23.displayRoomStatus();
        hotel23.displayRoomStatus();
        hotel23.displayRoomStatus();
        hotel23.displayRoomStatus();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        Room room31 = hotel29.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (short) 0);
        Room room34 = hotel33.findAvailableRoom();
        Room room35 = hotel33.findAvailableRoom();
        Room room36 = hotel33.findAvailableRoom();
        Room room37 = hotel33.findAvailableRoom();
        Hotel hotel39 = new Hotel(0);
        hotel39.displayRoomStatus();
        Room room41 = hotel39.findAvailableRoom();
        Room room42 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        hotel39.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) ' ');
        Hotel hotel48 = new Hotel((int) (short) 0);
        Room room49 = hotel48.findAvailableRoom();
        Hotel hotel51 = new Hotel(10);
        Room room52 = hotel51.findAvailableRoom();
        hotel48.reserveRoom(room52);
        hotel46.reserveRoom(room52);
        hotel39.reserveRoom(room52);
        hotel33.reserveRoom(room52);
        hotel29.reserveRoom(room52);
        hotel23.reserveRoom(room52);
        hotel10.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room52);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1965");
        Hotel hotel1 = new Hotel((int) (byte) 0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(1);
        hotel4.displayRoomStatus();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel8.reserveRoom(room35);
        hotel4.reserveRoom(room35);
        hotel4.displayRoomStatus();
        hotel4.displayRoomStatus();
        hotel4.displayRoomStatus();
        hotel4.displayRoomStatus();
        Room room44 = hotel4.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        hotel59.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel68.reserveRoom(room77);
        hotel59.reserveRoom(room77);
        Hotel hotel81 = new Hotel((int) (byte) -1);
        Room room82 = hotel81.findAvailableRoom();
        hotel81.displayRoomStatus();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel81.reserveRoom(room86);
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel81.reserveRoom(room90);
        hotel59.reserveRoom(room90);
        hotel55.reserveRoom(room90);
        hotel46.reserveRoom(room90);
        hotel4.reserveRoom(room90);
        Room room96 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room96);
        java.lang.Class<?> wildcardClass98 = room96.getClass();
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room96);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1966");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Room room14 = hotel10.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel10.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Hotel hotel21 = new Hotel(0);
        Room room22 = hotel21.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        Room room33 = hotel24.findAvailableRoom();
        hotel21.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) 'a');
        hotel36.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel36.reserveRoom(room44);
        Room room47 = hotel36.findAvailableRoom();
        Room room48 = hotel36.findAvailableRoom();
        Room room49 = hotel36.findAvailableRoom();
        hotel21.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        hotel1.displayRoomStatus();
        Room room53 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass54 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1967");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Room room27 = hotel6.findAvailableRoom();
        Room room28 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Room room30 = hotel6.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel32.displayRoomStatus();
        hotel32.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        Hotel hotel68 = new Hotel((int) 'a');
        hotel68.displayRoomStatus();
        Room room70 = hotel68.findAvailableRoom();
        hotel46.reserveRoom(room70);
        Room room72 = hotel46.findAvailableRoom();
        Hotel hotel74 = new Hotel((int) 'a');
        hotel74.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        hotel74.reserveRoom(room82);
        Room room85 = hotel74.findAvailableRoom();
        Room room86 = hotel74.findAvailableRoom();
        hotel46.reserveRoom(room86);
        hotel32.reserveRoom(room86);
        hotel6.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room86);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1968");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Room room41 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel46 = new Hotel((-1));
        Hotel hotel48 = new Hotel(0);
        hotel48.displayRoomStatus();
        Room room50 = hotel48.findAvailableRoom();
        Room room51 = hotel48.findAvailableRoom();
        Room room52 = hotel48.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        hotel54.displayRoomStatus();
        Room room56 = hotel54.findAvailableRoom();
        Room room57 = hotel54.findAvailableRoom();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        hotel54.reserveRoom(room64);
        hotel48.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1969");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        hotel38.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel38.reserveRoom(room56);
        Hotel hotel60 = new Hotel((int) 'a');
        hotel60.displayRoomStatus();
        Room room62 = hotel60.findAvailableRoom();
        hotel38.reserveRoom(room62);
        hotel1.reserveRoom(room62);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 10);
        hotel68.displayRoomStatus();
        hotel68.displayRoomStatus();
        Room room71 = hotel68.findAvailableRoom();
        hotel1.reserveRoom(room71);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room71);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1970");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) ' ');
        Hotel hotel28 = new Hotel((int) (short) 0);
        Room room29 = hotel28.findAvailableRoom();
        Hotel hotel31 = new Hotel(10);
        Room room32 = hotel31.findAvailableRoom();
        hotel28.reserveRoom(room32);
        hotel26.reserveRoom(room32);
        Room room35 = hotel26.findAvailableRoom();
        hotel1.reserveRoom(room35);
        Room room37 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room37);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1971");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) ' ');
        Hotel hotel48 = new Hotel((int) 'a');
        hotel48.displayRoomStatus();
        Room room50 = hotel48.findAvailableRoom();
        hotel46.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel54 = new Hotel(10);
        Room room55 = hotel54.findAvailableRoom();
        Room room56 = hotel54.findAvailableRoom();
        hotel1.reserveRoom(room56);
        java.lang.Class<?> wildcardClass58 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1972");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel1.reserveRoom(room11);
        Hotel hotel15 = new Hotel((int) 'a');
        hotel15.displayRoomStatus();
        Room room17 = hotel15.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        hotel28.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel28.reserveRoom(room46);
        hotel19.reserveRoom(room46);
        hotel15.reserveRoom(room46);
        hotel1.reserveRoom(room46);
        hotel1.displayRoomStatus();
        Room room53 = hotel1.findAvailableRoom();
        Room room54 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room54);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1973");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) 1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Room room9 = hotel6.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        hotel11.reserveRoom(room33);
        hotel11.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel39.reserveRoom(room57);
        hotel11.reserveRoom(room57);
        hotel6.reserveRoom(room57);
        Room room62 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Room room64 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Room room70 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        hotel67.displayRoomStatus();
        hotel67.displayRoomStatus();
        Room room74 = hotel67.findAvailableRoom();
        hotel6.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        hotel1.displayRoomStatus();
        Room room78 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room80 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass81 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1974");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room65 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room67 = hotel62.findAvailableRoom();
        Room room68 = hotel62.findAvailableRoom();
        hotel1.reserveRoom(room68);
        hotel1.displayRoomStatus();
        Room room71 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room71);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1975");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Room room30 = hotel1.findAvailableRoom();
        Room room31 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel42.reserveRoom(room69);
        hotel34.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        java.lang.Class<?> wildcardClass75 = room69.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1976");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room11 = hotel1.findAvailableRoom();
        Room room12 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room12);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1977");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel30 = new Hotel(0);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel35 = new Hotel(10);
        Room room36 = hotel35.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        hotel38.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel38.reserveRoom(room75);
        hotel35.reserveRoom(room75);
        hotel30.reserveRoom(room75);
        hotel1.reserveRoom(room75);
        Room room81 = hotel1.findAvailableRoom();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel83.displayRoomStatus();
        Room room86 = hotel83.findAvailableRoom();
        Room room87 = hotel83.findAvailableRoom();
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel83.reserveRoom(room90);
        Room room92 = hotel83.findAvailableRoom();
        hotel83.displayRoomStatus();
        hotel83.displayRoomStatus();
        Room room95 = hotel83.findAvailableRoom();
        hotel1.reserveRoom(room95);
        Room room97 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room92);
        org.junit.Assert.assertNotNull(room95);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1978");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        Hotel hotel16 = new Hotel((int) 'a');
        hotel16.displayRoomStatus();
        Room room18 = hotel16.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel20.reserveRoom(room47);
        hotel16.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        Hotel hotel54 = new Hotel((int) '4');
        Hotel hotel56 = new Hotel(0);
        Room room57 = hotel56.findAvailableRoom();
        Hotel hotel59 = new Hotel((int) ' ');
        Hotel hotel61 = new Hotel((int) (short) 0);
        Room room62 = hotel61.findAvailableRoom();
        Hotel hotel64 = new Hotel(10);
        Room room65 = hotel64.findAvailableRoom();
        hotel61.reserveRoom(room65);
        hotel59.reserveRoom(room65);
        Room room68 = hotel59.findAvailableRoom();
        hotel56.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) 'a');
        hotel71.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) -1);
        Room room75 = hotel74.findAvailableRoom();
        hotel74.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) 1);
        Room room79 = hotel78.findAvailableRoom();
        hotel74.reserveRoom(room79);
        hotel71.reserveRoom(room79);
        Room room82 = hotel71.findAvailableRoom();
        Room room83 = hotel71.findAvailableRoom();
        Room room84 = hotel71.findAvailableRoom();
        hotel56.reserveRoom(room84);
        hotel54.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        hotel1.displayRoomStatus();
        Hotel hotel90 = new Hotel((int) (short) 100);
        hotel90.displayRoomStatus();
        Room room92 = hotel90.findAvailableRoom();
        Room room93 = hotel90.findAvailableRoom();
        hotel1.reserveRoom(room93);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room92);
        org.junit.Assert.assertNotNull(room93);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1979");
        Hotel hotel1 = new Hotel((int) '#');
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room5);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1980");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1981");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(0);
        Room room6 = hotel5.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        Room room17 = hotel8.findAvailableRoom();
        hotel5.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        hotel1.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (short) 0);
        Room room23 = hotel22.findAvailableRoom();
        Hotel hotel25 = new Hotel(10);
        Room room26 = hotel25.findAvailableRoom();
        hotel22.reserveRoom(room26);
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Room room32 = hotel29.findAvailableRoom();
        hotel22.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass36 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1982");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        hotel38.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel38.reserveRoom(room56);
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel38.reserveRoom(room69);
        Room room72 = hotel38.findAvailableRoom();
        Room room73 = hotel38.findAvailableRoom();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Room room78 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Room room80 = hotel75.findAvailableRoom();
        hotel38.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (short) 1);
        Hotel hotel88 = new Hotel((int) (short) 0);
        Room room89 = hotel88.findAvailableRoom();
        Hotel hotel91 = new Hotel(10);
        Room room92 = hotel91.findAvailableRoom();
        hotel88.reserveRoom(room92);
        hotel86.reserveRoom(room92);
        hotel86.displayRoomStatus();
        Room room96 = hotel86.findAvailableRoom();
        hotel1.reserveRoom(room96);
        java.lang.Class<?> wildcardClass98 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room92);
        org.junit.Assert.assertNotNull(room96);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1983");
        Hotel hotel1 = new Hotel((int) (short) 100);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1984");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (short) 0);
        Room room6 = hotel5.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) 'a');
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel8.reserveRoom(room16);
        Room room19 = hotel8.findAvailableRoom();
        Room room20 = hotel8.findAvailableRoom();
        hotel5.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        Room room23 = hotel1.findAvailableRoom();
        Room room24 = hotel1.findAvailableRoom();
        Room room25 = hotel1.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (byte) 10);
        Room room28 = hotel27.findAvailableRoom();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        Room room38 = hotel31.findAvailableRoom();
        Room room39 = hotel31.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (short) 1);
        hotel41.displayRoomStatus();
        hotel41.displayRoomStatus();
        hotel41.displayRoomStatus();
        Room room45 = hotel41.findAvailableRoom();
        hotel31.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        Room room48 = hotel27.findAvailableRoom();
        hotel1.reserveRoom(room48);
        java.lang.Class<?> wildcardClass50 = room48.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1985");
        Hotel hotel1 = new Hotel((int) (byte) 100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel9.reserveRoom(room55);
        hotel4.reserveRoom(room55);
        Room room60 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room62 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room64 = hotel4.findAvailableRoom();
        Hotel hotel66 = new Hotel(0);
        hotel66.displayRoomStatus();
        Room room68 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        hotel66.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel66.reserveRoom(room81);
        hotel4.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        Room room86 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass89 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1986");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel(1);
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        hotel14.reserveRoom(room41);
        hotel10.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        hotel57.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel57.reserveRoom(room75);
        hotel48.reserveRoom(room75);
        hotel48.displayRoomStatus();
        hotel48.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) ' ');
        Hotel hotel84 = new Hotel((int) 'a');
        hotel84.displayRoomStatus();
        Room room86 = hotel84.findAvailableRoom();
        hotel82.reserveRoom(room86);
        hotel48.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        Room room90 = hotel1.findAvailableRoom();
        Room room91 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNull(room90);
        org.junit.Assert.assertNull(room91);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1987");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        Hotel hotel45 = new Hotel(0);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Hotel hotel50 = new Hotel(0);
        hotel50.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel50.reserveRoom(room54);
        hotel45.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        java.lang.Class<?> wildcardClass58 = room54.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1988");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        Room room37 = hotel1.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Room room45 = hotel42.findAvailableRoom();
        hotel39.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        Room room49 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room49);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1989");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel(0);
        Room room14 = hotel13.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) ' ');
        Hotel hotel18 = new Hotel((int) (short) 0);
        Room room19 = hotel18.findAvailableRoom();
        Hotel hotel21 = new Hotel(10);
        Room room22 = hotel21.findAvailableRoom();
        hotel18.reserveRoom(room22);
        hotel16.reserveRoom(room22);
        Room room25 = hotel16.findAvailableRoom();
        hotel13.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) 'a');
        hotel28.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel28.reserveRoom(room36);
        Room room39 = hotel28.findAvailableRoom();
        Room room40 = hotel28.findAvailableRoom();
        Room room41 = hotel28.findAvailableRoom();
        hotel13.reserveRoom(room41);
        Room room43 = hotel13.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        hotel45.reserveRoom(room72);
        hotel13.reserveRoom(room72);
        hotel1.reserveRoom(room72);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1990");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (short) 0);
        Room room9 = hotel8.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) 'a');
        hotel11.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel11.reserveRoom(room19);
        Room room22 = hotel11.findAvailableRoom();
        Room room23 = hotel11.findAvailableRoom();
        hotel8.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room23);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1991");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel9.reserveRoom(room46);
        hotel6.reserveRoom(room46);
        hotel1.reserveRoom(room46);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room53 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass57 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1992");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        Room room10 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1993");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1994");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel(0);
        Room room14 = hotel13.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) ' ');
        Hotel hotel18 = new Hotel((int) (short) 0);
        Room room19 = hotel18.findAvailableRoom();
        Hotel hotel21 = new Hotel(10);
        Room room22 = hotel21.findAvailableRoom();
        hotel18.reserveRoom(room22);
        hotel16.reserveRoom(room22);
        Room room25 = hotel16.findAvailableRoom();
        hotel13.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) 'a');
        hotel28.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel28.reserveRoom(room36);
        Room room39 = hotel28.findAvailableRoom();
        Room room40 = hotel28.findAvailableRoom();
        Room room41 = hotel28.findAvailableRoom();
        hotel13.reserveRoom(room41);
        Room room43 = hotel13.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        hotel45.reserveRoom(room72);
        hotel13.reserveRoom(room72);
        hotel1.reserveRoom(room72);
        java.lang.Class<?> wildcardClass78 = room72.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1995");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room37 = hotel1.findAvailableRoom();
        Room room38 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass39 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1996");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Room room44 = hotel1.findAvailableRoom();
        Room room45 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel48 = new Hotel(1);
        hotel48.displayRoomStatus();
        hotel48.displayRoomStatus();
        hotel48.displayRoomStatus();
        hotel48.displayRoomStatus();
        Hotel hotel54 = new Hotel(10);
        Room room55 = hotel54.findAvailableRoom();
        Room room56 = hotel54.findAvailableRoom();
        Hotel hotel58 = new Hotel((int) (short) 0);
        Room room59 = hotel58.findAvailableRoom();
        Room room60 = hotel58.findAvailableRoom();
        Room room61 = hotel58.findAvailableRoom();
        Room room62 = hotel58.findAvailableRoom();
        Hotel hotel64 = new Hotel(0);
        hotel64.displayRoomStatus();
        Room room66 = hotel64.findAvailableRoom();
        Room room67 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        hotel64.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) ' ');
        Hotel hotel73 = new Hotel((int) (short) 0);
        Room room74 = hotel73.findAvailableRoom();
        Hotel hotel76 = new Hotel(10);
        Room room77 = hotel76.findAvailableRoom();
        hotel73.reserveRoom(room77);
        hotel71.reserveRoom(room77);
        hotel64.reserveRoom(room77);
        hotel58.reserveRoom(room77);
        hotel54.reserveRoom(room77);
        hotel48.reserveRoom(room77);
        Room room84 = hotel48.findAvailableRoom();
        hotel1.reserveRoom(room84);
        Room room86 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNull(room86);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1997");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room37 = hotel1.findAvailableRoom();
        Room room38 = hotel1.findAvailableRoom();
        Room room39 = hotel1.findAvailableRoom();
        Room room40 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room39);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1998");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass36 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test1999");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room10 = hotel1.findAvailableRoom();
        Room room11 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room11);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest3.test2000");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room37 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room39 = hotel1.findAvailableRoom();
        Room room40 = hotel1.findAvailableRoom();
        Room room41 = hotel1.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        Hotel hotel65 = new Hotel((int) 'a');
        hotel65.displayRoomStatus();
        Room room67 = hotel65.findAvailableRoom();
        hotel43.reserveRoom(room67);
        Room room69 = hotel43.findAvailableRoom();
        Hotel hotel71 = new Hotel((int) 'a');
        hotel71.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) -1);
        Room room75 = hotel74.findAvailableRoom();
        hotel74.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) 1);
        Room room79 = hotel78.findAvailableRoom();
        hotel74.reserveRoom(room79);
        hotel71.reserveRoom(room79);
        Room room82 = hotel71.findAvailableRoom();
        Room room83 = hotel71.findAvailableRoom();
        hotel43.reserveRoom(room83);
        hotel1.reserveRoom(room83);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room83);
    }
}

