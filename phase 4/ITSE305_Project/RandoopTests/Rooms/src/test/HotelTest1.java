import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class HotelTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0501");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Room room14 = hotel10.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel10.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Room room20 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room22 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room20);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0502");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass62 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0503");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Room room27 = hotel6.findAvailableRoom();
        Room room28 = hotel6.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Room room33 = hotel30.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        hotel35.displayRoomStatus();
        Room room37 = hotel35.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel39.reserveRoom(room57);
        hotel35.reserveRoom(room57);
        hotel35.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        hotel63.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel63.reserveRoom(room81);
        hotel35.reserveRoom(room81);
        hotel30.reserveRoom(room81);
        hotel6.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        java.lang.Class<?> wildcardClass88 = room81.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0504");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Room room44 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass47 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0505");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        java.lang.Class<?> wildcardClass50 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0506");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room28 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0507");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        Room room15 = hotel9.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel21.reserveRoom(room52);
        hotel17.reserveRoom(room52);
        hotel9.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Hotel hotel59 = new Hotel(1);
        hotel59.displayRoomStatus();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        hotel63.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        hotel72.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) -1);
        Room room82 = hotel81.findAvailableRoom();
        hotel81.displayRoomStatus();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel81.reserveRoom(room86);
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel81.reserveRoom(room90);
        hotel72.reserveRoom(room90);
        hotel63.reserveRoom(room90);
        hotel59.reserveRoom(room90);
        hotel59.displayRoomStatus();
        hotel59.displayRoomStatus();
        Room room97 = hotel59.findAvailableRoom();
        hotel1.reserveRoom(room97);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room97);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0508");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (short) 0);
        Room room32 = hotel31.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) 'a');
        hotel34.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel34.reserveRoom(room42);
        Room room45 = hotel34.findAvailableRoom();
        Room room46 = hotel34.findAvailableRoom();
        hotel31.reserveRoom(room46);
        hotel1.reserveRoom(room46);
        Room room49 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass50 = room49.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room49);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0509");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) ' ');
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel30.reserveRoom(room34);
        hotel1.reserveRoom(room34);
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        hotel38.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel38.reserveRoom(room56);
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        hotel69.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) -1);
        Room room79 = hotel78.findAvailableRoom();
        hotel78.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel78.reserveRoom(room83);
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel78.reserveRoom(room87);
        hotel69.reserveRoom(room87);
        hotel60.reserveRoom(room87);
        hotel38.reserveRoom(room87);
        hotel1.reserveRoom(room87);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room87);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0510");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel21.reserveRoom(room30);
        hotel12.reserveRoom(room30);
        Room room33 = hotel12.findAvailableRoom();
        Room room34 = hotel12.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Room room39 = hotel36.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        hotel41.displayRoomStatus();
        Room room43 = hotel41.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel54.reserveRoom(room63);
        hotel45.reserveRoom(room63);
        hotel41.reserveRoom(room63);
        hotel41.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        hotel69.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) -1);
        Room room79 = hotel78.findAvailableRoom();
        hotel78.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel78.reserveRoom(room83);
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel78.reserveRoom(room87);
        hotel69.reserveRoom(room87);
        hotel41.reserveRoom(room87);
        hotel36.reserveRoom(room87);
        hotel12.reserveRoom(room87);
        hotel7.reserveRoom(room87);
        hotel1.reserveRoom(room87);
        Room room95 = hotel1.findAvailableRoom();
        Room room96 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNull(room95);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0511");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room58 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass59 = room58.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room58);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0512");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        Room room10 = hotel1.findAvailableRoom();
        Room room11 = hotel1.findAvailableRoom();
        Hotel hotel13 = new Hotel(1);
        hotel13.displayRoomStatus();
        Hotel hotel16 = new Hotel(10);
        Room room17 = hotel16.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel27.reserveRoom(room54);
        hotel19.reserveRoom(room54);
        hotel16.reserveRoom(room54);
        hotel13.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        Hotel hotel63 = new Hotel(0);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        hotel63.displayRoomStatus();
        Hotel hotel68 = new Hotel(0);
        hotel68.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel68.reserveRoom(room72);
        hotel63.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (short) 0);
        Room room77 = hotel76.findAvailableRoom();
        Hotel hotel79 = new Hotel(10);
        Room room80 = hotel79.findAvailableRoom();
        hotel76.reserveRoom(room80);
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel83.displayRoomStatus();
        Room room86 = hotel83.findAvailableRoom();
        hotel76.reserveRoom(room86);
        hotel63.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        Room room90 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass91 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0513");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        hotel1.reserveRoom(room70);
        java.lang.Class<?> wildcardClass73 = room70.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0514");
        Hotel hotel1 = new Hotel((-1));
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(0);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        hotel4.displayRoomStatus();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel4.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        java.lang.Class<?> wildcardClass17 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0515");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass45 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0516");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        Hotel hotel37 = new Hotel((int) (short) 0);
        hotel37.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel40.reserveRoom(room67);
        hotel37.reserveRoom(room67);
        hotel5.reserveRoom(room67);
        hotel1.reserveRoom(room67);
        java.lang.Class<?> wildcardClass74 = room67.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0517");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        java.lang.Class<?> wildcardClass50 = room45.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0518");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass45 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0519");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (short) 0);
        Room room15 = hotel14.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) 'a');
        hotel17.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel17.reserveRoom(room25);
        Room room28 = hotel17.findAvailableRoom();
        Room room29 = hotel17.findAvailableRoom();
        hotel14.reserveRoom(room29);
        hotel7.reserveRoom(room29);
        hotel1.reserveRoom(room29);
        Hotel hotel34 = new Hotel((int) 'a');
        hotel34.displayRoomStatus();
        Room room36 = hotel34.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (short) 0);
        Room room39 = hotel38.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) 'a');
        hotel41.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        hotel41.reserveRoom(room49);
        Room room52 = hotel41.findAvailableRoom();
        Room room53 = hotel41.findAvailableRoom();
        hotel38.reserveRoom(room53);
        hotel34.reserveRoom(room53);
        Room room56 = hotel34.findAvailableRoom();
        hotel1.reserveRoom(room56);
        java.lang.Class<?> wildcardClass58 = room56.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0520");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room41 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Room room45 = hotel38.findAvailableRoom();
        hotel1.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Room room54 = hotel51.findAvailableRoom();
        hotel48.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        java.lang.Class<?> wildcardClass57 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0521");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        java.lang.Class<?> wildcardClass37 = room30.getClass();
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0522");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass38 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0523");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Room room27 = hotel6.findAvailableRoom();
        Room room28 = hotel6.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Room room33 = hotel30.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        hotel35.displayRoomStatus();
        Room room37 = hotel35.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel39.reserveRoom(room57);
        hotel35.reserveRoom(room57);
        hotel35.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        hotel63.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel63.reserveRoom(room81);
        hotel35.reserveRoom(room81);
        hotel30.reserveRoom(room81);
        hotel6.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        Hotel hotel89 = new Hotel(0);
        hotel89.displayRoomStatus();
        hotel89.displayRoomStatus();
        Hotel hotel93 = new Hotel((int) ' ');
        Room room94 = hotel93.findAvailableRoom();
        hotel89.reserveRoom(room94);
        hotel1.reserveRoom(room94);
        Room room97 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass98 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room94);
        org.junit.Assert.assertNull(room97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0524");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room58 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room60 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass61 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0525");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Room room44 = hotel1.findAvailableRoom();
        Room room45 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room45);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0526");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel(10);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) 'a');
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        hotel16.reserveRoom(room43);
        hotel12.reserveRoom(room43);
        hotel9.reserveRoom(room43);
        hotel1.reserveRoom(room43);
        Room room50 = hotel1.findAvailableRoom();
        Hotel hotel52 = new Hotel((int) (short) 10);
        Room room53 = hotel52.findAvailableRoom();
        Room room54 = hotel52.findAvailableRoom();
        hotel1.reserveRoom(room54);
        java.lang.Class<?> wildcardClass56 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0527");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Hotel hotel46 = new Hotel(0);
        hotel46.displayRoomStatus();
        Room room48 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel51 = new Hotel(10);
        Room room52 = hotel51.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        hotel54.displayRoomStatus();
        Room room56 = hotel54.findAvailableRoom();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel54.reserveRoom(room76);
        hotel54.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel54.reserveRoom(room91);
        hotel51.reserveRoom(room91);
        hotel46.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass99 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0528");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) ' ');
        Hotel hotel16 = new Hotel((int) (short) 0);
        Room room17 = hotel16.findAvailableRoom();
        Hotel hotel19 = new Hotel(10);
        Room room20 = hotel19.findAvailableRoom();
        hotel16.reserveRoom(room20);
        hotel14.reserveRoom(room20);
        hotel7.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass26 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0529");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        Room room66 = hotel1.findAvailableRoom();
        Room room67 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass68 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0530");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        Room room15 = hotel9.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel21.reserveRoom(room52);
        hotel17.reserveRoom(room52);
        hotel9.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room60 = hotel1.findAvailableRoom();
        Room room61 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass62 = room61.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNull(room61);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0531");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room65 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        hotel62.displayRoomStatus();
        hotel62.displayRoomStatus();
        Room room69 = hotel62.findAvailableRoom();
        hotel1.reserveRoom(room69);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0532");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        Room room50 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room52 = hotel1.findAvailableRoom();
        Room room53 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNull(room52);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0533");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        Room room29 = hotel1.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) 'a');
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        Room room44 = hotel33.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel33.reserveRoom(room55);
        hotel31.reserveRoom(room55);
        Room room59 = hotel31.findAvailableRoom();
        Hotel hotel61 = new Hotel((-1));
        Hotel hotel63 = new Hotel((int) (byte) -1);
        hotel63.displayRoomStatus();
        Room room65 = hotel63.findAvailableRoom();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        hotel67.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel67.reserveRoom(room85);
        hotel63.reserveRoom(room85);
        hotel61.reserveRoom(room85);
        hotel31.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        java.lang.Class<?> wildcardClass92 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0534");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Room room14 = hotel10.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel10.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        hotel1.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        hotel22.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel31.reserveRoom(room40);
        hotel22.reserveRoom(room40);
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        hotel44.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        hotel53.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel62.reserveRoom(room71);
        hotel53.reserveRoom(room71);
        hotel44.reserveRoom(room71);
        hotel22.reserveRoom(room71);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Room room80 = hotel77.findAvailableRoom();
        hotel22.reserveRoom(room80);
        hotel22.displayRoomStatus();
        hotel22.displayRoomStatus();
        hotel22.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) -1);
        Room room87 = hotel86.findAvailableRoom();
        hotel86.displayRoomStatus();
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel86.reserveRoom(room91);
        hotel22.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        java.lang.Class<?> wildcardClass95 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0535");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel27.reserveRoom(room54);
        hotel5.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        Hotel hotel61 = new Hotel((int) ' ');
        Hotel hotel63 = new Hotel((int) 'a');
        hotel63.displayRoomStatus();
        Room room65 = hotel63.findAvailableRoom();
        hotel61.reserveRoom(room65);
        hotel1.reserveRoom(room65);
        java.lang.Class<?> wildcardClass68 = room65.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0536");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room24 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass25 = room24.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room24);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0537");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) ' ');
        Hotel hotel37 = new Hotel((int) 'a');
        hotel37.displayRoomStatus();
        Room room39 = hotel37.findAvailableRoom();
        hotel35.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel45 = new Hotel(0);
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Room room50 = hotel47.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room50);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0538");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room40 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass41 = room40.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0539");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass64 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0540");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Hotel hotel31 = new Hotel(0);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Room room34 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        hotel31.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) ' ');
        Hotel hotel40 = new Hotel((int) (short) 0);
        Room room41 = hotel40.findAvailableRoom();
        Hotel hotel43 = new Hotel(10);
        Room room44 = hotel43.findAvailableRoom();
        hotel40.reserveRoom(room44);
        hotel38.reserveRoom(room44);
        hotel31.reserveRoom(room44);
        hotel1.reserveRoom(room44);
        Hotel hotel50 = new Hotel(10);
        Room room51 = hotel50.findAvailableRoom();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        hotel53.displayRoomStatus();
        Room room55 = hotel53.findAvailableRoom();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        hotel57.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel57.reserveRoom(room75);
        hotel53.reserveRoom(room75);
        hotel53.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) -1);
        Room room82 = hotel81.findAvailableRoom();
        hotel81.displayRoomStatus();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel81.reserveRoom(room86);
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel81.reserveRoom(room90);
        hotel53.reserveRoom(room90);
        hotel50.reserveRoom(room90);
        Room room94 = hotel50.findAvailableRoom();
        hotel1.reserveRoom(room94);
        java.lang.Class<?> wildcardClass96 = room94.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room94);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0541");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        hotel1.reserveRoom(room70);
        java.lang.Class<?> wildcardClass73 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0542");
        Hotel hotel1 = new Hotel((int) (byte) 100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel9.reserveRoom(room55);
        hotel4.reserveRoom(room55);
        Room room60 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room62 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room64 = hotel4.findAvailableRoom();
        Hotel hotel66 = new Hotel(0);
        hotel66.displayRoomStatus();
        Room room68 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        hotel66.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel66.reserveRoom(room81);
        hotel4.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass87 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0543");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room26 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room26);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0544");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room18 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room22 = hotel1.findAvailableRoom();
        Room room23 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0545");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        Room room19 = hotel1.findAvailableRoom();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel21.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Room room32 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0546");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        hotel28.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel28.reserveRoom(room55);
        hotel6.reserveRoom(room55);
        hotel1.reserveRoom(room55);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass63 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0547");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Room room45 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass46 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0548");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        java.lang.Class<?> wildcardClass37 = room32.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0549");
        Hotel hotel1 = new Hotel((int) (short) 1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Room room11 = hotel7.findAvailableRoom();
        Hotel hotel13 = new Hotel(0);
        hotel13.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel13.reserveRoom(room17);
        Room room19 = hotel13.findAvailableRoom();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel25.reserveRoom(room56);
        hotel21.reserveRoom(room56);
        hotel13.reserveRoom(room56);
        hotel7.reserveRoom(room56);
        hotel1.reserveRoom(room56);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass64 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0550");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Room room34 = hotel31.findAvailableRoom();
        Hotel hotel36 = new Hotel(1);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel40.reserveRoom(room67);
        hotel36.reserveRoom(room67);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Room room74 = hotel36.findAvailableRoom();
        hotel31.reserveRoom(room74);
        Room room76 = hotel31.findAvailableRoom();
        hotel1.reserveRoom(room76);
        java.lang.Class<?> wildcardClass78 = room76.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0551");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        java.lang.Class<?> wildcardClass15 = room13.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0552");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass4 = room3.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0553");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        hotel28.displayRoomStatus();
        Room room30 = hotel28.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel28.reserveRoom(room50);
        hotel28.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        hotel56.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel56.reserveRoom(room74);
        hotel28.reserveRoom(room74);
        hotel6.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        Hotel hotel81 = new Hotel((int) (short) 0);
        Room room82 = hotel81.findAvailableRoom();
        Hotel hotel84 = new Hotel(10);
        Room room85 = hotel84.findAvailableRoom();
        hotel81.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        java.lang.Class<?> wildcardClass88 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0554");
        Hotel hotel1 = new Hotel((int) (short) 10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0555");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        Room room29 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass30 = room29.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0556");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room37 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass38 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0557");
        Hotel hotel1 = new Hotel((int) (short) 100);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel4.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel13.reserveRoom(room22);
        hotel4.reserveRoom(room22);
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel26.reserveRoom(room53);
        hotel4.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        java.lang.Class<?> wildcardClass59 = room53.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0558");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel31.reserveRoom(room53);
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        Room room69 = hotel58.findAvailableRoom();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel71.reserveRoom(room80);
        hotel58.reserveRoom(room80);
        hotel31.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        java.lang.Class<?> wildcardClass85 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0559");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        Room room18 = hotel1.findAvailableRoom();
        Room room19 = hotel1.findAvailableRoom();
        Room room20 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = room20.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0560");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (short) 1);
        hotel11.displayRoomStatus();
        Hotel hotel14 = new Hotel(10);
        Room room15 = hotel14.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel35.reserveRoom(room44);
        hotel26.reserveRoom(room44);
        hotel17.reserveRoom(room44);
        Hotel hotel49 = new Hotel((int) (short) 0);
        hotel49.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        hotel52.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) -1);
        Room room62 = hotel61.findAvailableRoom();
        hotel61.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel61.reserveRoom(room66);
        hotel61.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) -1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel70.reserveRoom(room75);
        Hotel hotel78 = new Hotel((int) (byte) 1);
        Room room79 = hotel78.findAvailableRoom();
        hotel70.reserveRoom(room79);
        hotel61.reserveRoom(room79);
        hotel52.reserveRoom(room79);
        hotel49.reserveRoom(room79);
        hotel17.reserveRoom(room79);
        hotel14.reserveRoom(room79);
        hotel11.reserveRoom(room79);
        hotel1.reserveRoom(room79);
        Room room88 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNull(room88);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0561");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        Room room45 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass46 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0562");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) 'a');
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room5);
        java.lang.Class<?> wildcardClass7 = room5.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0563");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) ' ');
        Hotel hotel48 = new Hotel((int) 'a');
        hotel48.displayRoomStatus();
        Room room50 = hotel48.findAvailableRoom();
        hotel46.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass53 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0564");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        hotel9.displayRoomStatus();
        Room room13 = hotel9.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel15.reserveRoom(room46);
        hotel9.reserveRoom(room46);
        hotel1.reserveRoom(room46);
        java.lang.Class<?> wildcardClass51 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0565");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (short) 0);
        Room room9 = hotel8.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) 'a');
        hotel11.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel11.reserveRoom(room19);
        Room room22 = hotel11.findAvailableRoom();
        Room room23 = hotel11.findAvailableRoom();
        hotel8.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Room room30 = hotel27.findAvailableRoom();
        hotel1.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        hotel33.displayRoomStatus();
        Room room35 = hotel33.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel33.reserveRoom(room55);
        hotel33.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) -1);
        Room room62 = hotel61.findAvailableRoom();
        hotel61.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel61.reserveRoom(room66);
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel61.reserveRoom(room70);
        hotel33.reserveRoom(room70);
        hotel1.reserveRoom(room70);
        java.lang.Class<?> wildcardClass74 = room70.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0566");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room11 = hotel1.findAvailableRoom();
        Room room12 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = room12.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room12);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0567");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        Hotel hotel45 = new Hotel(0);
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Room room50 = hotel47.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel4.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Room room54 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass55 = room54.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0568");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass9 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0569");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass63 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0570");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        Room room37 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0571");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        hotel24.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        hotel24.reserveRoom(room42);
        hotel15.reserveRoom(room42);
        hotel7.reserveRoom(room42);
        hotel4.reserveRoom(room42);
        hotel1.reserveRoom(room42);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0572");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0573");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        java.lang.Class<?> wildcardClass37 = room30.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0574");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room37 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass39 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0575");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass31 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0576");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0577");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0578");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Room room23 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room25 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass26 = room25.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNull(room25);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0579");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0580");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room8);
        Room room10 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass11 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0581");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (short) 0);
        Room room9 = hotel8.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) 'a');
        hotel11.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel11.reserveRoom(room19);
        Room room22 = hotel11.findAvailableRoom();
        Room room23 = hotel11.findAvailableRoom();
        hotel8.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room26 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass27 = room26.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0582");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Room room52 = hotel49.findAvailableRoom();
        hotel46.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Room room58 = hotel55.findAvailableRoom();
        Room room59 = hotel55.findAvailableRoom();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel55.reserveRoom(room62);
        hotel46.reserveRoom(room62);
        hotel1.reserveRoom(room62);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room62);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0583");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (short) 0);
        Room room6 = hotel5.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) 'a');
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel8.reserveRoom(room16);
        Room room19 = hotel8.findAvailableRoom();
        Room room20 = hotel8.findAvailableRoom();
        hotel5.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        Room room23 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass24 = room23.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0584");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0585");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel(10);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) 'a');
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel34.reserveRoom(room43);
        hotel25.reserveRoom(room43);
        hotel16.reserveRoom(room43);
        hotel12.reserveRoom(room43);
        hotel9.reserveRoom(room43);
        hotel1.reserveRoom(room43);
        Room room50 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass51 = room50.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room50);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0586");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) 'a');
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        hotel8.reserveRoom(room32);
        hotel8.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (short) 10);
        Room room37 = hotel36.findAvailableRoom();
        hotel8.reserveRoom(room37);
        hotel1.reserveRoom(room37);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room42 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass43 = room42.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0587");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        hotel13.displayRoomStatus();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel13.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel13.reserveRoom(room59);
        hotel8.reserveRoom(room59);
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (short) 0);
        Room room68 = hotel67.findAvailableRoom();
        Hotel hotel70 = new Hotel(10);
        Room room71 = hotel70.findAvailableRoom();
        hotel67.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room71);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0588");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel10.reserveRoom(room34);
        hotel1.reserveRoom(room34);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0589");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel11.reserveRoom(room60);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel11.reserveRoom(room69);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel11.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room84 = hotel1.findAvailableRoom();
        Hotel hotel86 = new Hotel((int) (byte) -1);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel86.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        Room room97 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room99 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNull(room97);
        org.junit.Assert.assertNull(room99);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0590");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room41 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room43 = hotel38.findAvailableRoom();
        hotel1.reserveRoom(room43);
        java.lang.Class<?> wildcardClass45 = room43.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0591");
        Hotel hotel1 = new Hotel((int) '#');
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel3.displayRoomStatus();
        hotel3.displayRoomStatus();
        Room room31 = hotel3.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        hotel33.displayRoomStatus();
        Room room35 = hotel33.findAvailableRoom();
        Room room36 = hotel33.findAvailableRoom();
        Hotel hotel38 = new Hotel(1);
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel42.reserveRoom(room69);
        hotel38.reserveRoom(room69);
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Room room76 = hotel38.findAvailableRoom();
        hotel33.reserveRoom(room76);
        Room room78 = hotel33.findAvailableRoom();
        hotel3.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        java.lang.Class<?> wildcardClass81 = room78.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0592");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        hotel10.displayRoomStatus();
        Room room12 = hotel10.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        hotel36.displayRoomStatus();
        Room room38 = hotel36.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel36.reserveRoom(room58);
        hotel36.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel64.reserveRoom(room82);
        hotel36.reserveRoom(room82);
        hotel14.reserveRoom(room82);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel14.reserveRoom(room93);
        hotel10.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0593");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room30 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass31 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0594");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass53 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0595");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel27.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel27.reserveRoom(room73);
        hotel5.reserveRoom(room73);
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        hotel5.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        Room room88 = hotel1.findAvailableRoom();
        Room room89 = hotel1.findAvailableRoom();
        Room room90 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass92 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNull(room88);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNull(room90);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0596");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room38 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass39 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0597");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Room room40 = hotel37.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        hotel42.displayRoomStatus();
        Room room44 = hotel42.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        hotel42.reserveRoom(room64);
        hotel42.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) -1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel70.reserveRoom(room75);
        hotel70.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        Hotel hotel87 = new Hotel((int) (byte) 1);
        Room room88 = hotel87.findAvailableRoom();
        hotel79.reserveRoom(room88);
        hotel70.reserveRoom(room88);
        hotel42.reserveRoom(room88);
        hotel37.reserveRoom(room88);
        Room room93 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Room room95 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Room room97 = hotel37.findAvailableRoom();
        hotel1.reserveRoom(room97);
        java.lang.Class<?> wildcardClass99 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNotNull(room95);
        org.junit.Assert.assertNotNull(room97);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0598");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (short) -1);
        hotel45.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        hotel48.displayRoomStatus();
        hotel48.displayRoomStatus();
        Room room53 = hotel48.findAvailableRoom();
        Hotel hotel55 = new Hotel(10);
        Room room56 = hotel55.findAvailableRoom();
        hotel48.reserveRoom(room56);
        hotel45.reserveRoom(room56);
        hotel1.reserveRoom(room56);
        Room room60 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room60);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0599");
        Hotel hotel1 = new Hotel((int) '4');
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Room room43 = hotel1.findAvailableRoom();
        Hotel hotel45 = new Hotel(1);
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel49.reserveRoom(room76);
        hotel45.reserveRoom(room76);
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Room room83 = hotel45.findAvailableRoom();
        hotel1.reserveRoom(room83);
        Room room85 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room85);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0600");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room41 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Room room45 = hotel38.findAvailableRoom();
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (short) 0);
        Room room50 = hotel49.findAvailableRoom();
        Room room51 = hotel49.findAvailableRoom();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        hotel53.displayRoomStatus();
        Room room55 = hotel53.findAvailableRoom();
        Hotel hotel57 = new Hotel((int) (byte) 0);
        Hotel hotel59 = new Hotel(0);
        hotel59.displayRoomStatus();
        Room room61 = hotel59.findAvailableRoom();
        Room room62 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        hotel59.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) ' ');
        Hotel hotel68 = new Hotel((int) (short) 0);
        Room room69 = hotel68.findAvailableRoom();
        Hotel hotel71 = new Hotel(10);
        Room room72 = hotel71.findAvailableRoom();
        hotel68.reserveRoom(room72);
        hotel66.reserveRoom(room72);
        hotel59.reserveRoom(room72);
        hotel57.reserveRoom(room72);
        hotel53.reserveRoom(room72);
        hotel49.reserveRoom(room72);
        hotel1.reserveRoom(room72);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room72);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0601");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (short) 1);
        Hotel hotel13 = new Hotel((int) (short) 0);
        Room room14 = hotel13.findAvailableRoom();
        Hotel hotel16 = new Hotel(10);
        Room room17 = hotel16.findAvailableRoom();
        hotel13.reserveRoom(room17);
        hotel11.reserveRoom(room17);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel23 = new Hotel(10);
        Room room24 = hotel23.findAvailableRoom();
        Room room25 = hotel23.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (short) 0);
        Room room28 = hotel27.findAvailableRoom();
        Room room29 = hotel27.findAvailableRoom();
        Room room30 = hotel27.findAvailableRoom();
        Room room31 = hotel27.findAvailableRoom();
        Hotel hotel33 = new Hotel(0);
        hotel33.displayRoomStatus();
        Room room35 = hotel33.findAvailableRoom();
        Room room36 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        hotel33.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) ' ');
        Hotel hotel42 = new Hotel((int) (short) 0);
        Room room43 = hotel42.findAvailableRoom();
        Hotel hotel45 = new Hotel(10);
        Room room46 = hotel45.findAvailableRoom();
        hotel42.reserveRoom(room46);
        hotel40.reserveRoom(room46);
        hotel33.reserveRoom(room46);
        hotel27.reserveRoom(room46);
        hotel23.reserveRoom(room46);
        hotel11.reserveRoom(room46);
        hotel11.displayRoomStatus();
        Room room54 = hotel11.findAvailableRoom();
        hotel1.reserveRoom(room54);
        java.lang.Class<?> wildcardClass56 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0602");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass60 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0603");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (short) 1);
        Hotel hotel36 = new Hotel((int) (short) 0);
        Room room37 = hotel36.findAvailableRoom();
        Hotel hotel39 = new Hotel(10);
        Room room40 = hotel39.findAvailableRoom();
        hotel36.reserveRoom(room40);
        hotel34.reserveRoom(room40);
        hotel34.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (short) 0);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Room room49 = hotel45.findAvailableRoom();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel51.reserveRoom(room82);
        hotel45.reserveRoom(room82);
        hotel34.reserveRoom(room82);
        hotel1.reserveRoom(room82);
        java.lang.Class<?> wildcardClass88 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0604");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room42 = hotel1.findAvailableRoom();
        Room room43 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room45 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room45);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0605");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room31 = hotel1.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) ' ');
        Hotel hotel35 = new Hotel((int) 'a');
        hotel35.displayRoomStatus();
        Room room37 = hotel35.findAvailableRoom();
        hotel33.reserveRoom(room37);
        hotel1.reserveRoom(room37);
        java.lang.Class<?> wildcardClass40 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0606");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (short) 0);
        Room room18 = hotel17.findAvailableRoom();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        Room room21 = hotel17.findAvailableRoom();
        Hotel hotel23 = new Hotel(0);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Room room26 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        hotel23.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) ' ');
        Hotel hotel32 = new Hotel((int) (short) 0);
        Room room33 = hotel32.findAvailableRoom();
        Hotel hotel35 = new Hotel(10);
        Room room36 = hotel35.findAvailableRoom();
        hotel32.reserveRoom(room36);
        hotel30.reserveRoom(room36);
        hotel23.reserveRoom(room36);
        hotel17.reserveRoom(room36);
        hotel13.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        Room room44 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass45 = room44.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0607");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Room room30 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Room room36 = hotel33.findAvailableRoom();
        Room room37 = hotel33.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel33.reserveRoom(room40);
        Room room42 = hotel33.findAvailableRoom();
        hotel1.reserveRoom(room42);
        java.lang.Class<?> wildcardClass44 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0608");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room61 = hotel1.findAvailableRoom();
        Room room62 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room62);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0609");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(0);
        Room room6 = hotel5.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        Room room17 = hotel8.findAvailableRoom();
        hotel5.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        java.lang.Class<?> wildcardClass20 = room17.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0610");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        Hotel hotel16 = new Hotel((int) 'a');
        hotel16.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel16.reserveRoom(room24);
        Room room27 = hotel16.findAvailableRoom();
        Room room28 = hotel16.findAvailableRoom();
        Room room29 = hotel16.findAvailableRoom();
        hotel1.reserveRoom(room29);
        Room room31 = hotel1.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (short) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Room room36 = hotel33.findAvailableRoom();
        hotel1.reserveRoom(room36);
        java.lang.Class<?> wildcardClass38 = room36.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0611");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room8);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0612");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel9.reserveRoom(room46);
        hotel6.reserveRoom(room46);
        hotel1.reserveRoom(room46);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room53 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass54 = room53.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room53);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0613");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        hotel38.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel38.reserveRoom(room56);
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel38.reserveRoom(room69);
        Room room72 = hotel38.findAvailableRoom();
        Room room73 = hotel38.findAvailableRoom();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Room room78 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Room room80 = hotel75.findAvailableRoom();
        hotel38.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        java.lang.Class<?> wildcardClass83 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0614");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        Hotel hotel16 = new Hotel((int) 'a');
        hotel16.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel16.reserveRoom(room24);
        Room room27 = hotel16.findAvailableRoom();
        Room room28 = hotel16.findAvailableRoom();
        Room room29 = hotel16.findAvailableRoom();
        hotel1.reserveRoom(room29);
        java.lang.Class<?> wildcardClass31 = room29.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0615");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room26 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass27 = room26.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room26);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0616");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel21.reserveRoom(room30);
        hotel12.reserveRoom(room30);
        Room room33 = hotel12.findAvailableRoom();
        Room room34 = hotel12.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Room room39 = hotel36.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        hotel41.displayRoomStatus();
        Room room43 = hotel41.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel54.reserveRoom(room63);
        hotel45.reserveRoom(room63);
        hotel41.reserveRoom(room63);
        hotel41.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        hotel69.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) -1);
        Room room79 = hotel78.findAvailableRoom();
        hotel78.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel78.reserveRoom(room83);
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel78.reserveRoom(room87);
        hotel69.reserveRoom(room87);
        hotel41.reserveRoom(room87);
        hotel36.reserveRoom(room87);
        hotel12.reserveRoom(room87);
        hotel7.reserveRoom(room87);
        hotel1.reserveRoom(room87);
        Room room95 = hotel1.findAvailableRoom();
        Room room96 = hotel1.findAvailableRoom();
        Room room97 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNull(room95);
        org.junit.Assert.assertNull(room96);
        org.junit.Assert.assertNull(room97);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0617");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0618");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel(0);
        hotel6.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel1.reserveRoom(room10);
        Hotel hotel14 = new Hotel((int) (short) 0);
        Room room15 = hotel14.findAvailableRoom();
        Hotel hotel17 = new Hotel(10);
        Room room18 = hotel17.findAvailableRoom();
        hotel14.reserveRoom(room18);
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Room room24 = hotel21.findAvailableRoom();
        hotel14.reserveRoom(room24);
        hotel1.reserveRoom(room24);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) 'a');
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        Room room43 = hotel32.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel32.reserveRoom(room54);
        hotel30.reserveRoom(room54);
        Room room58 = hotel30.findAvailableRoom();
        hotel1.reserveRoom(room58);
        java.lang.Class<?> wildcardClass60 = room58.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0619");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0620");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass6 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0621");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        Room room29 = hotel1.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel31.reserveRoom(room53);
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        Room room69 = hotel58.findAvailableRoom();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel71.reserveRoom(room80);
        hotel58.reserveRoom(room80);
        hotel31.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        java.lang.Class<?> wildcardClass85 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0622");
        Hotel hotel1 = new Hotel((int) 'a');
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(10);
        Room room6 = hotel5.findAvailableRoom();
        Room room7 = hotel5.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        hotel9.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel9.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        Room room41 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Room room43 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room43);
        hotel1.displayRoomStatus();
        Room room46 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room46);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0623");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        Hotel hotel37 = new Hotel((int) 'a');
        hotel37.displayRoomStatus();
        Room room39 = hotel37.findAvailableRoom();
        hotel15.reserveRoom(room39);
        Room room41 = hotel15.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) 'a');
        hotel43.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel43.reserveRoom(room51);
        Room room54 = hotel43.findAvailableRoom();
        Room room55 = hotel43.findAvailableRoom();
        hotel15.reserveRoom(room55);
        hotel1.reserveRoom(room55);
        java.lang.Class<?> wildcardClass58 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0624");
        Hotel hotel1 = new Hotel((int) (byte) 0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (short) 0);
        Room room5 = hotel4.findAvailableRoom();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        hotel4.reserveRoom(room8);
        hotel4.displayRoomStatus();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        hotel15.displayRoomStatus();
        Room room17 = hotel15.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel15.reserveRoom(room37);
        hotel15.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel15.reserveRoom(room52);
        hotel12.reserveRoom(room52);
        Room room56 = hotel12.findAvailableRoom();
        hotel4.reserveRoom(room56);
        hotel1.reserveRoom(room56);
        java.lang.Class<?> wildcardClass59 = room56.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0625");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Room room33 = hotel30.findAvailableRoom();
        Room room34 = hotel30.findAvailableRoom();
        Hotel hotel36 = new Hotel(0);
        hotel36.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel36.reserveRoom(room40);
        Room room42 = hotel36.findAvailableRoom();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        Hotel hotel70 = new Hotel((int) (byte) -1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel70.reserveRoom(room75);
        Hotel hotel78 = new Hotel((int) (byte) 1);
        Room room79 = hotel78.findAvailableRoom();
        hotel70.reserveRoom(room79);
        hotel48.reserveRoom(room79);
        hotel44.reserveRoom(room79);
        hotel36.reserveRoom(room79);
        hotel30.reserveRoom(room79);
        hotel1.reserveRoom(room79);
        java.lang.Class<?> wildcardClass86 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0626");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room45 = hotel1.findAvailableRoom();
        Room room46 = hotel1.findAvailableRoom();
        Hotel hotel48 = new Hotel((-1));
        Hotel hotel50 = new Hotel((int) (byte) -1);
        hotel50.displayRoomStatus();
        Room room52 = hotel50.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        hotel50.reserveRoom(room72);
        hotel48.reserveRoom(room72);
        Hotel hotel78 = new Hotel((int) (byte) 10);
        hotel78.displayRoomStatus();
        hotel78.displayRoomStatus();
        Room room81 = hotel78.findAvailableRoom();
        hotel48.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        java.lang.Class<?> wildcardClass84 = room81.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0627");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel(1);
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        hotel14.reserveRoom(room41);
        hotel10.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) 'a');
        hotel50.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        hotel50.reserveRoom(room58);
        Room room61 = hotel50.findAvailableRoom();
        hotel1.reserveRoom(room61);
        java.lang.Class<?> wildcardClass63 = room61.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0628");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = room4.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0629");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (short) -1);
        hotel45.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        hotel48.displayRoomStatus();
        hotel48.displayRoomStatus();
        Room room53 = hotel48.findAvailableRoom();
        Hotel hotel55 = new Hotel(10);
        Room room56 = hotel55.findAvailableRoom();
        hotel48.reserveRoom(room56);
        hotel45.reserveRoom(room56);
        hotel1.reserveRoom(room56);
        hotel1.displayRoomStatus();
        Room room61 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0630");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel11.reserveRoom(room60);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel11.reserveRoom(room69);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel11.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room84 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass85 = room84.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room84);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0631");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (short) 10);
        Room room30 = hotel29.findAvailableRoom();
        hotel1.reserveRoom(room30);
        java.lang.Class<?> wildcardClass32 = room30.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0632");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        Hotel hotel37 = new Hotel((int) 'a');
        hotel37.displayRoomStatus();
        Room room39 = hotel37.findAvailableRoom();
        hotel15.reserveRoom(room39);
        Room room41 = hotel15.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) 'a');
        hotel43.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel43.reserveRoom(room51);
        Room room54 = hotel43.findAvailableRoom();
        Room room55 = hotel43.findAvailableRoom();
        hotel15.reserveRoom(room55);
        hotel1.reserveRoom(room55);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass59 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0633");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Room room42 = hotel39.findAvailableRoom();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        hotel44.displayRoomStatus();
        Room room46 = hotel44.findAvailableRoom();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        hotel44.reserveRoom(room66);
        hotel44.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        hotel72.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) -1);
        Room room82 = hotel81.findAvailableRoom();
        hotel81.displayRoomStatus();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel81.reserveRoom(room86);
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel81.reserveRoom(room90);
        hotel72.reserveRoom(room90);
        hotel44.reserveRoom(room90);
        hotel39.reserveRoom(room90);
        Room room95 = hotel39.findAvailableRoom();
        hotel1.reserveRoom(room95);
        Room room97 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room95);
        org.junit.Assert.assertNull(room97);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0634");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Room room40 = hotel37.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        hotel42.displayRoomStatus();
        Room room44 = hotel42.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        hotel42.reserveRoom(room64);
        hotel42.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) -1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel70.reserveRoom(room75);
        hotel70.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        Hotel hotel87 = new Hotel((int) (byte) 1);
        Room room88 = hotel87.findAvailableRoom();
        hotel79.reserveRoom(room88);
        hotel70.reserveRoom(room88);
        hotel42.reserveRoom(room88);
        hotel37.reserveRoom(room88);
        Room room93 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Room room95 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Room room97 = hotel37.findAvailableRoom();
        hotel1.reserveRoom(room97);
        java.lang.Class<?> wildcardClass99 = room97.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNotNull(room95);
        org.junit.Assert.assertNotNull(room97);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0635");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        hotel5.displayRoomStatus();
        Room room7 = hotel5.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) 0);
        Hotel hotel11 = new Hotel(0);
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) ' ');
        Hotel hotel20 = new Hotel((int) (short) 0);
        Room room21 = hotel20.findAvailableRoom();
        Hotel hotel23 = new Hotel(10);
        Room room24 = hotel23.findAvailableRoom();
        hotel20.reserveRoom(room24);
        hotel18.reserveRoom(room24);
        hotel11.reserveRoom(room24);
        hotel9.reserveRoom(room24);
        hotel5.reserveRoom(room24);
        hotel1.reserveRoom(room24);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room24);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0636");
        Hotel hotel1 = new Hotel(0);
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Room room12 = hotel9.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        hotel36.displayRoomStatus();
        Room room38 = hotel36.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel36.reserveRoom(room58);
        hotel36.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel64.reserveRoom(room82);
        hotel36.reserveRoom(room82);
        hotel14.reserveRoom(room82);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel14.reserveRoom(room93);
        hotel9.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass99 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0637");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Room room30 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room32 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room32);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0638");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0639");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        Room room51 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass52 = room51.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room51);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0640");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        hotel12.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass46 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0641");
        Hotel hotel1 = new Hotel((int) (short) 10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel27.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel27.reserveRoom(room73);
        hotel5.reserveRoom(room73);
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        hotel5.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0642");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        hotel67.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel67.reserveRoom(room85);
        hotel58.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        Room room90 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass91 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0643");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (short) 0);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        hotel12.displayRoomStatus();
        Room room16 = hotel12.findAvailableRoom();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel12.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0644");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel11.reserveRoom(room60);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel11.reserveRoom(room69);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel11.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        java.lang.Class<?> wildcardClass84 = room80.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0645");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (short) 0);
        Room room25 = hotel24.findAvailableRoom();
        Hotel hotel27 = new Hotel(10);
        Room room28 = hotel27.findAvailableRoom();
        hotel24.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        Room room32 = hotel1.findAvailableRoom();
        Room room33 = hotel1.findAvailableRoom();
        Room room34 = hotel1.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel62.reserveRoom(room71);
        hotel40.reserveRoom(room71);
        hotel36.reserveRoom(room71);
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        hotel36.displayRoomStatus();
        Room room78 = hotel36.findAvailableRoom();
        Hotel hotel80 = new Hotel((int) (short) -1);
        hotel80.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) -1);
        Room room84 = hotel83.findAvailableRoom();
        hotel83.displayRoomStatus();
        hotel83.displayRoomStatus();
        hotel83.displayRoomStatus();
        Room room88 = hotel83.findAvailableRoom();
        Hotel hotel90 = new Hotel(10);
        Room room91 = hotel90.findAvailableRoom();
        hotel83.reserveRoom(room91);
        hotel80.reserveRoom(room91);
        hotel36.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass97 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room88);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0646");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room10 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0647");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Room room27 = hotel6.findAvailableRoom();
        Room room28 = hotel6.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Room room33 = hotel30.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        hotel35.displayRoomStatus();
        Room room37 = hotel35.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel39.reserveRoom(room57);
        hotel35.reserveRoom(room57);
        hotel35.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        hotel63.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel63.reserveRoom(room81);
        hotel35.reserveRoom(room81);
        hotel30.reserveRoom(room81);
        hotel6.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0648");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel29.reserveRoom(room60);
        Room room63 = hotel29.findAvailableRoom();
        Room room64 = hotel29.findAvailableRoom();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room71 = hotel66.findAvailableRoom();
        hotel29.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room71);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0649");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room45 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass46 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0650");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Room room44 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass46 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0651");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        Room room7 = hotel3.findAvailableRoom();
        Room room8 = hotel3.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel10.reserveRoom(room34);
        hotel10.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (short) 10);
        Room room39 = hotel38.findAvailableRoom();
        hotel10.reserveRoom(room39);
        hotel3.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0652");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        hotel10.displayRoomStatus();
        Room room12 = hotel10.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel10.reserveRoom(room32);
        Room room36 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        hotel40.displayRoomStatus();
        Room room42 = hotel40.findAvailableRoom();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        hotel44.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel53.reserveRoom(room62);
        hotel44.reserveRoom(room62);
        hotel40.reserveRoom(room62);
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        Room room78 = hotel67.findAvailableRoom();
        Hotel hotel80 = new Hotel((int) (byte) -1);
        Room room81 = hotel80.findAvailableRoom();
        hotel80.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel80.reserveRoom(room85);
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel80.reserveRoom(room89);
        hotel67.reserveRoom(room89);
        hotel40.reserveRoom(room89);
        hotel10.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        java.lang.Class<?> wildcardClass95 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0653");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel31.reserveRoom(room53);
        hotel31.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel59.reserveRoom(room68);
        hotel31.reserveRoom(room68);
        hotel1.reserveRoom(room68);
        hotel1.displayRoomStatus();
        Room room73 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass74 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0654");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (short) 100);
        Room room31 = hotel30.findAvailableRoom();
        hotel1.reserveRoom(room31);
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass35 = room34.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room34);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0655");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        Room room19 = hotel1.findAvailableRoom();
        Hotel hotel21 = new Hotel(0);
        hotel21.displayRoomStatus();
        Room room23 = hotel21.findAvailableRoom();
        Room room24 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Room room30 = hotel27.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel32.reserveRoom(room54);
        hotel32.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        hotel32.reserveRoom(room78);
        hotel27.reserveRoom(room78);
        Room room83 = hotel27.findAvailableRoom();
        hotel21.reserveRoom(room83);
        hotel1.reserveRoom(room83);
        java.lang.Class<?> wildcardClass86 = room83.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0656");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        Room room60 = hotel1.findAvailableRoom();
        Hotel hotel62 = new Hotel((-1));
        Hotel hotel64 = new Hotel((int) (byte) -1);
        hotel64.displayRoomStatus();
        Room room66 = hotel64.findAvailableRoom();
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        hotel68.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel68.reserveRoom(room86);
        hotel64.reserveRoom(room86);
        hotel62.reserveRoom(room86);
        hotel1.reserveRoom(room86);
        java.lang.Class<?> wildcardClass92 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0657");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        Room room66 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room68 = hotel1.findAvailableRoom();
        Room room69 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNull(room69);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0658");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        Room room37 = hotel1.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Room room45 = hotel42.findAvailableRoom();
        hotel39.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        java.lang.Class<?> wildcardClass48 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0659");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) 'a');
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass8 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0660");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        Room room50 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        hotel53.displayRoomStatus();
        Room room55 = hotel53.findAvailableRoom();
        hotel1.reserveRoom(room55);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room55);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0661");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room20 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel23 = new Hotel((-1));
        Hotel hotel25 = new Hotel((int) (byte) -1);
        hotel25.displayRoomStatus();
        Room room27 = hotel25.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel25.reserveRoom(room47);
        hotel23.reserveRoom(room47);
        Hotel hotel53 = new Hotel(0);
        hotel53.displayRoomStatus();
        Room room55 = hotel53.findAvailableRoom();
        Room room56 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        hotel53.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) ' ');
        Hotel hotel62 = new Hotel((int) (short) 0);
        Room room63 = hotel62.findAvailableRoom();
        Hotel hotel65 = new Hotel(10);
        Room room66 = hotel65.findAvailableRoom();
        hotel62.reserveRoom(room66);
        hotel60.reserveRoom(room66);
        hotel53.reserveRoom(room66);
        hotel23.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room66);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0662");
        Hotel hotel1 = new Hotel((int) (short) 10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel27.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel27.reserveRoom(room73);
        hotel5.reserveRoom(room73);
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        hotel5.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        java.lang.Class<?> wildcardClass88 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0663");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Hotel hotel33 = new Hotel((int) 'a');
        hotel33.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel33.reserveRoom(room41);
        Room room44 = hotel33.findAvailableRoom();
        hotel1.reserveRoom(room44);
        Hotel hotel47 = new Hotel(0);
        hotel47.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel47.reserveRoom(room51);
        Room room53 = hotel47.findAvailableRoom();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        hotel59.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel68.reserveRoom(room77);
        hotel59.reserveRoom(room77);
        Hotel hotel81 = new Hotel((int) (byte) -1);
        Room room82 = hotel81.findAvailableRoom();
        hotel81.displayRoomStatus();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel81.reserveRoom(room86);
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel81.reserveRoom(room90);
        hotel59.reserveRoom(room90);
        hotel55.reserveRoom(room90);
        hotel47.reserveRoom(room90);
        hotel1.reserveRoom(room90);
        Room room96 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass98 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNull(room96);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0664");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Room room40 = hotel1.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        Hotel hotel64 = new Hotel((int) 'a');
        hotel64.displayRoomStatus();
        Room room66 = hotel64.findAvailableRoom();
        hotel42.reserveRoom(room66);
        hotel42.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (short) 10);
        Room room71 = hotel70.findAvailableRoom();
        hotel42.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        java.lang.Class<?> wildcardClass74 = room71.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0665");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        Room room7 = hotel3.findAvailableRoom();
        Room room8 = hotel3.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel10.reserveRoom(room34);
        hotel10.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (short) 10);
        Room room39 = hotel38.findAvailableRoom();
        hotel10.reserveRoom(room39);
        hotel3.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (short) 0);
        Room room46 = hotel45.findAvailableRoom();
        Room room47 = hotel45.findAvailableRoom();
        Room room48 = hotel45.findAvailableRoom();
        Room room49 = hotel45.findAvailableRoom();
        Hotel hotel51 = new Hotel(0);
        hotel51.displayRoomStatus();
        Room room53 = hotel51.findAvailableRoom();
        Room room54 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        hotel51.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) ' ');
        Hotel hotel60 = new Hotel((int) (short) 0);
        Room room61 = hotel60.findAvailableRoom();
        Hotel hotel63 = new Hotel(10);
        Room room64 = hotel63.findAvailableRoom();
        hotel60.reserveRoom(room64);
        hotel58.reserveRoom(room64);
        hotel51.reserveRoom(room64);
        hotel45.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        java.lang.Class<?> wildcardClass70 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0666");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        hotel23.reserveRoom(room45);
        hotel23.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel23.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass76 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0667");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Room room27 = hotel6.findAvailableRoom();
        Room room28 = hotel6.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Room room33 = hotel30.findAvailableRoom();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        hotel35.displayRoomStatus();
        Room room37 = hotel35.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel39.reserveRoom(room57);
        hotel35.reserveRoom(room57);
        hotel35.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        hotel63.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel63.reserveRoom(room81);
        hotel35.reserveRoom(room81);
        hotel30.reserveRoom(room81);
        hotel6.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        Room room88 = hotel1.findAvailableRoom();
        Room room89 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNull(room88);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0668");
        Hotel hotel1 = new Hotel((int) '4');
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass3 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0669");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room45 = hotel1.findAvailableRoom();
        Room room46 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room48 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass49 = room48.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0670");
        Hotel hotel1 = new Hotel((int) '4');
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel3.reserveRoom(room8);
        hotel3.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel12.reserveRoom(room21);
        hotel3.reserveRoom(room21);
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        hotel25.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel25.reserveRoom(room52);
        hotel3.reserveRoom(room52);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Room room61 = hotel58.findAvailableRoom();
        hotel3.reserveRoom(room61);
        hotel1.reserveRoom(room61);
        java.lang.Class<?> wildcardClass64 = room61.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0671");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Room room32 = hotel29.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        hotel34.displayRoomStatus();
        Room room36 = hotel34.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        hotel38.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel38.reserveRoom(room56);
        hotel34.reserveRoom(room56);
        hotel34.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        hotel62.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel71.reserveRoom(room80);
        hotel62.reserveRoom(room80);
        hotel34.reserveRoom(room80);
        hotel29.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room86 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass87 = room86.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room86);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0672");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        hotel10.displayRoomStatus();
        Room room12 = hotel10.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        hotel36.displayRoomStatus();
        Room room38 = hotel36.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel36.reserveRoom(room58);
        hotel36.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel64.reserveRoom(room82);
        hotel36.reserveRoom(room82);
        hotel14.reserveRoom(room82);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel14.reserveRoom(room93);
        hotel10.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass99 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0673");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Room room30 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) ' ');
        Room room34 = hotel33.findAvailableRoom();
        hotel1.reserveRoom(room34);
        java.lang.Class<?> wildcardClass36 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0674");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        Room room29 = hotel1.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (short) 0);
        hotel31.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        hotel34.reserveRoom(room61);
        hotel31.reserveRoom(room61);
        hotel1.reserveRoom(room61);
        java.lang.Class<?> wildcardClass67 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0675");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Hotel hotel31 = new Hotel(0);
        hotel31.displayRoomStatus();
        Room room33 = hotel31.findAvailableRoom();
        Room room34 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        hotel31.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) ' ');
        Hotel hotel40 = new Hotel((int) (short) 0);
        Room room41 = hotel40.findAvailableRoom();
        Hotel hotel43 = new Hotel(10);
        Room room44 = hotel43.findAvailableRoom();
        hotel40.reserveRoom(room44);
        hotel38.reserveRoom(room44);
        hotel31.reserveRoom(room44);
        hotel1.reserveRoom(room44);
        java.lang.Class<?> wildcardClass49 = room44.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0676");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass7 = room6.getClass();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0677");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0678");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass37 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0679");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass9 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0680");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        hotel15.displayRoomStatus();
        Room room17 = hotel15.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel15.reserveRoom(room37);
        hotel15.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        hotel15.reserveRoom(room61);
        hotel10.reserveRoom(room61);
        Room room66 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Room room74 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Room room76 = hotel71.findAvailableRoom();
        Room room77 = hotel71.findAvailableRoom();
        hotel10.reserveRoom(room77);
        Room room79 = hotel10.findAvailableRoom();
        hotel1.reserveRoom(room79);
        java.lang.Class<?> wildcardClass81 = room79.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0681");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel7.reserveRoom(room11);
        Room room13 = hotel7.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel15.reserveRoom(room50);
        hotel7.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) 'a');
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        Room room71 = hotel60.findAvailableRoom();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel60.reserveRoom(room82);
        hotel58.reserveRoom(room82);
        hotel1.reserveRoom(room82);
        hotel1.displayRoomStatus();
        Room room88 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0682");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room43 = hotel1.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (short) -1);
        hotel45.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        hotel48.displayRoomStatus();
        hotel48.displayRoomStatus();
        Room room53 = hotel48.findAvailableRoom();
        Hotel hotel55 = new Hotel(10);
        Room room56 = hotel55.findAvailableRoom();
        hotel48.reserveRoom(room56);
        hotel45.reserveRoom(room56);
        hotel1.reserveRoom(room56);
        java.lang.Class<?> wildcardClass60 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0683");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room31 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0684");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        hotel14.displayRoomStatus();
        Room room16 = hotel14.findAvailableRoom();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel14.reserveRoom(room36);
        hotel14.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel14.reserveRoom(room60);
        hotel1.reserveRoom(room60);
        Room room65 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass66 = room65.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0685");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel9.reserveRoom(room55);
        hotel4.reserveRoom(room55);
        Room room60 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room60);
        java.lang.Class<?> wildcardClass62 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0686");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Room room14 = hotel10.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel10.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Room room20 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass22 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0687");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) ' ');
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0688");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room9 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0689");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Room room45 = hotel1.findAvailableRoom();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel1.reserveRoom(room48);
        java.lang.Class<?> wildcardClass50 = room48.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0690");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (short) 0);
        Room room25 = hotel24.findAvailableRoom();
        Hotel hotel27 = new Hotel(10);
        Room room28 = hotel27.findAvailableRoom();
        hotel24.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        java.lang.Class<?> wildcardClass31 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0691");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        Room room19 = hotel1.findAvailableRoom();
        Room room20 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass21 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0692");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass6 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0693");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = room2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0694");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel(10);
        Room room9 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel15.reserveRoom(room50);
        hotel13.reserveRoom(room50);
        hotel13.displayRoomStatus();
        hotel13.displayRoomStatus();
        Room room57 = hotel13.findAvailableRoom();
        Room room58 = hotel13.findAvailableRoom();
        hotel1.reserveRoom(room58);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass61 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0695");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) 'a');
        hotel29.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel29.reserveRoom(room37);
        Room room40 = hotel29.findAvailableRoom();
        Room room41 = hotel29.findAvailableRoom();
        hotel1.reserveRoom(room41);
        hotel1.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        hotel45.displayRoomStatus();
        Room room47 = hotel45.findAvailableRoom();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel58.reserveRoom(room67);
        hotel49.reserveRoom(room67);
        hotel45.reserveRoom(room67);
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        Room room83 = hotel72.findAvailableRoom();
        Hotel hotel85 = new Hotel((int) (byte) -1);
        Room room86 = hotel85.findAvailableRoom();
        hotel85.displayRoomStatus();
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel85.reserveRoom(room90);
        Hotel hotel93 = new Hotel((int) (byte) 1);
        Room room94 = hotel93.findAvailableRoom();
        hotel85.reserveRoom(room94);
        hotel72.reserveRoom(room94);
        hotel45.reserveRoom(room94);
        hotel1.reserveRoom(room94);
        Room room99 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room94);
        org.junit.Assert.assertNull(room99);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0696");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) (short) 0);
        Room room7 = hotel6.findAvailableRoom();
        Hotel hotel9 = new Hotel(10);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel4.reserveRoom(room10);
        Room room13 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room13);
        Hotel hotel16 = new Hotel((int) 'a');
        hotel16.displayRoomStatus();
        Room room18 = hotel16.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel20.reserveRoom(room47);
        hotel16.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        hotel1.displayRoomStatus();
        Room room54 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room54);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0697");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        hotel12.displayRoomStatus();
        Room room14 = hotel12.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel12.reserveRoom(room34);
        hotel12.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel12.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        Room room63 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room63);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) 'a');
        hotel69.displayRoomStatus();
        Room room71 = hotel69.findAvailableRoom();
        hotel1.reserveRoom(room71);
        hotel1.displayRoomStatus();
        Room room74 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room74);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0698");
        Hotel hotel1 = new Hotel((int) (byte) 100);
        Hotel hotel3 = new Hotel((int) (byte) 10);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        hotel7.reserveRoom(room34);
        Hotel hotel39 = new Hotel((int) (short) 0);
        hotel39.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel42.reserveRoom(room69);
        hotel39.reserveRoom(room69);
        hotel7.reserveRoom(room69);
        hotel3.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0699");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        hotel35.displayRoomStatus();
        Room room37 = hotel35.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        hotel39.displayRoomStatus();
        Room room41 = hotel39.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        hotel39.reserveRoom(room61);
        Room room65 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        hotel39.displayRoomStatus();
        Room room68 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        hotel39.displayRoomStatus();
        hotel39.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Room room79 = hotel76.findAvailableRoom();
        hotel73.reserveRoom(room79);
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Room room85 = hotel82.findAvailableRoom();
        Room room86 = hotel82.findAvailableRoom();
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel82.reserveRoom(room89);
        hotel73.reserveRoom(room89);
        hotel39.reserveRoom(room89);
        hotel35.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        java.lang.Class<?> wildcardClass95 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0700");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) ' ');
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel30.reserveRoom(room34);
        hotel1.reserveRoom(room34);
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        hotel38.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel38.reserveRoom(room56);
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        hotel69.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) -1);
        Room room79 = hotel78.findAvailableRoom();
        hotel78.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel78.reserveRoom(room83);
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel78.reserveRoom(room87);
        hotel69.reserveRoom(room87);
        hotel60.reserveRoom(room87);
        hotel38.reserveRoom(room87);
        hotel1.reserveRoom(room87);
        java.lang.Class<?> wildcardClass93 = room87.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0701");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel12.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel21.reserveRoom(room30);
        hotel12.reserveRoom(room30);
        Room room33 = hotel12.findAvailableRoom();
        Room room34 = hotel12.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Room room39 = hotel36.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        hotel41.displayRoomStatus();
        Room room43 = hotel41.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel54.reserveRoom(room63);
        hotel45.reserveRoom(room63);
        hotel41.reserveRoom(room63);
        hotel41.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        hotel69.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) -1);
        Room room79 = hotel78.findAvailableRoom();
        hotel78.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel78.reserveRoom(room83);
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel78.reserveRoom(room87);
        hotel69.reserveRoom(room87);
        hotel41.reserveRoom(room87);
        hotel36.reserveRoom(room87);
        hotel12.reserveRoom(room87);
        hotel7.reserveRoom(room87);
        hotel1.reserveRoom(room87);
        hotel1.displayRoomStatus();
        Room room96 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNull(room96);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0702");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass42 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0703");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel((int) (byte) 100);
        hotel6.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Room room12 = hotel9.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        hotel14.displayRoomStatus();
        Room room16 = hotel14.findAvailableRoom();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel14.reserveRoom(room36);
        hotel14.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel14.reserveRoom(room60);
        hotel9.reserveRoom(room60);
        Room room65 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Room room67 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Room room69 = hotel9.findAvailableRoom();
        Hotel hotel71 = new Hotel(0);
        hotel71.displayRoomStatus();
        Room room73 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        hotel71.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel71.reserveRoom(room86);
        hotel9.reserveRoom(room86);
        hotel6.reserveRoom(room86);
        Room room91 = hotel6.findAvailableRoom();
        hotel1.reserveRoom(room91);
        java.lang.Class<?> wildcardClass93 = room91.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0704");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass8 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0705");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        Room room60 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass61 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0706");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel11.reserveRoom(room60);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel11.reserveRoom(room69);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel11.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room84 = hotel1.findAvailableRoom();
        Hotel hotel86 = new Hotel((int) (byte) -1);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel86.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        java.lang.Class<?> wildcardClass97 = room93.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0707");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0708");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel11.reserveRoom(room60);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel11.reserveRoom(room69);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel11.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room84 = hotel1.findAvailableRoom();
        Hotel hotel86 = new Hotel((int) (byte) -1);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel86.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        Room room97 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass98 = room97.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNull(room97);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0709");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        hotel23.reserveRoom(room45);
        hotel23.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel23.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass77 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0710");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass9 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0711");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Room room15 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Room room21 = hotel18.findAvailableRoom();
        Room room22 = hotel18.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel18.reserveRoom(room25);
        hotel9.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (short) 0);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Room room32 = hotel29.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) (short) 0);
        Room room35 = hotel34.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) 'a');
        hotel37.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel37.reserveRoom(room45);
        hotel37.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel37.reserveRoom(room85);
        hotel34.reserveRoom(room85);
        hotel29.reserveRoom(room85);
        hotel9.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        Room room94 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0712");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (short) 0);
        Room room8 = hotel7.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) 'a');
        hotel10.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel10.reserveRoom(room18);
        hotel10.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel27.reserveRoom(room58);
        hotel23.reserveRoom(room58);
        hotel10.reserveRoom(room58);
        hotel7.reserveRoom(room58);
        hotel1.reserveRoom(room58);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0713");
        Hotel hotel1 = new Hotel((int) (byte) 0);
        Hotel hotel3 = new Hotel(0);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        hotel3.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) ' ');
        Hotel hotel12 = new Hotel((int) (short) 0);
        Room room13 = hotel12.findAvailableRoom();
        Hotel hotel15 = new Hotel(10);
        Room room16 = hotel15.findAvailableRoom();
        hotel12.reserveRoom(room16);
        hotel10.reserveRoom(room16);
        hotel3.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        java.lang.Class<?> wildcardClass21 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0714");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel41.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        java.lang.Class<?> wildcardClass91 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0715");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) 0);
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) ' ');
        Hotel hotel16 = new Hotel((int) (short) 0);
        Room room17 = hotel16.findAvailableRoom();
        Hotel hotel19 = new Hotel(10);
        Room room20 = hotel19.findAvailableRoom();
        hotel16.reserveRoom(room20);
        hotel14.reserveRoom(room20);
        hotel7.reserveRoom(room20);
        hotel5.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        Room room26 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room26);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0716");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        Room room58 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0717");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        Room room37 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room37);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0718");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Room room40 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass43 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0719");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        Room room57 = hotel1.findAvailableRoom();
        Hotel hotel59 = new Hotel((int) (short) 0);
        Room room60 = hotel59.findAvailableRoom();
        Hotel hotel62 = new Hotel(10);
        Room room63 = hotel62.findAvailableRoom();
        hotel59.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        java.lang.Class<?> wildcardClass66 = room63.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0720");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        Room room12 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass13 = room12.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0721");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0722");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass13 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0723");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) 'a');
        hotel29.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel29.reserveRoom(room37);
        Room room40 = hotel29.findAvailableRoom();
        Room room41 = hotel29.findAvailableRoom();
        hotel1.reserveRoom(room41);
        hotel1.displayRoomStatus();
        Room room44 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room44);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0724");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel((int) 'a');
        hotel6.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        hotel6.reserveRoom(room14);
        hotel6.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel23.reserveRoom(room54);
        hotel19.reserveRoom(room54);
        hotel6.reserveRoom(room54);
        Hotel hotel60 = new Hotel((int) (short) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel6.reserveRoom(room61);
        hotel1.reserveRoom(room61);
        java.lang.Class<?> wildcardClass64 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0725");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        Room room11 = hotel1.findAvailableRoom();
        Room room12 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room11);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0726");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Room room36 = hotel9.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (short) 100);
        Room room39 = hotel38.findAvailableRoom();
        hotel9.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        java.lang.Class<?> wildcardClass42 = room39.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0727");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room58 = hotel1.findAvailableRoom();
        Room room59 = hotel1.findAvailableRoom();
        Room room60 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNull(room60);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0728");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel(1);
        hotel22.displayRoomStatus();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel26.reserveRoom(room53);
        hotel22.reserveRoom(room53);
        hotel13.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        Hotel hotel61 = new Hotel(1);
        hotel61.displayRoomStatus();
        hotel61.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) ' ');
        Hotel hotel67 = new Hotel((int) 'a');
        hotel67.displayRoomStatus();
        Room room69 = hotel67.findAvailableRoom();
        hotel65.reserveRoom(room69);
        hotel61.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        hotel1.displayRoomStatus();
        Room room74 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass75 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0729");
        Hotel hotel1 = new Hotel((int) (short) -1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) 'a');
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel6.reserveRoom(room15);
        Room room17 = hotel6.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel4.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Hotel hotel34 = new Hotel(0);
        hotel34.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel34.reserveRoom(room38);
        Room room40 = hotel34.findAvailableRoom();
        Hotel hotel42 = new Hotel(0);
        hotel42.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel42.reserveRoom(room46);
        Room room48 = hotel42.findAvailableRoom();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel42.reserveRoom(room85);
        hotel34.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room94 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0730");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass4 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0731");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) 'a');
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) 'a');
        hotel13.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel13.reserveRoom(room21);
        Room room24 = hotel13.findAvailableRoom();
        Room room25 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room25);
        hotel6.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Room room29 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room25);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0732");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Room room12 = hotel9.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Room room35 = hotel14.findAvailableRoom();
        Room room36 = hotel14.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Room room41 = hotel38.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        hotel43.displayRoomStatus();
        Room room45 = hotel43.findAvailableRoom();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        hotel47.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel56.reserveRoom(room65);
        hotel47.reserveRoom(room65);
        hotel43.reserveRoom(room65);
        hotel43.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        hotel71.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) -1);
        Room room81 = hotel80.findAvailableRoom();
        hotel80.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel80.reserveRoom(room85);
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel80.reserveRoom(room89);
        hotel71.reserveRoom(room89);
        hotel43.reserveRoom(room89);
        hotel38.reserveRoom(room89);
        hotel14.reserveRoom(room89);
        hotel9.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        java.lang.Class<?> wildcardClass97 = room89.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0733");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0734");
        Hotel hotel1 = new Hotel((int) (byte) 0);
        Hotel hotel3 = new Hotel(0);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        hotel3.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) ' ');
        Hotel hotel12 = new Hotel((int) (short) 0);
        Room room13 = hotel12.findAvailableRoom();
        Hotel hotel15 = new Hotel(10);
        Room room16 = hotel15.findAvailableRoom();
        hotel12.reserveRoom(room16);
        hotel10.reserveRoom(room16);
        hotel3.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        Room room21 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room23 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room23);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0735");
        Hotel hotel1 = new Hotel((int) (short) 100);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(1);
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        hotel7.reserveRoom(room29);
        hotel7.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel35.reserveRoom(room44);
        hotel7.reserveRoom(room44);
        Hotel hotel48 = new Hotel(0);
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Room room53 = hotel50.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel7.reserveRoom(room53);
        hotel4.reserveRoom(room53);
        Room room57 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room57);
        java.lang.Class<?> wildcardClass59 = room57.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0736");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel1.reserveRoom(room11);
        hotel1.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) ' ');
        Hotel hotel18 = new Hotel((int) 'a');
        hotel18.displayRoomStatus();
        Room room20 = hotel18.findAvailableRoom();
        hotel16.reserveRoom(room20);
        Room room22 = hotel16.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) 'a');
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        Room room37 = hotel26.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel39.reserveRoom(room48);
        hotel26.reserveRoom(room48);
        hotel24.reserveRoom(room48);
        Room room52 = hotel24.findAvailableRoom();
        Hotel hotel54 = new Hotel((-1));
        Hotel hotel56 = new Hotel((int) (byte) -1);
        hotel56.displayRoomStatus();
        Room room58 = hotel56.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        hotel56.reserveRoom(room78);
        hotel54.reserveRoom(room78);
        hotel24.reserveRoom(room78);
        hotel16.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        java.lang.Class<?> wildcardClass86 = room78.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0737");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Room room40 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room44 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0738");
        Hotel hotel1 = new Hotel((int) ' ');
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0739");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel30 = new Hotel(0);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel35 = new Hotel(10);
        Room room36 = hotel35.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        hotel38.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel38.reserveRoom(room75);
        hotel35.reserveRoom(room75);
        hotel30.reserveRoom(room75);
        hotel1.reserveRoom(room75);
        java.lang.Class<?> wildcardClass81 = room75.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0740");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        hotel1.displayRoomStatus();
        Room room20 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = room20.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room20);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0741");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        hotel14.displayRoomStatus();
        Room room16 = hotel14.findAvailableRoom();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel14.reserveRoom(room36);
        hotel14.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel14.reserveRoom(room60);
        hotel1.reserveRoom(room60);
        Room room65 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass66 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0742");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        Room room13 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass14 = room13.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0743");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass6 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0744");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room3);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0745");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel59 = new Hotel(10);
        hotel59.displayRoomStatus();
        Room room61 = hotel59.findAvailableRoom();
        Hotel hotel63 = new Hotel(0);
        Room room64 = hotel63.findAvailableRoom();
        Hotel hotel66 = new Hotel((int) ' ');
        Hotel hotel68 = new Hotel((int) (short) 0);
        Room room69 = hotel68.findAvailableRoom();
        Hotel hotel71 = new Hotel(10);
        Room room72 = hotel71.findAvailableRoom();
        hotel68.reserveRoom(room72);
        hotel66.reserveRoom(room72);
        Room room75 = hotel66.findAvailableRoom();
        hotel63.reserveRoom(room75);
        hotel59.reserveRoom(room75);
        Room room78 = hotel59.findAvailableRoom();
        hotel1.reserveRoom(room78);
        Room room80 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass81 = room80.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room80);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0746");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel14.reserveRoom(room49);
        hotel11.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        Hotel hotel56 = new Hotel((int) (byte) -1);
        hotel56.displayRoomStatus();
        Room room58 = hotel56.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        hotel56.reserveRoom(room78);
        hotel56.displayRoomStatus();
        hotel56.displayRoomStatus();
        Room room84 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room86 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel89 = new Hotel((int) (short) 100);
        hotel89.displayRoomStatus();
        Room room91 = hotel89.findAvailableRoom();
        hotel56.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        java.lang.Class<?> wildcardClass94 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room86);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0747");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) ' ');
        Hotel hotel37 = new Hotel((int) 'a');
        hotel37.displayRoomStatus();
        Room room39 = hotel37.findAvailableRoom();
        hotel35.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (short) 10);
        Room room45 = hotel44.findAvailableRoom();
        Room room46 = hotel44.findAvailableRoom();
        hotel1.reserveRoom(room46);
        java.lang.Class<?> wildcardClass48 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0748");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Room room20 = hotel17.findAvailableRoom();
        Room room21 = hotel17.findAvailableRoom();
        Hotel hotel23 = new Hotel(0);
        hotel23.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel23.reserveRoom(room27);
        Room room29 = hotel23.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel35.reserveRoom(room66);
        hotel31.reserveRoom(room66);
        hotel23.reserveRoom(room66);
        hotel17.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        Hotel hotel74 = new Hotel((int) (short) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel74.displayRoomStatus();
        Room room77 = hotel74.findAvailableRoom();
        hotel1.reserveRoom(room77);
        hotel1.displayRoomStatus();
        Room room80 = hotel1.findAvailableRoom();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel85.displayRoomStatus();
        Room room88 = hotel85.findAvailableRoom();
        hotel82.reserveRoom(room88);
        hotel1.reserveRoom(room88);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room88);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0749");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (short) 0);
        Room room18 = hotel17.findAvailableRoom();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        Room room21 = hotel17.findAvailableRoom();
        Hotel hotel23 = new Hotel(0);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Room room26 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        hotel23.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) ' ');
        Hotel hotel32 = new Hotel((int) (short) 0);
        Room room33 = hotel32.findAvailableRoom();
        Hotel hotel35 = new Hotel(10);
        Room room36 = hotel35.findAvailableRoom();
        hotel32.reserveRoom(room36);
        hotel30.reserveRoom(room36);
        hotel23.reserveRoom(room36);
        hotel17.reserveRoom(room36);
        hotel13.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass44 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0750");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room8);
        Hotel hotel11 = new Hotel((int) (byte) -1);
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        hotel11.reserveRoom(room33);
        hotel11.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Room room42 = hotel39.findAvailableRoom();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        hotel44.displayRoomStatus();
        Room room46 = hotel44.findAvailableRoom();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        hotel44.reserveRoom(room66);
        hotel44.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        hotel72.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) -1);
        Room room82 = hotel81.findAvailableRoom();
        hotel81.displayRoomStatus();
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel81.reserveRoom(room86);
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel81.reserveRoom(room90);
        hotel72.reserveRoom(room90);
        hotel44.reserveRoom(room90);
        hotel39.reserveRoom(room90);
        hotel11.reserveRoom(room90);
        hotel1.reserveRoom(room90);
        hotel1.displayRoomStatus();
        Room room98 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room98);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0751");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (short) 1);
        Hotel hotel13 = new Hotel((int) (short) 0);
        Room room14 = hotel13.findAvailableRoom();
        Hotel hotel16 = new Hotel(10);
        Room room17 = hotel16.findAvailableRoom();
        hotel13.reserveRoom(room17);
        hotel11.reserveRoom(room17);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel23 = new Hotel(10);
        Room room24 = hotel23.findAvailableRoom();
        Room room25 = hotel23.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (short) 0);
        Room room28 = hotel27.findAvailableRoom();
        Room room29 = hotel27.findAvailableRoom();
        Room room30 = hotel27.findAvailableRoom();
        Room room31 = hotel27.findAvailableRoom();
        Hotel hotel33 = new Hotel(0);
        hotel33.displayRoomStatus();
        Room room35 = hotel33.findAvailableRoom();
        Room room36 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        hotel33.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) ' ');
        Hotel hotel42 = new Hotel((int) (short) 0);
        Room room43 = hotel42.findAvailableRoom();
        Hotel hotel45 = new Hotel(10);
        Room room46 = hotel45.findAvailableRoom();
        hotel42.reserveRoom(room46);
        hotel40.reserveRoom(room46);
        hotel33.reserveRoom(room46);
        hotel27.reserveRoom(room46);
        hotel23.reserveRoom(room46);
        hotel11.reserveRoom(room46);
        hotel11.displayRoomStatus();
        Room room54 = hotel11.findAvailableRoom();
        hotel1.reserveRoom(room54);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass57 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0752");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        hotel13.displayRoomStatus();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel13.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel13.reserveRoom(room59);
        hotel8.reserveRoom(room59);
        hotel1.reserveRoom(room59);
        Room room65 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass67 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0753");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass39 = hotel1.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0754");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) ' ');
        Hotel hotel7 = new Hotel((int) 'a');
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        hotel5.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        Hotel hotel14 = new Hotel((-1));
        Hotel hotel16 = new Hotel(1);
        hotel16.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        hotel19.displayRoomStatus();
        Room room21 = hotel19.findAvailableRoom();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        hotel19.reserveRoom(room41);
        hotel19.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel19.reserveRoom(room56);
        Hotel hotel60 = new Hotel(0);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room65 = hotel62.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel19.reserveRoom(room65);
        hotel16.reserveRoom(room65);
        hotel14.reserveRoom(room65);
        hotel1.reserveRoom(room65);
        java.lang.Class<?> wildcardClass71 = room65.getClass();
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0755");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        java.lang.Class<?> wildcardClass2 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0756");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (short) 0);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        hotel12.displayRoomStatus();
        Room room16 = hotel12.findAvailableRoom();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel12.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass55 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0757");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        Room room10 = hotel1.findAvailableRoom();
        Room room11 = hotel1.findAvailableRoom();
        Hotel hotel13 = new Hotel(1);
        hotel13.displayRoomStatus();
        Hotel hotel16 = new Hotel(10);
        Room room17 = hotel16.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel27.reserveRoom(room54);
        hotel19.reserveRoom(room54);
        hotel16.reserveRoom(room54);
        hotel13.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0758");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Room room42 = hotel39.findAvailableRoom();
        Room room43 = hotel39.findAvailableRoom();
        hotel1.reserveRoom(room43);
        java.lang.Class<?> wildcardClass45 = room43.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0759");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        hotel7.reserveRoom(room29);
        hotel7.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel35.reserveRoom(room44);
        hotel7.reserveRoom(room44);
        Hotel hotel48 = new Hotel(0);
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Room room53 = hotel50.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel7.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        Room room57 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass58 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0760");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Room room32 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (short) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Room room39 = hotel36.findAvailableRoom();
        hotel1.reserveRoom(room39);
        java.lang.Class<?> wildcardClass41 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0761");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room37 = hotel1.findAvailableRoom();
        Room room38 = hotel1.findAvailableRoom();
        Room room39 = hotel1.findAvailableRoom();
        Room room40 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass41 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0762");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (short) 100);
        Room room31 = hotel30.findAvailableRoom();
        hotel1.reserveRoom(room31);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass34 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0763");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        hotel7.reserveRoom(room29);
        hotel7.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel35.reserveRoom(room44);
        hotel7.reserveRoom(room44);
        Hotel hotel48 = new Hotel(0);
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Room room53 = hotel50.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel7.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        java.lang.Class<?> wildcardClass57 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0764");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        Room room29 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (short) 0);
        Room room33 = hotel32.findAvailableRoom();
        Room room34 = hotel32.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        hotel36.displayRoomStatus();
        Room room38 = hotel36.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) (byte) 0);
        Hotel hotel42 = new Hotel(0);
        hotel42.displayRoomStatus();
        Room room44 = hotel42.findAvailableRoom();
        Room room45 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) ' ');
        Hotel hotel51 = new Hotel((int) (short) 0);
        Room room52 = hotel51.findAvailableRoom();
        Hotel hotel54 = new Hotel(10);
        Room room55 = hotel54.findAvailableRoom();
        hotel51.reserveRoom(room55);
        hotel49.reserveRoom(room55);
        hotel42.reserveRoom(room55);
        hotel40.reserveRoom(room55);
        hotel36.reserveRoom(room55);
        hotel32.reserveRoom(room55);
        hotel1.reserveRoom(room55);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room55);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0765");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel3.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        hotel44.displayRoomStatus();
        Room room46 = hotel44.findAvailableRoom();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        hotel44.reserveRoom(room66);
        hotel3.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0766");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room64 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room66 = hotel1.findAvailableRoom();
        Room room67 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNull(room67);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0767");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        Room room37 = hotel1.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (short) 1);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        hotel41.displayRoomStatus();
        Room room43 = hotel41.findAvailableRoom();
        Room room44 = hotel41.findAvailableRoom();
        Room room45 = hotel41.findAvailableRoom();
        Room room46 = hotel41.findAvailableRoom();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        Hotel hotel70 = new Hotel((int) 'a');
        hotel70.displayRoomStatus();
        Room room72 = hotel70.findAvailableRoom();
        hotel48.reserveRoom(room72);
        hotel48.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (short) 10);
        Room room77 = hotel76.findAvailableRoom();
        hotel48.reserveRoom(room77);
        hotel41.reserveRoom(room77);
        hotel39.reserveRoom(room77);
        hotel1.reserveRoom(room77);
        java.lang.Class<?> wildcardClass82 = room77.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0768");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        hotel6.reserveRoom(room33);
        Hotel hotel38 = new Hotel((int) (short) 0);
        hotel38.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        hotel50.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) -1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel59.reserveRoom(room64);
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel59.reserveRoom(room68);
        hotel50.reserveRoom(room68);
        hotel41.reserveRoom(room68);
        hotel38.reserveRoom(room68);
        hotel6.reserveRoom(room68);
        Hotel hotel75 = new Hotel((int) ' ');
        Hotel hotel77 = new Hotel((int) (short) 0);
        Room room78 = hotel77.findAvailableRoom();
        Hotel hotel80 = new Hotel(10);
        Room room81 = hotel80.findAvailableRoom();
        hotel77.reserveRoom(room81);
        hotel75.reserveRoom(room81);
        hotel6.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        Room room86 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room81);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0769");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Room room36 = hotel9.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (short) 100);
        Room room39 = hotel38.findAvailableRoom();
        hotel9.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (short) 10);
        Room room44 = hotel43.findAvailableRoom();
        Room room45 = hotel43.findAvailableRoom();
        hotel1.reserveRoom(room45);
        Room room47 = hotel1.findAvailableRoom();
        Hotel hotel49 = new Hotel((-1));
        Hotel hotel51 = new Hotel((int) (byte) -1);
        hotel51.displayRoomStatus();
        Room room53 = hotel51.findAvailableRoom();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel51.reserveRoom(room73);
        hotel49.reserveRoom(room73);
        hotel1.reserveRoom(room73);
        java.lang.Class<?> wildcardClass79 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0770");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (short) 0);
        Room room25 = hotel24.findAvailableRoom();
        Hotel hotel27 = new Hotel(10);
        Room room28 = hotel27.findAvailableRoom();
        hotel24.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Room room36 = hotel33.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        hotel38.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        hotel66.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel75.reserveRoom(room84);
        hotel66.reserveRoom(room84);
        hotel38.reserveRoom(room84);
        hotel33.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        java.lang.Class<?> wildcardClass90 = room84.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0771");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel(0);
        hotel6.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel1.reserveRoom(room10);
        Hotel hotel14 = new Hotel((int) (short) 0);
        Room room15 = hotel14.findAvailableRoom();
        Hotel hotel17 = new Hotel(10);
        Room room18 = hotel17.findAvailableRoom();
        hotel14.reserveRoom(room18);
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Room room24 = hotel21.findAvailableRoom();
        hotel14.reserveRoom(room24);
        hotel1.reserveRoom(room24);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0772");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room24 = hotel1.findAvailableRoom();
        Hotel hotel26 = new Hotel((int) 'a');
        hotel26.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel26.reserveRoom(room34);
        hotel26.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel43.reserveRoom(room74);
        hotel39.reserveRoom(room74);
        hotel26.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        java.lang.Class<?> wildcardClass80 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0773");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room45 = hotel1.findAvailableRoom();
        Room room46 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room48 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room48);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0774");
        Hotel hotel1 = new Hotel(100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (short) -1);
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Room room12 = hotel7.findAvailableRoom();
        Hotel hotel14 = new Hotel(10);
        Room room15 = hotel14.findAvailableRoom();
        hotel7.reserveRoom(room15);
        hotel4.reserveRoom(room15);
        hotel1.reserveRoom(room15);
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel42.reserveRoom(room51);
        hotel33.reserveRoom(room51);
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel33.reserveRoom(room64);
        hotel29.reserveRoom(room64);
        hotel20.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        java.lang.Class<?> wildcardClass70 = room64.getClass();
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0775");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Hotel hotel42 = new Hotel(0);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Room room47 = hotel44.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        java.lang.Class<?> wildcardClass50 = room47.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0776");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room65 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Room room67 = hotel62.findAvailableRoom();
        Room room68 = hotel62.findAvailableRoom();
        hotel1.reserveRoom(room68);
        Room room70 = hotel1.findAvailableRoom();
        Room room71 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass72 = room71.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0777");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room63 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass64 = room63.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room63);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0778");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0779");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        Room room15 = hotel9.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel21.reserveRoom(room52);
        hotel17.reserveRoom(room52);
        hotel9.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room58 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass59 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0780");
        Hotel hotel1 = new Hotel((int) (short) -1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) 'a');
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel6.reserveRoom(room15);
        Room room17 = hotel6.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel4.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Room room33 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room35 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass36 = room35.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room35);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0781");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room8);
        java.lang.Class<?> wildcardClass10 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0782");
        Hotel hotel1 = new Hotel((int) (byte) 100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) ' ');
        Hotel hotel6 = new Hotel((int) 'a');
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        hotel4.reserveRoom(room8);
        Room room10 = hotel4.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) 'a');
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        Room room25 = hotel14.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel14.reserveRoom(room36);
        hotel12.reserveRoom(room36);
        Room room40 = hotel12.findAvailableRoom();
        Hotel hotel42 = new Hotel((-1));
        Hotel hotel44 = new Hotel((int) (byte) -1);
        hotel44.displayRoomStatus();
        Room room46 = hotel44.findAvailableRoom();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        hotel44.reserveRoom(room66);
        hotel42.reserveRoom(room66);
        hotel12.reserveRoom(room66);
        hotel4.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0783");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (short) 0);
        Room room6 = hotel5.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) 'a');
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel8.reserveRoom(room16);
        Room room19 = hotel8.findAvailableRoom();
        Room room20 = hotel8.findAvailableRoom();
        hotel5.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room20);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0784");
        Hotel hotel1 = new Hotel((int) (short) -1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) 'a');
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel6.reserveRoom(room15);
        Room room17 = hotel6.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel4.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Hotel hotel34 = new Hotel(0);
        hotel34.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel34.reserveRoom(room38);
        Room room40 = hotel34.findAvailableRoom();
        Hotel hotel42 = new Hotel(0);
        hotel42.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel42.reserveRoom(room46);
        Room room48 = hotel42.findAvailableRoom();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel42.reserveRoom(room85);
        hotel34.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        Room room92 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass93 = hotel1.getClass();
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNull(room92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0785");
        Hotel hotel1 = new Hotel((-1));
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(0);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        hotel4.displayRoomStatus();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel4.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room13);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0786");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room18 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass21 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0787");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        Room room15 = hotel9.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel21.reserveRoom(room52);
        hotel17.reserveRoom(room52);
        hotel9.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        java.lang.Class<?> wildcardClass58 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0788");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) ' ');
        Hotel hotel16 = new Hotel((int) (short) 0);
        Room room17 = hotel16.findAvailableRoom();
        Hotel hotel19 = new Hotel(10);
        Room room20 = hotel19.findAvailableRoom();
        hotel16.reserveRoom(room20);
        hotel14.reserveRoom(room20);
        hotel7.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        Room room25 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass26 = room25.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0789");
        Hotel hotel1 = new Hotel((int) (byte) 100);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        hotel9.displayRoomStatus();
        Room room11 = hotel9.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel9.reserveRoom(room31);
        hotel9.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel9.reserveRoom(room55);
        hotel4.reserveRoom(room55);
        Room room60 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room62 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room64 = hotel4.findAvailableRoom();
        Hotel hotel66 = new Hotel(0);
        hotel66.displayRoomStatus();
        Room room68 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        hotel66.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) -1);
        Room room73 = hotel72.findAvailableRoom();
        hotel72.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel72.reserveRoom(room77);
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel72.reserveRoom(room81);
        hotel66.reserveRoom(room81);
        hotel4.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        Room room86 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass87 = room86.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0790");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) 100);
        hotel10.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel15.reserveRoom(room50);
        hotel15.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        hotel56.displayRoomStatus();
        Room room58 = hotel56.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        hotel56.reserveRoom(room78);
        hotel15.reserveRoom(room78);
        hotel13.reserveRoom(room78);
        hotel10.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0791");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel(10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Room room15 = hotel11.findAvailableRoom();
        Hotel hotel17 = new Hotel(0);
        hotel17.displayRoomStatus();
        Room room19 = hotel17.findAvailableRoom();
        Room room20 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        hotel17.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) ' ');
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel(10);
        Room room30 = hotel29.findAvailableRoom();
        hotel26.reserveRoom(room30);
        hotel24.reserveRoom(room30);
        hotel17.reserveRoom(room30);
        hotel11.reserveRoom(room30);
        hotel7.reserveRoom(room30);
        hotel1.reserveRoom(room30);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass38 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0792");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        Room room7 = hotel3.findAvailableRoom();
        Room room8 = hotel3.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel10.reserveRoom(room34);
        hotel10.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (short) 10);
        Room room39 = hotel38.findAvailableRoom();
        hotel10.reserveRoom(room39);
        hotel3.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (short) 0);
        Room room46 = hotel45.findAvailableRoom();
        Room room47 = hotel45.findAvailableRoom();
        Room room48 = hotel45.findAvailableRoom();
        Room room49 = hotel45.findAvailableRoom();
        Hotel hotel51 = new Hotel(0);
        hotel51.displayRoomStatus();
        Room room53 = hotel51.findAvailableRoom();
        Room room54 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        hotel51.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) ' ');
        Hotel hotel60 = new Hotel((int) (short) 0);
        Room room61 = hotel60.findAvailableRoom();
        Hotel hotel63 = new Hotel(10);
        Room room64 = hotel63.findAvailableRoom();
        hotel60.reserveRoom(room64);
        hotel58.reserveRoom(room64);
        hotel51.reserveRoom(room64);
        hotel45.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Room room74 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        hotel71.displayRoomStatus();
        Room room77 = hotel71.findAvailableRoom();
        hotel1.reserveRoom(room77);
        java.lang.Class<?> wildcardClass79 = room77.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0793");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room31 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (short) 100);
        hotel34.displayRoomStatus();
        Room room36 = hotel34.findAvailableRoom();
        hotel1.reserveRoom(room36);
        Hotel hotel39 = new Hotel(0);
        hotel39.displayRoomStatus();
        Room room41 = hotel39.findAvailableRoom();
        Room room42 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        hotel39.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) ' ');
        Hotel hotel48 = new Hotel((int) (short) 0);
        Room room49 = hotel48.findAvailableRoom();
        Hotel hotel51 = new Hotel(10);
        Room room52 = hotel51.findAvailableRoom();
        hotel48.reserveRoom(room52);
        hotel46.reserveRoom(room52);
        hotel39.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room52);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0794");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Room room15 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Room room21 = hotel18.findAvailableRoom();
        Room room22 = hotel18.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel18.reserveRoom(room25);
        hotel9.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (short) 0);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Room room32 = hotel29.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) (short) 0);
        Room room35 = hotel34.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) 'a');
        hotel37.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel37.reserveRoom(room45);
        hotel37.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel37.reserveRoom(room85);
        hotel34.reserveRoom(room85);
        hotel29.reserveRoom(room85);
        hotel9.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        java.lang.Class<?> wildcardClass94 = room85.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0795");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        Room room19 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass20 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0796");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room24 = hotel1.findAvailableRoom();
        Room room25 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass27 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0797");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        Room room50 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room55 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0798");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        Room room13 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass14 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0799");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        hotel23.reserveRoom(room45);
        hotel23.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel23.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        hotel1.displayRoomStatus();
        Room room75 = hotel1.findAvailableRoom();
        Room room76 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNull(room76);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0800");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel11.reserveRoom(room60);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel11.reserveRoom(room69);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel11.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room84 = hotel1.findAvailableRoom();
        Hotel hotel86 = new Hotel((int) (byte) -1);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel86.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        hotel1.displayRoomStatus();
        Room room98 = hotel1.findAvailableRoom();
        Room room99 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNull(room98);
        org.junit.Assert.assertNull(room99);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0801");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) (short) 0);
        Room room30 = hotel29.findAvailableRoom();
        Room room31 = hotel29.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel42.reserveRoom(room51);
        hotel33.reserveRoom(room51);
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel64.reserveRoom(room82);
        hotel55.reserveRoom(room82);
        hotel33.reserveRoom(room82);
        hotel29.reserveRoom(room82);
        hotel1.reserveRoom(room82);
        Room room89 = hotel1.findAvailableRoom();
        Room room90 = hotel1.findAvailableRoom();
        Room room91 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNull(room90);
        org.junit.Assert.assertNull(room91);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0802");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Room room59 = hotel56.findAvailableRoom();
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass64 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0803");
        Hotel hotel1 = new Hotel((-1));
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(0);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        hotel4.displayRoomStatus();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel4.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Hotel hotel18 = new Hotel(1);
        hotel18.displayRoomStatus();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        hotel22.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel22.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel18.displayRoomStatus();
        hotel18.displayRoomStatus();
        Room room56 = hotel18.findAvailableRoom();
        hotel1.reserveRoom(room56);
        java.lang.Class<?> wildcardClass58 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0804");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass11 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0805");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) ' ');
        Hotel hotel11 = new Hotel((int) 'a');
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        hotel9.reserveRoom(room13);
        Hotel hotel16 = new Hotel(0);
        hotel16.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel16.reserveRoom(room20);
        Room room22 = hotel16.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        hotel28.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel28.reserveRoom(room46);
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel28.reserveRoom(room59);
        hotel24.reserveRoom(room59);
        hotel16.reserveRoom(room59);
        hotel9.reserveRoom(room59);
        hotel1.reserveRoom(room59);
        Room room66 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room66);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0806");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Room room20 = hotel17.findAvailableRoom();
        Room room21 = hotel17.findAvailableRoom();
        Hotel hotel23 = new Hotel(0);
        hotel23.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel23.reserveRoom(room27);
        Room room29 = hotel23.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel35.reserveRoom(room66);
        hotel31.reserveRoom(room66);
        hotel23.reserveRoom(room66);
        hotel17.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        Hotel hotel74 = new Hotel((int) (short) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel74.displayRoomStatus();
        Room room77 = hotel74.findAvailableRoom();
        hotel1.reserveRoom(room77);
        hotel1.displayRoomStatus();
        Room room80 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass81 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0807");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel(10);
        hotel5.displayRoomStatus();
        Room room7 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room7);
        Room room9 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room9);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0808");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass38 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0809");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass5 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0810");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room15 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0811");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel33.reserveRoom(room60);
        hotel11.reserveRoom(room60);
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel11.reserveRoom(room69);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel11.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room84 = hotel1.findAvailableRoom();
        Hotel hotel86 = new Hotel((int) (byte) -1);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel86.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        hotel1.displayRoomStatus();
        Room room98 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass99 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNull(room98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0812");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room45 = hotel1.findAvailableRoom();
        Room room46 = hotel1.findAvailableRoom();
        Hotel hotel48 = new Hotel((-1));
        Hotel hotel50 = new Hotel((int) (byte) -1);
        hotel50.displayRoomStatus();
        Room room52 = hotel50.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        hotel50.reserveRoom(room72);
        hotel48.reserveRoom(room72);
        Hotel hotel78 = new Hotel((int) (byte) 10);
        hotel78.displayRoomStatus();
        hotel78.displayRoomStatus();
        Room room81 = hotel78.findAvailableRoom();
        hotel48.reserveRoom(room81);
        hotel1.reserveRoom(room81);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel85.displayRoomStatus();
        Room room88 = hotel85.findAvailableRoom();
        hotel85.displayRoomStatus();
        Room room90 = hotel85.findAvailableRoom();
        hotel85.displayRoomStatus();
        Room room92 = hotel85.findAvailableRoom();
        hotel1.reserveRoom(room92);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room92);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0813");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) 'a');
        hotel4.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel4.reserveRoom(room12);
        Room room15 = hotel4.findAvailableRoom();
        Room room16 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room16);
        Room room18 = hotel1.findAvailableRoom();
        Room room19 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = room19.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room19);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0814");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (short) 0);
        Room room9 = hotel8.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) 'a');
        hotel11.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel11.reserveRoom(room19);
        Room room22 = hotel11.findAvailableRoom();
        Room room23 = hotel11.findAvailableRoom();
        hotel8.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        java.lang.Class<?> wildcardClass26 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0815");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(1);
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel(10);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        hotel30.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel39.reserveRoom(room48);
        hotel30.reserveRoom(room48);
        hotel21.reserveRoom(room48);
        hotel13.reserveRoom(room48);
        hotel10.reserveRoom(room48);
        hotel7.reserveRoom(room48);
        hotel1.reserveRoom(room48);
        java.lang.Class<?> wildcardClass56 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0816");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass8 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0817");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Room room28 = hotel1.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (short) 100);
        Room room31 = hotel30.findAvailableRoom();
        hotel1.reserveRoom(room31);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass36 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0818");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        hotel42.displayRoomStatus();
        Room room44 = hotel42.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        hotel42.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room71 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room71);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0819");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        Hotel hotel45 = new Hotel(0);
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Room room50 = hotel47.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel4.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Room room54 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0820");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room37 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room40 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0821");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Room room52 = hotel49.findAvailableRoom();
        hotel46.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Room room58 = hotel55.findAvailableRoom();
        Room room59 = hotel55.findAvailableRoom();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel55.reserveRoom(room62);
        hotel46.reserveRoom(room62);
        hotel1.reserveRoom(room62);
        java.lang.Class<?> wildcardClass66 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0822");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel30 = new Hotel(0);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel35 = new Hotel(10);
        Room room36 = hotel35.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        hotel38.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel38.reserveRoom(room75);
        hotel35.reserveRoom(room75);
        hotel30.reserveRoom(room75);
        hotel1.reserveRoom(room75);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass82 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0823");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        Room room36 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass39 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0824");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass14 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0825");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (short) 0);
        Room room6 = hotel5.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) 'a');
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel8.reserveRoom(room16);
        Room room19 = hotel8.findAvailableRoom();
        Room room20 = hotel8.findAvailableRoom();
        hotel5.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        Room room23 = hotel1.findAvailableRoom();
        Room room24 = hotel1.findAvailableRoom();
        Room room25 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room24);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0826");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room11 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (short) 0);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Room room17 = hotel14.findAvailableRoom();
        Hotel hotel19 = new Hotel(1);
        hotel19.displayRoomStatus();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel19.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Room room60 = hotel57.findAvailableRoom();
        Room room61 = hotel57.findAvailableRoom();
        hotel19.reserveRoom(room61);
        hotel14.reserveRoom(room61);
        hotel1.reserveRoom(room61);
        java.lang.Class<?> wildcardClass65 = room61.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0827");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Room room13 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0828");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel(0);
        hotel9.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        Room room15 = hotel9.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel21.reserveRoom(room39);
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel21.reserveRoom(room52);
        hotel17.reserveRoom(room52);
        hotel9.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room60 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass61 = room60.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room60);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0829");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        Room room12 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel15.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass56 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0830");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room7 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0831");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass11 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0832");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room14 = hotel1.findAvailableRoom();
        Room room15 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room15);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0833");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel7.reserveRoom(room11);
        Room room13 = hotel7.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel15.reserveRoom(room50);
        hotel7.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) 'a');
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        Room room71 = hotel60.findAvailableRoom();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel60.reserveRoom(room82);
        hotel58.reserveRoom(room82);
        hotel1.reserveRoom(room82);
        java.lang.Class<?> wildcardClass87 = room82.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0834");
        Hotel hotel1 = new Hotel((int) (short) 10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(0);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        Hotel hotel10 = new Hotel(0);
        hotel10.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel5.reserveRoom(room14);
        Hotel hotel18 = new Hotel((int) (short) 0);
        Room room19 = hotel18.findAvailableRoom();
        Hotel hotel21 = new Hotel(10);
        Room room22 = hotel21.findAvailableRoom();
        hotel18.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Room room28 = hotel25.findAvailableRoom();
        hotel18.reserveRoom(room28);
        hotel5.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room28);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0835");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room61 = hotel1.findAvailableRoom();
        Hotel hotel63 = new Hotel(0);
        hotel63.displayRoomStatus();
        Room room65 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        hotel63.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel63.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        java.lang.Class<?> wildcardClass82 = room78.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0836");
        Hotel hotel1 = new Hotel((-1));
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Hotel hotel31 = new Hotel((int) (byte) 10);
        hotel31.displayRoomStatus();
        hotel31.displayRoomStatus();
        Room room34 = hotel31.findAvailableRoom();
        hotel1.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        hotel37.displayRoomStatus();
        Room room39 = hotel37.findAvailableRoom();
        Room room40 = hotel37.findAvailableRoom();
        Hotel hotel42 = new Hotel(1);
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel46.reserveRoom(room73);
        hotel42.reserveRoom(room73);
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        Room room80 = hotel42.findAvailableRoom();
        hotel37.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room83 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(room80);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0837");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel7.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        java.lang.Class<?> wildcardClass21 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0838");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        java.lang.Class<?> wildcardClass26 = room23.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0839");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0840");
        Hotel hotel1 = new Hotel(0);
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) '4');
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel16.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) -1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel25.reserveRoom(room30);
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel25.reserveRoom(room34);
        hotel16.reserveRoom(room34);
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel16.reserveRoom(room47);
        hotel12.reserveRoom(room47);
        hotel10.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        java.lang.Class<?> wildcardClass53 = room47.getClass();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0841");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (short) 1);
        Hotel hotel7 = new Hotel((int) (short) 0);
        Room room8 = hotel7.findAvailableRoom();
        Hotel hotel10 = new Hotel(10);
        Room room11 = hotel10.findAvailableRoom();
        hotel7.reserveRoom(room11);
        hotel5.reserveRoom(room11);
        hotel5.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (short) 0);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        hotel16.displayRoomStatus();
        Room room20 = hotel16.findAvailableRoom();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        hotel22.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel31.reserveRoom(room40);
        hotel22.reserveRoom(room40);
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel22.reserveRoom(room53);
        hotel16.reserveRoom(room53);
        hotel5.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        java.lang.Class<?> wildcardClass59 = room53.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0842");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Hotel hotel46 = new Hotel(0);
        hotel46.displayRoomStatus();
        Room room48 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel51 = new Hotel(10);
        Room room52 = hotel51.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        hotel54.displayRoomStatus();
        Room room56 = hotel54.findAvailableRoom();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel54.reserveRoom(room76);
        hotel54.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel54.reserveRoom(room91);
        hotel51.reserveRoom(room91);
        hotel46.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        hotel1.displayRoomStatus();
        Room room98 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(room98);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0843");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0844");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass34 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0845");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        Room room7 = hotel3.findAvailableRoom();
        Room room8 = hotel3.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel10.reserveRoom(room34);
        hotel10.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (short) 10);
        Room room39 = hotel38.findAvailableRoom();
        hotel10.reserveRoom(room39);
        hotel3.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (short) 0);
        Room room46 = hotel45.findAvailableRoom();
        Room room47 = hotel45.findAvailableRoom();
        Room room48 = hotel45.findAvailableRoom();
        Room room49 = hotel45.findAvailableRoom();
        Hotel hotel51 = new Hotel(0);
        hotel51.displayRoomStatus();
        Room room53 = hotel51.findAvailableRoom();
        Room room54 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        hotel51.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) ' ');
        Hotel hotel60 = new Hotel((int) (short) 0);
        Room room61 = hotel60.findAvailableRoom();
        Hotel hotel63 = new Hotel(10);
        Room room64 = hotel63.findAvailableRoom();
        hotel60.reserveRoom(room64);
        hotel58.reserveRoom(room64);
        hotel51.reserveRoom(room64);
        hotel45.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        Room room70 = hotel1.findAvailableRoom();
        Room room71 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass72 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0846");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        Room room19 = hotel1.findAvailableRoom();
        Hotel hotel21 = new Hotel(0);
        hotel21.displayRoomStatus();
        Room room23 = hotel21.findAvailableRoom();
        Room room24 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Room room30 = hotel27.findAvailableRoom();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel36.reserveRoom(room54);
        hotel32.reserveRoom(room54);
        hotel32.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        hotel32.reserveRoom(room78);
        hotel27.reserveRoom(room78);
        Room room83 = hotel27.findAvailableRoom();
        hotel21.reserveRoom(room83);
        hotel1.reserveRoom(room83);
        java.lang.Class<?> wildcardClass86 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0847");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        hotel13.displayRoomStatus();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel13.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel13.reserveRoom(room59);
        hotel8.reserveRoom(room59);
        hotel1.reserveRoom(room59);
        java.lang.Class<?> wildcardClass65 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0848");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room14 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = room14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room14);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0849");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel(1);
        hotel22.displayRoomStatus();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel26.reserveRoom(room53);
        hotel22.reserveRoom(room53);
        hotel13.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        java.lang.Class<?> wildcardClass60 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0850");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel(10);
        Room room9 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room9);
        Room room11 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass12 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0851");
        Hotel hotel1 = new Hotel((int) (short) 10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(0);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        Hotel hotel10 = new Hotel(0);
        hotel10.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel5.reserveRoom(room14);
        Hotel hotel18 = new Hotel((int) (short) 0);
        Room room19 = hotel18.findAvailableRoom();
        Hotel hotel21 = new Hotel(10);
        Room room22 = hotel21.findAvailableRoom();
        hotel18.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Room room28 = hotel25.findAvailableRoom();
        hotel18.reserveRoom(room28);
        hotel5.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) -1);
        hotel42.displayRoomStatus();
        Room room44 = hotel42.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        hotel42.reserveRoom(room64);
        hotel42.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) -1);
        Room room71 = hotel70.findAvailableRoom();
        hotel70.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel70.reserveRoom(room75);
        hotel70.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        Hotel hotel87 = new Hotel((int) (byte) 1);
        Room room88 = hotel87.findAvailableRoom();
        hotel79.reserveRoom(room88);
        hotel70.reserveRoom(room88);
        hotel42.reserveRoom(room88);
        hotel34.reserveRoom(room88);
        hotel1.reserveRoom(room88);
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(room88);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0852");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0853");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel7.reserveRoom(room11);
        Room room13 = hotel7.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel15.reserveRoom(room50);
        hotel7.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) 'a');
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        Room room71 = hotel60.findAvailableRoom();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel60.reserveRoom(room82);
        hotel58.reserveRoom(room82);
        hotel1.reserveRoom(room82);
        java.lang.Class<?> wildcardClass87 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0854");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (short) 10);
        Room room8 = hotel7.findAvailableRoom();
        Room room9 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room9);
        java.lang.Class<?> wildcardClass11 = room9.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0855");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        Room room18 = hotel1.findAvailableRoom();
        Room room19 = hotel1.findAvailableRoom();
        Room room20 = hotel1.findAvailableRoom();
        Hotel hotel22 = new Hotel((int) (short) 10);
        Room room23 = hotel22.findAvailableRoom();
        Hotel hotel25 = new Hotel(0);
        hotel25.displayRoomStatus();
        Room room27 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Hotel hotel30 = new Hotel(10);
        Room room31 = hotel30.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        hotel33.displayRoomStatus();
        Room room35 = hotel33.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel33.reserveRoom(room55);
        hotel33.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) -1);
        Room room62 = hotel61.findAvailableRoom();
        hotel61.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel61.reserveRoom(room66);
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel61.reserveRoom(room70);
        hotel33.reserveRoom(room70);
        hotel30.reserveRoom(room70);
        hotel25.reserveRoom(room70);
        hotel25.displayRoomStatus();
        hotel25.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) 1);
        Room room79 = hotel78.findAvailableRoom();
        hotel25.reserveRoom(room79);
        hotel22.reserveRoom(room79);
        hotel1.reserveRoom(room79);
        java.lang.Class<?> wildcardClass83 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0856");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        Room room10 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass13 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0857");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        hotel1.displayRoomStatus();
        Room room19 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass20 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0858");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room3);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0859");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel30.reserveRoom(room39);
        hotel8.reserveRoom(room39);
        hotel4.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        Hotel hotel45 = new Hotel(0);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Hotel hotel50 = new Hotel(0);
        hotel50.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel50.reserveRoom(room54);
        hotel45.reserveRoom(room54);
        hotel1.reserveRoom(room54);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass60 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0860");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (short) 1);
        Hotel hotel13 = new Hotel((int) (short) 0);
        Room room14 = hotel13.findAvailableRoom();
        Hotel hotel16 = new Hotel(10);
        Room room17 = hotel16.findAvailableRoom();
        hotel13.reserveRoom(room17);
        hotel11.reserveRoom(room17);
        hotel11.displayRoomStatus();
        hotel11.displayRoomStatus();
        Hotel hotel23 = new Hotel(10);
        Room room24 = hotel23.findAvailableRoom();
        Room room25 = hotel23.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (short) 0);
        Room room28 = hotel27.findAvailableRoom();
        Room room29 = hotel27.findAvailableRoom();
        Room room30 = hotel27.findAvailableRoom();
        Room room31 = hotel27.findAvailableRoom();
        Hotel hotel33 = new Hotel(0);
        hotel33.displayRoomStatus();
        Room room35 = hotel33.findAvailableRoom();
        Room room36 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        hotel33.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) ' ');
        Hotel hotel42 = new Hotel((int) (short) 0);
        Room room43 = hotel42.findAvailableRoom();
        Hotel hotel45 = new Hotel(10);
        Room room46 = hotel45.findAvailableRoom();
        hotel42.reserveRoom(room46);
        hotel40.reserveRoom(room46);
        hotel33.reserveRoom(room46);
        hotel27.reserveRoom(room46);
        hotel23.reserveRoom(room46);
        hotel11.reserveRoom(room46);
        hotel11.displayRoomStatus();
        Room room54 = hotel11.findAvailableRoom();
        hotel1.reserveRoom(room54);
        Room room56 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room54);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0861");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room20 = hotel1.findAvailableRoom();
        Room room21 = hotel1.findAvailableRoom();
        Room room22 = hotel1.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (short) 1);
        Hotel hotel26 = new Hotel((int) (byte) -1);
        hotel26.displayRoomStatus();
        Room room28 = hotel26.findAvailableRoom();
        Room room29 = hotel26.findAvailableRoom();
        Room room30 = hotel26.findAvailableRoom();
        Room room31 = hotel26.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel42.reserveRoom(room51);
        hotel33.reserveRoom(room51);
        Hotel hotel55 = new Hotel((int) 'a');
        hotel55.displayRoomStatus();
        Room room57 = hotel55.findAvailableRoom();
        hotel33.reserveRoom(room57);
        hotel33.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (short) 10);
        Room room62 = hotel61.findAvailableRoom();
        hotel33.reserveRoom(room62);
        hotel26.reserveRoom(room62);
        hotel24.reserveRoom(room62);
        hotel1.reserveRoom(room62);
        java.lang.Class<?> wildcardClass67 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0862");
        Hotel hotel1 = new Hotel(0);
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Room room9 = hotel1.findAvailableRoom();
        Room room10 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass11 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0863");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) 'a');
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) 'a');
        hotel13.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel13.reserveRoom(room21);
        Room room24 = hotel13.findAvailableRoom();
        Room room25 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room25);
        hotel6.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        java.lang.Class<?> wildcardClass29 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0864");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Hotel hotel33 = new Hotel((int) (short) 0);
        hotel33.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        hotel36.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        hotel45.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel54.reserveRoom(room63);
        hotel45.reserveRoom(room63);
        hotel36.reserveRoom(room63);
        hotel33.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        Room room69 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass70 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0865");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        Room room39 = hotel28.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel28.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Room room54 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass55 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0866");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) ' ');
        Hotel hotel33 = new Hotel((int) (short) 0);
        Room room34 = hotel33.findAvailableRoom();
        Hotel hotel36 = new Hotel(10);
        Room room37 = hotel36.findAvailableRoom();
        hotel33.reserveRoom(room37);
        hotel31.reserveRoom(room37);
        hotel1.reserveRoom(room37);
        java.lang.Class<?> wildcardClass41 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0867");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room36 = hotel1.findAvailableRoom();
        Room room37 = hotel1.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (short) 0);
        Room room40 = hotel39.findAvailableRoom();
        Room room41 = hotel39.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        hotel43.displayRoomStatus();
        Room room45 = hotel43.findAvailableRoom();
        Hotel hotel47 = new Hotel((int) (byte) 0);
        Hotel hotel49 = new Hotel(0);
        hotel49.displayRoomStatus();
        Room room51 = hotel49.findAvailableRoom();
        Room room52 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        hotel49.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) ' ');
        Hotel hotel58 = new Hotel((int) (short) 0);
        Room room59 = hotel58.findAvailableRoom();
        Hotel hotel61 = new Hotel(10);
        Room room62 = hotel61.findAvailableRoom();
        hotel58.reserveRoom(room62);
        hotel56.reserveRoom(room62);
        hotel49.reserveRoom(room62);
        hotel47.reserveRoom(room62);
        hotel43.reserveRoom(room62);
        hotel39.reserveRoom(room62);
        hotel1.reserveRoom(room62);
        Room room70 = hotel1.findAvailableRoom();
        Room room71 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass72 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0868");
        Hotel hotel1 = new Hotel(0);
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        hotel15.displayRoomStatus();
        Room room17 = hotel15.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel15.reserveRoom(room37);
        hotel15.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        hotel15.reserveRoom(room61);
        hotel10.reserveRoom(room61);
        Room room66 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room68 = hotel10.findAvailableRoom();
        hotel1.reserveRoom(room68);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass72 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0869");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Room room30 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Room room36 = hotel33.findAvailableRoom();
        Room room37 = hotel33.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel33.reserveRoom(room40);
        Room room42 = hotel33.findAvailableRoom();
        hotel1.reserveRoom(room42);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass45 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0870");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        hotel7.reserveRoom(room29);
        hotel7.displayRoomStatus();
        Room room34 = hotel7.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (short) 100);
        Room room37 = hotel36.findAvailableRoom();
        hotel7.reserveRoom(room37);
        hotel1.reserveRoom(room37);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass41 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0871");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel(10);
        Room room9 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel15.reserveRoom(room50);
        hotel13.reserveRoom(room50);
        hotel13.displayRoomStatus();
        hotel13.displayRoomStatus();
        Room room57 = hotel13.findAvailableRoom();
        Room room58 = hotel13.findAvailableRoom();
        hotel1.reserveRoom(room58);
        Room room60 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room58);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0872");
        Hotel hotel1 = new Hotel((int) (byte) 0);
        Hotel hotel3 = new Hotel(0);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        hotel3.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) ' ');
        Hotel hotel12 = new Hotel((int) (short) 0);
        Room room13 = hotel12.findAvailableRoom();
        Hotel hotel15 = new Hotel(10);
        Room room16 = hotel15.findAvailableRoom();
        hotel12.reserveRoom(room16);
        hotel10.reserveRoom(room16);
        hotel3.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        Room room21 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass23 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0873");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel4.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel22.reserveRoom(room31);
        hotel13.reserveRoom(room31);
        hotel4.reserveRoom(room31);
        Hotel hotel36 = new Hotel((int) (short) 0);
        hotel36.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        hotel39.reserveRoom(room66);
        hotel36.reserveRoom(room66);
        hotel4.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass74 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0874");
        Hotel hotel1 = new Hotel((int) '4');
        Hotel hotel3 = new Hotel((int) (byte) -1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel7.reserveRoom(room38);
        hotel3.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Room room43 = hotel1.findAvailableRoom();
        Hotel hotel45 = new Hotel(1);
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        hotel49.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel49.reserveRoom(room76);
        hotel45.reserveRoom(room76);
        hotel45.displayRoomStatus();
        hotel45.displayRoomStatus();
        Room room83 = hotel45.findAvailableRoom();
        hotel1.reserveRoom(room83);
        Room room85 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass86 = hotel1.getClass();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0875");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        hotel6.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel15.reserveRoom(room24);
        hotel6.reserveRoom(room24);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        hotel28.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        hotel28.reserveRoom(room55);
        hotel6.reserveRoom(room55);
        hotel1.reserveRoom(room55);
        hotel1.displayRoomStatus();
        Room room62 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNull(room62);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0876");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel11.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel20.reserveRoom(room29);
        hotel11.reserveRoom(room29);
        hotel7.reserveRoom(room29);
        hotel7.displayRoomStatus();
        Room room34 = hotel7.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (short) 100);
        Room room37 = hotel36.findAvailableRoom();
        hotel7.reserveRoom(room37);
        hotel1.reserveRoom(room37);
        Room room40 = hotel1.findAvailableRoom();
        Room room41 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room40);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0877");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) (short) 0);
        Room room30 = hotel29.findAvailableRoom();
        Room room31 = hotel29.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel33.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel42.reserveRoom(room51);
        hotel33.reserveRoom(room51);
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel64.reserveRoom(room82);
        hotel55.reserveRoom(room82);
        hotel33.reserveRoom(room82);
        hotel29.reserveRoom(room82);
        hotel1.reserveRoom(room82);
        Room room89 = hotel1.findAvailableRoom();
        Room room90 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass91 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNull(room90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0878");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room60 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass61 = room60.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0879");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) ' ');
        Hotel hotel7 = new Hotel((int) 'a');
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        hotel5.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass14 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0880");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (short) 0);
        Room room25 = hotel24.findAvailableRoom();
        Hotel hotel27 = new Hotel(10);
        Room room28 = hotel27.findAvailableRoom();
        hotel24.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) 'a');
        Room room34 = hotel33.findAvailableRoom();
        hotel1.reserveRoom(room34);
        java.lang.Class<?> wildcardClass36 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0881");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel(1);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel10.reserveRoom(room37);
        hotel6.reserveRoom(room37);
        hotel6.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Room room47 = hotel44.findAvailableRoom();
        Room room48 = hotel44.findAvailableRoom();
        hotel6.reserveRoom(room48);
        hotel1.reserveRoom(room48);
        java.lang.Class<?> wildcardClass51 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0882");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) -1);
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel6.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel6.reserveRoom(room52);
        hotel1.reserveRoom(room52);
        Room room57 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room59 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room61 = hotel1.findAvailableRoom();
        Hotel hotel63 = new Hotel(0);
        hotel63.displayRoomStatus();
        Room room65 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        hotel63.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel63.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        Room room82 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass85 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0883");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        Room room10 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room13 = hotel1.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel15.reserveRoom(room46);
        Room room49 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        hotel15.displayRoomStatus();
        Room room52 = hotel15.findAvailableRoom();
        Hotel hotel54 = new Hotel(10);
        Room room55 = hotel54.findAvailableRoom();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        hotel65.displayRoomStatus();
        Hotel hotel74 = new Hotel((int) (byte) -1);
        Room room75 = hotel74.findAvailableRoom();
        hotel74.displayRoomStatus();
        Hotel hotel78 = new Hotel((int) (byte) 1);
        Room room79 = hotel78.findAvailableRoom();
        hotel74.reserveRoom(room79);
        hotel74.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) -1);
        Room room84 = hotel83.findAvailableRoom();
        hotel83.displayRoomStatus();
        Hotel hotel87 = new Hotel((int) (byte) 1);
        Room room88 = hotel87.findAvailableRoom();
        hotel83.reserveRoom(room88);
        Hotel hotel91 = new Hotel((int) (byte) 1);
        Room room92 = hotel91.findAvailableRoom();
        hotel83.reserveRoom(room92);
        hotel74.reserveRoom(room92);
        hotel65.reserveRoom(room92);
        hotel57.reserveRoom(room92);
        hotel54.reserveRoom(room92);
        hotel15.reserveRoom(room92);
        hotel1.reserveRoom(room92);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNull(room75);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNull(room84);
        org.junit.Assert.assertNotNull(room88);
        org.junit.Assert.assertNotNull(room92);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0884");
        Hotel hotel1 = new Hotel((int) '#');
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel3.displayRoomStatus();
        hotel3.displayRoomStatus();
        Room room31 = hotel3.findAvailableRoom();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        hotel33.displayRoomStatus();
        Room room35 = hotel33.findAvailableRoom();
        Room room36 = hotel33.findAvailableRoom();
        Hotel hotel38 = new Hotel(1);
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel42.reserveRoom(room69);
        hotel38.reserveRoom(room69);
        hotel38.displayRoomStatus();
        hotel38.displayRoomStatus();
        Room room76 = hotel38.findAvailableRoom();
        hotel33.reserveRoom(room76);
        Room room78 = hotel33.findAvailableRoom();
        hotel3.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        java.lang.Class<?> wildcardClass81 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0885");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(0);
        hotel5.displayRoomStatus();
        Room room7 = hotel5.findAvailableRoom();
        Room room8 = hotel5.findAvailableRoom();
        Room room9 = hotel5.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Room room14 = hotel11.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel11.reserveRoom(room21);
        hotel5.reserveRoom(room21);
        hotel1.reserveRoom(room21);
        java.lang.Class<?> wildcardClass26 = room21.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0886");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel(1);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel10.reserveRoom(room37);
        hotel6.reserveRoom(room37);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Room room44 = hotel6.findAvailableRoom();
        hotel1.reserveRoom(room44);
        Room room46 = hotel1.findAvailableRoom();
        Room room47 = hotel1.findAvailableRoom();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        hotel49.displayRoomStatus();
        Room room51 = hotel49.findAvailableRoom();
        Room room52 = hotel49.findAvailableRoom();
        Hotel hotel54 = new Hotel(1);
        hotel54.displayRoomStatus();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        hotel67.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel67.reserveRoom(room85);
        hotel58.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel54.displayRoomStatus();
        hotel54.displayRoomStatus();
        Room room92 = hotel54.findAvailableRoom();
        hotel49.reserveRoom(room92);
        hotel1.reserveRoom(room92);
        java.lang.Class<?> wildcardClass95 = room92.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room92);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0887");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        hotel38.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        hotel38.reserveRoom(room56);
        Hotel hotel60 = new Hotel((int) 'a');
        hotel60.displayRoomStatus();
        Room room62 = hotel60.findAvailableRoom();
        hotel38.reserveRoom(room62);
        hotel1.reserveRoom(room62);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room62);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0888");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel27.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel27.reserveRoom(room73);
        hotel5.reserveRoom(room73);
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        hotel5.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        Room room88 = hotel1.findAvailableRoom();
        Room room89 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass90 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNull(room88);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0889");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Room room14 = hotel10.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel10.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Room room20 = hotel1.findAvailableRoom();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        hotel28.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel28.reserveRoom(room46);
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel28.reserveRoom(room59);
        hotel24.reserveRoom(room59);
        hotel22.reserveRoom(room59);
        hotel22.displayRoomStatus();
        hotel22.displayRoomStatus();
        Room room66 = hotel22.findAvailableRoom();
        hotel1.reserveRoom(room66);
        java.lang.Class<?> wildcardClass68 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0890");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel(10);
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) 'a');
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        hotel24.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        hotel24.reserveRoom(room42);
        hotel15.reserveRoom(room42);
        hotel11.reserveRoom(room42);
        hotel8.reserveRoom(room42);
        Hotel hotel49 = new Hotel((int) (short) 0);
        Room room50 = hotel49.findAvailableRoom();
        Hotel hotel52 = new Hotel(10);
        Room room53 = hotel52.findAvailableRoom();
        hotel49.reserveRoom(room53);
        hotel8.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        java.lang.Class<?> wildcardClass57 = room53.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0891");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Hotel hotel41 = new Hotel((int) '4');
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        hotel47.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel56.reserveRoom(room65);
        hotel47.reserveRoom(room65);
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel47.reserveRoom(room78);
        hotel43.reserveRoom(room78);
        hotel41.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0892");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel5.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room39 = hotel1.findAvailableRoom();
        Hotel hotel41 = new Hotel(0);
        hotel41.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel41.reserveRoom(room45);
        hotel41.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) 'a');
        hotel49.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        hotel49.reserveRoom(room57);
        hotel41.reserveRoom(room57);
        hotel1.reserveRoom(room57);
        java.lang.Class<?> wildcardClass62 = room57.getClass();
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0893");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass11 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0894");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room38 = hotel1.findAvailableRoom();
        Room room39 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass40 = room39.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room39);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0895");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Room room17 = hotel14.findAvailableRoom();
        hotel11.reserveRoom(room17);
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Room room23 = hotel20.findAvailableRoom();
        Room room24 = hotel20.findAvailableRoom();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel20.reserveRoom(room27);
        hotel11.reserveRoom(room27);
        Hotel hotel31 = new Hotel((int) (short) 0);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Room room34 = hotel31.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (short) 0);
        Room room37 = hotel36.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) 'a');
        hotel39.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel39.reserveRoom(room47);
        hotel39.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        Room room57 = hotel56.findAvailableRoom();
        hotel56.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel56.reserveRoom(room61);
        hotel56.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (byte) -1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) 1);
        Room room70 = hotel69.findAvailableRoom();
        hotel65.reserveRoom(room70);
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel65.reserveRoom(room74);
        hotel56.reserveRoom(room74);
        Hotel hotel78 = new Hotel((int) (byte) -1);
        Room room79 = hotel78.findAvailableRoom();
        hotel78.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) 1);
        Room room83 = hotel82.findAvailableRoom();
        hotel78.reserveRoom(room83);
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel78.reserveRoom(room87);
        hotel56.reserveRoom(room87);
        hotel52.reserveRoom(room87);
        hotel39.reserveRoom(room87);
        hotel36.reserveRoom(room87);
        hotel31.reserveRoom(room87);
        hotel11.reserveRoom(room87);
        hotel1.reserveRoom(room87);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room79);
        org.junit.Assert.assertNotNull(room83);
        org.junit.Assert.assertNotNull(room87);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0896");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0897");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Room room32 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass35 = room34.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room34);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0898");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (short) 10);
        Room room30 = hotel29.findAvailableRoom();
        hotel1.reserveRoom(room30);
        Room room32 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass33 = room32.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNull(room32);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0899");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room7 = hotel1.findAvailableRoom();
        Room room8 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room8);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0900");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel(1);
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel23.reserveRoom(room41);
        hotel14.reserveRoom(room41);
        hotel10.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Room room47 = hotel1.findAvailableRoom();
        Hotel hotel49 = new Hotel(10);
        Room room50 = hotel49.findAvailableRoom();
        Room room51 = hotel49.findAvailableRoom();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        hotel53.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        hotel62.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel71.reserveRoom(room80);
        hotel62.reserveRoom(room80);
        hotel53.reserveRoom(room80);
        hotel49.reserveRoom(room80);
        Room room85 = hotel49.findAvailableRoom();
        hotel1.reserveRoom(room85);
        Room room87 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNull(room87);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0901");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        hotel9.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel9.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Hotel hotel42 = new Hotel(1);
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel46.reserveRoom(room73);
        hotel42.reserveRoom(room73);
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        hotel42.displayRoomStatus();
        Room room82 = hotel42.findAvailableRoom();
        hotel1.reserveRoom(room82);
        java.lang.Class<?> wildcardClass84 = room82.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0902");
        Hotel hotel1 = new Hotel((int) (short) -1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) 'a');
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel6.reserveRoom(room15);
        Room room17 = hotel6.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel4.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Room room33 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room35);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0903");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0904");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        hotel27.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel27.reserveRoom(room45);
        hotel23.reserveRoom(room45);
        hotel23.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel23.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        hotel1.reserveRoom(room80);
        Room room83 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass85 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0905");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Room room45 = hotel1.findAvailableRoom();
        Room room46 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass47 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0906");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        Room room19 = hotel1.findAvailableRoom();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel21.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        java.lang.Class<?> wildcardClass32 = room28.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0907");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass9 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0908");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room38 = hotel1.findAvailableRoom();
        Hotel hotel40 = new Hotel(10);
        Room room41 = hotel40.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        hotel51.reserveRoom(room78);
        hotel43.reserveRoom(room78);
        hotel40.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        java.lang.Class<?> wildcardClass85 = room78.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0909");
        Hotel hotel1 = new Hotel((int) (byte) 100);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0910");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Hotel hotel36 = new Hotel(10);
        Room room37 = hotel36.findAvailableRoom();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        hotel39.displayRoomStatus();
        Room room41 = hotel39.findAvailableRoom();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        hotel39.reserveRoom(room61);
        hotel39.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel39.reserveRoom(room76);
        hotel36.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0911");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel(0);
        hotel8.displayRoomStatus();
        Room room10 = hotel8.findAvailableRoom();
        Room room11 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        hotel8.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) ' ');
        Hotel hotel17 = new Hotel((int) (short) 0);
        Room room18 = hotel17.findAvailableRoom();
        Hotel hotel20 = new Hotel(10);
        Room room21 = hotel20.findAvailableRoom();
        hotel17.reserveRoom(room21);
        hotel15.reserveRoom(room21);
        hotel8.reserveRoom(room21);
        Room room25 = hotel8.findAvailableRoom();
        Room room26 = hotel8.findAvailableRoom();
        Room room27 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        Room room33 = hotel30.findAvailableRoom();
        Room room34 = hotel30.findAvailableRoom();
        Room room35 = hotel30.findAvailableRoom();
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        hotel37.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel37.reserveRoom(room55);
        Hotel hotel59 = new Hotel((int) 'a');
        hotel59.displayRoomStatus();
        Room room61 = hotel59.findAvailableRoom();
        hotel37.reserveRoom(room61);
        hotel37.displayRoomStatus();
        Hotel hotel65 = new Hotel((int) (short) 10);
        Room room66 = hotel65.findAvailableRoom();
        hotel37.reserveRoom(room66);
        hotel30.reserveRoom(room66);
        hotel30.displayRoomStatus();
        hotel30.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) 'a');
        hotel72.displayRoomStatus();
        Room room74 = hotel72.findAvailableRoom();
        hotel30.reserveRoom(room74);
        hotel8.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        Room room78 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNull(room78);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0912");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) (byte) 1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Room room9 = hotel6.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        hotel11.displayRoomStatus();
        Room room13 = hotel11.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        hotel11.reserveRoom(room33);
        hotel11.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel48.reserveRoom(room57);
        hotel39.reserveRoom(room57);
        hotel11.reserveRoom(room57);
        hotel6.reserveRoom(room57);
        Room room62 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Room room64 = hotel6.findAvailableRoom();
        Room room65 = hotel6.findAvailableRoom();
        hotel1.reserveRoom(room65);
        java.lang.Class<?> wildcardClass67 = room65.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0913");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) 'a');
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel8.reserveRoom(room17);
        Room room19 = hotel8.findAvailableRoom();
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        Hotel hotel29 = new Hotel((int) (byte) 1);
        Room room30 = hotel29.findAvailableRoom();
        hotel21.reserveRoom(room30);
        hotel8.reserveRoom(room30);
        hotel6.reserveRoom(room30);
        Room room34 = hotel6.findAvailableRoom();
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        hotel44.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        hotel53.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel62.reserveRoom(room71);
        hotel53.reserveRoom(room71);
        hotel44.reserveRoom(room71);
        hotel36.reserveRoom(room71);
        hotel6.reserveRoom(room71);
        Room room77 = hotel6.findAvailableRoom();
        hotel1.reserveRoom(room77);
        java.lang.Class<?> wildcardClass79 = room77.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0914");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (short) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Room room14 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Room room16 = hotel11.findAvailableRoom();
        hotel1.reserveRoom(room16);
        java.lang.Class<?> wildcardClass18 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0915");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel(10);
        Room room9 = hotel8.findAvailableRoom();
        hotel1.reserveRoom(room9);
        Room room11 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = room11.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room11);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0916");
        Hotel hotel1 = new Hotel((int) 'a');
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        hotel9.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel18.reserveRoom(room27);
        hotel9.reserveRoom(room27);
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel31.reserveRoom(room40);
        hotel9.reserveRoom(room40);
        hotel5.reserveRoom(room40);
        hotel3.reserveRoom(room40);
        hotel3.displayRoomStatus();
        hotel3.displayRoomStatus();
        Room room47 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room47);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room47);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0917");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        Hotel hotel12 = new Hotel((int) (byte) -1);
        Room room13 = hotel12.findAvailableRoom();
        hotel12.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel12.reserveRoom(room17);
        hotel7.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Room room21 = hotel1.findAvailableRoom();
        Room room22 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNull(room22);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0918");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room8);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0919");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel27.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel27.reserveRoom(room73);
        hotel5.reserveRoom(room73);
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        hotel5.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        Room room88 = hotel1.findAvailableRoom();
        Room room89 = hotel1.findAvailableRoom();
        Room room90 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel94 = new Hotel((int) (short) 1);
        hotel94.displayRoomStatus();
        hotel94.displayRoomStatus();
        hotel94.displayRoomStatus();
        Room room98 = hotel94.findAvailableRoom();
        hotel1.reserveRoom(room98);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNull(room88);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNull(room90);
        org.junit.Assert.assertNotNull(room98);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0920");
        Hotel hotel1 = new Hotel((int) (short) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        Room room39 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        hotel43.displayRoomStatus();
        Room room45 = hotel43.findAvailableRoom();
        Hotel hotel47 = new Hotel((int) (byte) 0);
        Hotel hotel49 = new Hotel(0);
        hotel49.displayRoomStatus();
        Room room51 = hotel49.findAvailableRoom();
        Room room52 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        hotel49.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) ' ');
        Hotel hotel58 = new Hotel((int) (short) 0);
        Room room59 = hotel58.findAvailableRoom();
        Hotel hotel61 = new Hotel(10);
        Room room62 = hotel61.findAvailableRoom();
        hotel58.reserveRoom(room62);
        hotel56.reserveRoom(room62);
        hotel49.reserveRoom(room62);
        hotel47.reserveRoom(room62);
        hotel43.reserveRoom(room62);
        hotel5.reserveRoom(room62);
        hotel1.reserveRoom(room62);
        java.lang.Class<?> wildcardClass70 = room62.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0921");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel1.reserveRoom(room32);
        Room room35 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room37 = hotel1.findAvailableRoom();
        Room room38 = hotel1.findAvailableRoom();
        Room room39 = hotel1.findAvailableRoom();
        Room room40 = hotel1.findAvailableRoom();
        Hotel hotel42 = new Hotel(0);
        hotel42.displayRoomStatus();
        Room room44 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel47 = new Hotel(0);
        hotel47.displayRoomStatus();
        Room room49 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        hotel47.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel53.reserveRoom(room62);
        hotel47.reserveRoom(room62);
        hotel42.reserveRoom(room62);
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        hotel67.displayRoomStatus();
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        hotel76.displayRoomStatus();
        Hotel hotel85 = new Hotel((int) (byte) -1);
        Room room86 = hotel85.findAvailableRoom();
        hotel85.displayRoomStatus();
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel85.reserveRoom(room90);
        Hotel hotel93 = new Hotel((int) (byte) 1);
        Room room94 = hotel93.findAvailableRoom();
        hotel85.reserveRoom(room94);
        hotel76.reserveRoom(room94);
        hotel67.reserveRoom(room94);
        hotel42.reserveRoom(room94);
        hotel1.reserveRoom(room94);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNull(room86);
        org.junit.Assert.assertNotNull(room90);
        org.junit.Assert.assertNotNull(room94);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0922");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel7.reserveRoom(room16);
        hotel1.reserveRoom(room16);
        hotel1.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 10);
        Room room22 = hotel21.findAvailableRoom();
        Room room23 = hotel21.findAvailableRoom();
        Hotel hotel25 = new Hotel(1);
        hotel25.displayRoomStatus();
        Hotel hotel28 = new Hotel(10);
        Room room29 = hotel28.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        hotel39.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) -1);
        Room room49 = hotel48.findAvailableRoom();
        hotel48.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel48.reserveRoom(room53);
        hotel48.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel48.reserveRoom(room66);
        hotel39.reserveRoom(room66);
        hotel31.reserveRoom(room66);
        hotel28.reserveRoom(room66);
        hotel25.reserveRoom(room66);
        hotel21.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        java.lang.Class<?> wildcardClass75 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0923");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Room room23 = hotel1.findAvailableRoom();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Room room28 = hotel25.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        hotel34.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel43.reserveRoom(room52);
        hotel34.reserveRoom(room52);
        hotel30.reserveRoom(room52);
        hotel30.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel30.reserveRoom(room76);
        hotel25.reserveRoom(room76);
        hotel1.reserveRoom(room76);
        Hotel hotel83 = new Hotel((int) (byte) -1);
        Hotel hotel85 = new Hotel((int) (byte) -1);
        Room room86 = hotel85.findAvailableRoom();
        hotel85.displayRoomStatus();
        Hotel hotel89 = new Hotel((int) (byte) 1);
        Room room90 = hotel89.findAvailableRoom();
        hotel85.reserveRoom(room90);
        hotel83.reserveRoom(room90);
        hotel1.reserveRoom(room90);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room86);
        org.junit.Assert.assertNotNull(room90);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0924");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        hotel1.reserveRoom(room36);
        Room room40 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass41 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0925");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room34 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room37 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass39 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0926");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        Room room57 = hotel1.findAvailableRoom();
        Hotel hotel59 = new Hotel((int) (short) 0);
        Room room60 = hotel59.findAvailableRoom();
        Hotel hotel62 = new Hotel(10);
        Room room63 = hotel62.findAvailableRoom();
        hotel59.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        java.lang.Class<?> wildcardClass66 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room57);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0927");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass7 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0928");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel((int) 'a');
        hotel6.displayRoomStatus();
        Room room8 = hotel6.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) 'a');
        hotel13.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        hotel13.reserveRoom(room21);
        Room room24 = hotel13.findAvailableRoom();
        Room room25 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room25);
        hotel6.reserveRoom(room25);
        hotel1.reserveRoom(room25);
        Room room29 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room29);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0929");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        hotel10.displayRoomStatus();
        Room room12 = hotel10.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        hotel36.displayRoomStatus();
        Room room38 = hotel36.findAvailableRoom();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        hotel40.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) -1);
        Room room50 = hotel49.findAvailableRoom();
        hotel49.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel49.reserveRoom(room54);
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel49.reserveRoom(room58);
        hotel40.reserveRoom(room58);
        hotel36.reserveRoom(room58);
        hotel36.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        hotel64.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) -1);
        Room room74 = hotel73.findAvailableRoom();
        hotel73.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel73.reserveRoom(room78);
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel73.reserveRoom(room82);
        hotel64.reserveRoom(room82);
        hotel36.reserveRoom(room82);
        hotel14.reserveRoom(room82);
        Hotel hotel88 = new Hotel((int) (byte) -1);
        Room room89 = hotel88.findAvailableRoom();
        hotel88.displayRoomStatus();
        Hotel hotel92 = new Hotel((int) (byte) 1);
        Room room93 = hotel92.findAvailableRoom();
        hotel88.reserveRoom(room93);
        hotel14.reserveRoom(room93);
        hotel10.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        hotel1.displayRoomStatus();
        Room room99 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNotNull(room99);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0930");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Room room32 = hotel1.findAvailableRoom();
        Room room33 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass34 = room33.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room33);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0931");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        Room room7 = hotel3.findAvailableRoom();
        Room room8 = hotel3.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel10.reserveRoom(room34);
        hotel10.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (short) 10);
        Room room39 = hotel38.findAvailableRoom();
        hotel10.reserveRoom(room39);
        hotel3.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (short) 0);
        Room room46 = hotel45.findAvailableRoom();
        Room room47 = hotel45.findAvailableRoom();
        Room room48 = hotel45.findAvailableRoom();
        Room room49 = hotel45.findAvailableRoom();
        Hotel hotel51 = new Hotel(0);
        hotel51.displayRoomStatus();
        Room room53 = hotel51.findAvailableRoom();
        Room room54 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        hotel51.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) ' ');
        Hotel hotel60 = new Hotel((int) (short) 0);
        Room room61 = hotel60.findAvailableRoom();
        Hotel hotel63 = new Hotel(10);
        Room room64 = hotel63.findAvailableRoom();
        hotel60.reserveRoom(room64);
        hotel58.reserveRoom(room64);
        hotel51.reserveRoom(room64);
        hotel45.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        Room room70 = hotel1.findAvailableRoom();
        Room room71 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room73 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room73);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0932");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) 100);
        hotel10.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel15.reserveRoom(room50);
        hotel15.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        hotel56.displayRoomStatus();
        Room room58 = hotel56.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        hotel56.reserveRoom(room78);
        hotel15.reserveRoom(room78);
        hotel13.reserveRoom(room78);
        hotel10.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        java.lang.Class<?> wildcardClass86 = room78.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0933");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel27.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel27.reserveRoom(room73);
        hotel5.reserveRoom(room73);
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        hotel5.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        hotel1.displayRoomStatus();
        Room room89 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNull(room89);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0934");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel30 = new Hotel(0);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel35 = new Hotel(10);
        Room room36 = hotel35.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        hotel38.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel38.reserveRoom(room75);
        hotel35.reserveRoom(room75);
        hotel30.reserveRoom(room75);
        hotel1.reserveRoom(room75);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) 'a');
        Room room85 = hotel84.findAvailableRoom();
        Room room86 = hotel84.findAvailableRoom();
        hotel1.reserveRoom(room86);
        java.lang.Class<?> wildcardClass88 = room86.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0935");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) 100);
        hotel10.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel19.reserveRoom(room50);
        hotel15.reserveRoom(room50);
        hotel15.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) -1);
        hotel56.displayRoomStatus();
        Room room58 = hotel56.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        hotel60.displayRoomStatus();
        Hotel hotel69 = new Hotel((int) (byte) -1);
        Room room70 = hotel69.findAvailableRoom();
        hotel69.displayRoomStatus();
        Hotel hotel73 = new Hotel((int) (byte) 1);
        Room room74 = hotel73.findAvailableRoom();
        hotel69.reserveRoom(room74);
        Hotel hotel77 = new Hotel((int) (byte) 1);
        Room room78 = hotel77.findAvailableRoom();
        hotel69.reserveRoom(room78);
        hotel60.reserveRoom(room78);
        hotel56.reserveRoom(room78);
        hotel15.reserveRoom(room78);
        hotel13.reserveRoom(room78);
        hotel10.reserveRoom(room78);
        hotel1.reserveRoom(room78);
        Room room86 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass87 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNull(room70);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room78);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0936");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) ' ');
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass9 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0937");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        hotel10.displayRoomStatus();
        Room room12 = hotel10.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel10.reserveRoom(room32);
        Room room36 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        hotel40.displayRoomStatus();
        Room room42 = hotel40.findAvailableRoom();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        hotel44.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel53.reserveRoom(room62);
        hotel44.reserveRoom(room62);
        hotel40.reserveRoom(room62);
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        Room room78 = hotel67.findAvailableRoom();
        Hotel hotel80 = new Hotel((int) (byte) -1);
        Room room81 = hotel80.findAvailableRoom();
        hotel80.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel80.reserveRoom(room85);
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel80.reserveRoom(room89);
        hotel67.reserveRoom(room89);
        hotel40.reserveRoom(room89);
        hotel10.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        Room room95 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNull(room95);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0938");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Room room13 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass16 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room13);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0939");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0940");
        Hotel hotel1 = new Hotel((int) (short) 10);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(0);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        hotel5.displayRoomStatus();
        Hotel hotel10 = new Hotel(0);
        hotel10.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel5.reserveRoom(room14);
        Hotel hotel18 = new Hotel((int) (short) 0);
        Room room19 = hotel18.findAvailableRoom();
        Hotel hotel21 = new Hotel(10);
        Room room22 = hotel21.findAvailableRoom();
        hotel18.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel25.displayRoomStatus();
        Room room28 = hotel25.findAvailableRoom();
        hotel18.reserveRoom(room28);
        hotel5.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        java.lang.Class<?> wildcardClass32 = room28.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0941");
        Hotel hotel1 = new Hotel(1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel(0);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Room room7 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        hotel4.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Room room14 = hotel11.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        hotel16.displayRoomStatus();
        Room room18 = hotel16.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel20.reserveRoom(room38);
        hotel16.reserveRoom(room38);
        hotel16.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        hotel44.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel53.reserveRoom(room62);
        hotel44.reserveRoom(room62);
        hotel16.reserveRoom(room62);
        hotel11.reserveRoom(room62);
        hotel4.reserveRoom(room62);
        hotel4.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (short) 0);
        Room room71 = hotel70.findAvailableRoom();
        Hotel hotel73 = new Hotel(10);
        Room room74 = hotel73.findAvailableRoom();
        hotel70.reserveRoom(room74);
        hotel4.reserveRoom(room74);
        hotel1.reserveRoom(room74);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNull(room71);
        org.junit.Assert.assertNotNull(room74);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0942");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Room room45 = hotel1.findAvailableRoom();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel1.reserveRoom(room48);
        java.lang.Class<?> wildcardClass50 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0943");
        Hotel hotel1 = new Hotel(0);
        Hotel hotel3 = new Hotel((int) (byte) 1);
        Room room4 = hotel3.findAvailableRoom();
        hotel3.displayRoomStatus();
        Room room6 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (short) 1);
        Hotel hotel11 = new Hotel((int) (short) 0);
        Room room12 = hotel11.findAvailableRoom();
        Hotel hotel14 = new Hotel(10);
        Room room15 = hotel14.findAvailableRoom();
        hotel11.reserveRoom(room15);
        hotel9.reserveRoom(room15);
        hotel9.displayRoomStatus();
        hotel9.displayRoomStatus();
        hotel9.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) -1);
        Room room23 = hotel22.findAvailableRoom();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel22.reserveRoom(room27);
        hotel22.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel31.reserveRoom(room40);
        hotel22.reserveRoom(room40);
        Hotel hotel44 = new Hotel((int) 'a');
        hotel44.displayRoomStatus();
        Room room46 = hotel44.findAvailableRoom();
        hotel22.reserveRoom(room46);
        Room room48 = hotel22.findAvailableRoom();
        Hotel hotel50 = new Hotel((int) 'a');
        hotel50.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        hotel50.reserveRoom(room58);
        Room room61 = hotel50.findAvailableRoom();
        Room room62 = hotel50.findAvailableRoom();
        hotel22.reserveRoom(room62);
        hotel22.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) 'a');
        hotel66.displayRoomStatus();
        Room room68 = hotel66.findAvailableRoom();
        hotel22.reserveRoom(room68);
        hotel9.reserveRoom(room68);
        hotel1.reserveRoom(room68);
        Room room72 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass73 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0944");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(1);
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel(10);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        hotel30.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel39.reserveRoom(room48);
        hotel30.reserveRoom(room48);
        hotel21.reserveRoom(room48);
        hotel13.reserveRoom(room48);
        hotel10.reserveRoom(room48);
        hotel7.reserveRoom(room48);
        hotel1.reserveRoom(room48);
        Room room56 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room58 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room56);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0945");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        Room room39 = hotel28.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel28.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        java.lang.Class<?> wildcardClass54 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0946");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room20 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel23 = new Hotel((-1));
        Hotel hotel25 = new Hotel((int) (byte) -1);
        hotel25.displayRoomStatus();
        Room room27 = hotel25.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel25.reserveRoom(room47);
        hotel23.reserveRoom(room47);
        Hotel hotel53 = new Hotel(0);
        hotel53.displayRoomStatus();
        Room room55 = hotel53.findAvailableRoom();
        Room room56 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        hotel53.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) ' ');
        Hotel hotel62 = new Hotel((int) (short) 0);
        Room room63 = hotel62.findAvailableRoom();
        Hotel hotel65 = new Hotel(10);
        Room room66 = hotel65.findAvailableRoom();
        hotel62.reserveRoom(room66);
        hotel60.reserveRoom(room66);
        hotel53.reserveRoom(room66);
        hotel23.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        java.lang.Class<?> wildcardClass72 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0947");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0948");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Room room20 = hotel17.findAvailableRoom();
        Room room21 = hotel17.findAvailableRoom();
        Hotel hotel23 = new Hotel(0);
        hotel23.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) 1);
        Room room27 = hotel26.findAvailableRoom();
        hotel23.reserveRoom(room27);
        Room room29 = hotel23.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        Hotel hotel57 = new Hotel((int) (byte) -1);
        Room room58 = hotel57.findAvailableRoom();
        hotel57.displayRoomStatus();
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel57.reserveRoom(room62);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel57.reserveRoom(room66);
        hotel35.reserveRoom(room66);
        hotel31.reserveRoom(room66);
        hotel23.reserveRoom(room66);
        hotel17.reserveRoom(room66);
        hotel1.reserveRoom(room66);
        Hotel hotel74 = new Hotel((int) (short) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel74.displayRoomStatus();
        Room room77 = hotel74.findAvailableRoom();
        hotel1.reserveRoom(room77);
        java.lang.Class<?> wildcardClass79 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0949");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) ' ');
        Hotel hotel10 = new Hotel((int) (short) 0);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel(10);
        Room room14 = hotel13.findAvailableRoom();
        hotel10.reserveRoom(room14);
        hotel8.reserveRoom(room14);
        hotel1.reserveRoom(room14);
        hotel1.displayRoomStatus();
        Hotel hotel20 = new Hotel((-1));
        Hotel hotel22 = new Hotel((int) (byte) -1);
        hotel22.displayRoomStatus();
        Room room24 = hotel22.findAvailableRoom();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel35.reserveRoom(room44);
        hotel26.reserveRoom(room44);
        hotel22.reserveRoom(room44);
        hotel20.reserveRoom(room44);
        Hotel hotel50 = new Hotel(0);
        hotel50.displayRoomStatus();
        Room room52 = hotel50.findAvailableRoom();
        Room room53 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        hotel50.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) ' ');
        Hotel hotel59 = new Hotel((int) (short) 0);
        Room room60 = hotel59.findAvailableRoom();
        Hotel hotel62 = new Hotel(10);
        Room room63 = hotel62.findAvailableRoom();
        hotel59.reserveRoom(room63);
        hotel57.reserveRoom(room63);
        hotel50.reserveRoom(room63);
        hotel20.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        Room room69 = hotel1.findAvailableRoom();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Room room74 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        hotel71.displayRoomStatus();
        Room room77 = hotel71.findAvailableRoom();
        hotel1.reserveRoom(room77);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room77);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0950");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        Hotel hotel36 = new Hotel((int) (byte) -1);
        Room room37 = hotel36.findAvailableRoom();
        hotel36.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel36.reserveRoom(room41);
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel36.reserveRoom(room45);
        hotel14.reserveRoom(room45);
        hotel10.reserveRoom(room45);
        hotel1.reserveRoom(room45);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room52 = hotel1.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Room room57 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        hotel54.displayRoomStatus();
        Room room60 = hotel54.findAvailableRoom();
        hotel1.reserveRoom(room60);
        Room room62 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        hotel66.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel75.reserveRoom(room84);
        hotel66.reserveRoom(room84);
        Room room87 = hotel66.findAvailableRoom();
        Hotel hotel89 = new Hotel((int) (short) 0);
        Room room90 = hotel89.findAvailableRoom();
        Hotel hotel92 = new Hotel(10);
        Room room93 = hotel92.findAvailableRoom();
        hotel89.reserveRoom(room93);
        hotel66.reserveRoom(room93);
        hotel1.reserveRoom(room93);
        java.lang.Class<?> wildcardClass97 = room93.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room62);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNull(room87);
        org.junit.Assert.assertNull(room90);
        org.junit.Assert.assertNotNull(room93);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0951");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Room room11 = hotel8.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        hotel13.displayRoomStatus();
        Room room15 = hotel13.findAvailableRoom();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        hotel17.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel26.reserveRoom(room35);
        hotel17.reserveRoom(room35);
        hotel13.reserveRoom(room35);
        hotel13.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        hotel41.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel50.reserveRoom(room55);
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel50.reserveRoom(room59);
        hotel41.reserveRoom(room59);
        hotel13.reserveRoom(room59);
        hotel8.reserveRoom(room59);
        hotel1.reserveRoom(room59);
        hotel1.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (short) 0);
        Room room68 = hotel67.findAvailableRoom();
        Hotel hotel70 = new Hotel(10);
        Room room71 = hotel70.findAvailableRoom();
        hotel67.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        java.lang.Class<?> wildcardClass74 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNotNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0952");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        Hotel hotel30 = new Hotel((int) 'a');
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        hotel8.reserveRoom(room32);
        hotel8.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (short) 10);
        Room room37 = hotel36.findAvailableRoom();
        hotel8.reserveRoom(room37);
        hotel1.reserveRoom(room37);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room42 = hotel1.findAvailableRoom();
        Room room43 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass44 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0953");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        Room room13 = hotel1.findAvailableRoom();
        Room room14 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room13);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0954");
        Hotel hotel1 = new Hotel((int) 'a');
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel(10);
        Room room6 = hotel5.findAvailableRoom();
        Room room7 = hotel5.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) -1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) 1);
        Room room14 = hotel13.findAvailableRoom();
        hotel9.reserveRoom(room14);
        hotel9.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel9.reserveRoom(room36);
        hotel5.reserveRoom(room36);
        Room room41 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Room room43 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room43);
        java.lang.Class<?> wildcardClass45 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0955");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (short) 0);
        Room room25 = hotel24.findAvailableRoom();
        Hotel hotel27 = new Hotel(10);
        Room room28 = hotel27.findAvailableRoom();
        hotel24.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        Room room32 = hotel1.findAvailableRoom();
        Room room33 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room33);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0956");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        Room room7 = hotel3.findAvailableRoom();
        Room room8 = hotel3.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel10.reserveRoom(room34);
        hotel10.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (short) 10);
        Room room39 = hotel38.findAvailableRoom();
        hotel10.reserveRoom(room39);
        hotel3.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (short) 0);
        Room room46 = hotel45.findAvailableRoom();
        Room room47 = hotel45.findAvailableRoom();
        Room room48 = hotel45.findAvailableRoom();
        Room room49 = hotel45.findAvailableRoom();
        Hotel hotel51 = new Hotel(0);
        hotel51.displayRoomStatus();
        Room room53 = hotel51.findAvailableRoom();
        Room room54 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        hotel51.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) ' ');
        Hotel hotel60 = new Hotel((int) (short) 0);
        Room room61 = hotel60.findAvailableRoom();
        Hotel hotel63 = new Hotel(10);
        Room room64 = hotel63.findAvailableRoom();
        hotel60.reserveRoom(room64);
        hotel58.reserveRoom(room64);
        hotel51.reserveRoom(room64);
        hotel45.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        Room room70 = hotel1.findAvailableRoom();
        Room room71 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room73 = null;
        // The following exception was thrown during execution in test generation
        try {
            hotel1.reserveRoom(room73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"Room.setOccupied(boolean)\" because \"room\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(room71);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0957");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Hotel hotel6 = new Hotel(1);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel10.reserveRoom(room37);
        hotel6.reserveRoom(room37);
        hotel6.displayRoomStatus();
        hotel6.displayRoomStatus();
        Room room44 = hotel6.findAvailableRoom();
        hotel1.reserveRoom(room44);
        Room room46 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass49 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0958");
        Hotel hotel1 = new Hotel(10);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        hotel4.displayRoomStatus();
        Room room6 = hotel4.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (byte) -1);
        Room room9 = hotel8.findAvailableRoom();
        hotel8.displayRoomStatus();
        Hotel hotel12 = new Hotel((int) (byte) 1);
        Room room13 = hotel12.findAvailableRoom();
        hotel8.reserveRoom(room13);
        hotel8.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) -1);
        Room room18 = hotel17.findAvailableRoom();
        hotel17.displayRoomStatus();
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel17.reserveRoom(room22);
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel17.reserveRoom(room26);
        hotel8.reserveRoom(room26);
        hotel4.reserveRoom(room26);
        hotel4.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        hotel4.reserveRoom(room41);
        hotel1.reserveRoom(room41);
        Hotel hotel46 = new Hotel(0);
        hotel46.displayRoomStatus();
        Room room48 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel51 = new Hotel(10);
        Room room52 = hotel51.findAvailableRoom();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        hotel54.displayRoomStatus();
        Room room56 = hotel54.findAvailableRoom();
        Hotel hotel58 = new Hotel((int) (byte) -1);
        Room room59 = hotel58.findAvailableRoom();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) 1);
        Room room63 = hotel62.findAvailableRoom();
        hotel58.reserveRoom(room63);
        hotel58.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) -1);
        Room room68 = hotel67.findAvailableRoom();
        hotel67.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel67.reserveRoom(room72);
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel67.reserveRoom(room76);
        hotel58.reserveRoom(room76);
        hotel54.reserveRoom(room76);
        hotel54.displayRoomStatus();
        Hotel hotel82 = new Hotel((int) (byte) -1);
        Room room83 = hotel82.findAvailableRoom();
        hotel82.displayRoomStatus();
        Hotel hotel86 = new Hotel((int) (byte) 1);
        Room room87 = hotel86.findAvailableRoom();
        hotel82.reserveRoom(room87);
        Hotel hotel90 = new Hotel((int) (byte) 1);
        Room room91 = hotel90.findAvailableRoom();
        hotel82.reserveRoom(room91);
        hotel54.reserveRoom(room91);
        hotel51.reserveRoom(room91);
        hotel46.reserveRoom(room91);
        hotel1.reserveRoom(room91);
        java.lang.Class<?> wildcardClass97 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room87);
        org.junit.Assert.assertNotNull(room91);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0959");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel1.reserveRoom(room38);
        Room room41 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        hotel44.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) -1);
        Room room48 = hotel47.findAvailableRoom();
        hotel47.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) 1);
        Room room52 = hotel51.findAvailableRoom();
        hotel47.reserveRoom(room52);
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel47.reserveRoom(room56);
        Room room58 = hotel47.findAvailableRoom();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel47.reserveRoom(room69);
        hotel44.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        java.lang.Class<?> wildcardClass74 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNotNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0960");
        Hotel hotel1 = new Hotel((int) (short) -1);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) 'a');
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        hotel5.reserveRoom(room29);
        hotel5.displayRoomStatus();
        Room room32 = hotel5.findAvailableRoom();
        Hotel hotel34 = new Hotel(0);
        hotel34.displayRoomStatus();
        Room room36 = hotel34.findAvailableRoom();
        Room room37 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        hotel34.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) ' ');
        Hotel hotel43 = new Hotel((int) (short) 0);
        Room room44 = hotel43.findAvailableRoom();
        Hotel hotel46 = new Hotel(10);
        Room room47 = hotel46.findAvailableRoom();
        hotel43.reserveRoom(room47);
        hotel41.reserveRoom(room47);
        hotel34.reserveRoom(room47);
        hotel5.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        java.lang.Class<?> wildcardClass53 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNull(room37);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0961");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = room6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0962");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        Room room39 = hotel28.findAvailableRoom();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel28.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        Room room54 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room54);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0963");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel(10);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Room room7 = hotel1.findAvailableRoom();
        Hotel hotel9 = new Hotel((int) (byte) 10);
        hotel9.displayRoomStatus();
        hotel9.displayRoomStatus();
        Room room12 = hotel9.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) '4');
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel20.reserveRoom(room38);
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel42.reserveRoom(room51);
        hotel20.reserveRoom(room51);
        hotel16.reserveRoom(room51);
        hotel14.reserveRoom(room51);
        Room room56 = hotel14.findAvailableRoom();
        Hotel hotel58 = new Hotel(1);
        hotel58.displayRoomStatus();
        hotel58.displayRoomStatus();
        Hotel hotel62 = new Hotel((int) (byte) -1);
        Room room63 = hotel62.findAvailableRoom();
        hotel62.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel62.reserveRoom(room67);
        hotel62.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) -1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) 1);
        Room room76 = hotel75.findAvailableRoom();
        hotel71.reserveRoom(room76);
        hotel71.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) -1);
        Room room81 = hotel80.findAvailableRoom();
        hotel80.displayRoomStatus();
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel80.reserveRoom(room85);
        Hotel hotel88 = new Hotel((int) (byte) 1);
        Room room89 = hotel88.findAvailableRoom();
        hotel80.reserveRoom(room89);
        hotel71.reserveRoom(room89);
        hotel62.reserveRoom(room89);
        hotel58.reserveRoom(room89);
        hotel58.displayRoomStatus();
        hotel58.displayRoomStatus();
        Room room96 = hotel58.findAvailableRoom();
        hotel14.reserveRoom(room96);
        hotel9.reserveRoom(room96);
        hotel1.reserveRoom(room96);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNull(room72);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNotNull(room96);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0964");
        Hotel hotel1 = new Hotel((int) (short) -1);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) 'a');
        Hotel hotel6 = new Hotel((int) (byte) -1);
        Room room7 = hotel6.findAvailableRoom();
        hotel6.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel6.reserveRoom(room11);
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel6.reserveRoom(room15);
        Room room17 = hotel6.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel6.reserveRoom(room28);
        hotel4.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        Hotel hotel34 = new Hotel(0);
        hotel34.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel34.reserveRoom(room38);
        Room room40 = hotel34.findAvailableRoom();
        Hotel hotel42 = new Hotel(0);
        hotel42.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel42.reserveRoom(room46);
        Room room48 = hotel42.findAvailableRoom();
        Hotel hotel50 = new Hotel((int) (byte) -1);
        Room room51 = hotel50.findAvailableRoom();
        hotel50.displayRoomStatus();
        Hotel hotel54 = new Hotel((int) (byte) -1);
        Room room55 = hotel54.findAvailableRoom();
        hotel54.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel54.reserveRoom(room59);
        hotel54.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) (byte) -1);
        Room room64 = hotel63.findAvailableRoom();
        hotel63.displayRoomStatus();
        Hotel hotel67 = new Hotel((int) (byte) 1);
        Room room68 = hotel67.findAvailableRoom();
        hotel63.reserveRoom(room68);
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel63.reserveRoom(room72);
        hotel54.reserveRoom(room72);
        Hotel hotel76 = new Hotel((int) (byte) -1);
        Room room77 = hotel76.findAvailableRoom();
        hotel76.displayRoomStatus();
        Hotel hotel80 = new Hotel((int) (byte) 1);
        Room room81 = hotel80.findAvailableRoom();
        hotel76.reserveRoom(room81);
        Hotel hotel84 = new Hotel((int) (byte) 1);
        Room room85 = hotel84.findAvailableRoom();
        hotel76.reserveRoom(room85);
        hotel54.reserveRoom(room85);
        hotel50.reserveRoom(room85);
        hotel42.reserveRoom(room85);
        hotel34.reserveRoom(room85);
        hotel1.reserveRoom(room85);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass93 = hotel1.getClass();
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room51);
        org.junit.Assert.assertNull(room55);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNull(room77);
        org.junit.Assert.assertNotNull(room81);
        org.junit.Assert.assertNotNull(room85);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0965");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        Room room56 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room56);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0966");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        java.lang.Class<?> wildcardClass16 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0967");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Hotel hotel24 = new Hotel((int) (short) 0);
        Room room25 = hotel24.findAvailableRoom();
        Hotel hotel27 = new Hotel(10);
        Room room28 = hotel27.findAvailableRoom();
        hotel24.reserveRoom(room28);
        hotel1.reserveRoom(room28);
        hotel1.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Room room36 = hotel33.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        hotel38.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        hotel66.displayRoomStatus();
        Hotel hotel75 = new Hotel((int) (byte) -1);
        Room room76 = hotel75.findAvailableRoom();
        hotel75.displayRoomStatus();
        Hotel hotel79 = new Hotel((int) (byte) 1);
        Room room80 = hotel79.findAvailableRoom();
        hotel75.reserveRoom(room80);
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel75.reserveRoom(room84);
        hotel66.reserveRoom(room84);
        hotel38.reserveRoom(room84);
        hotel33.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        java.lang.Class<?> wildcardClass90 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room76);
        org.junit.Assert.assertNotNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0968");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (short) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel59.displayRoomStatus();
        Hotel hotel63 = new Hotel(0);
        Hotel hotel65 = new Hotel((int) (byte) 1);
        Room room66 = hotel65.findAvailableRoom();
        hotel65.displayRoomStatus();
        Room room68 = hotel65.findAvailableRoom();
        hotel63.reserveRoom(room68);
        hotel59.reserveRoom(room68);
        hotel1.reserveRoom(room68);
        java.lang.Class<?> wildcardClass72 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0969");
        Hotel hotel1 = new Hotel((int) (short) 100);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel4.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel13.reserveRoom(room22);
        hotel4.reserveRoom(room22);
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel26.reserveRoom(room53);
        hotel4.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room61 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass62 = room61.getClass();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0970");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (short) 0);
        Room room6 = hotel5.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) 'a');
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) 1);
        Room room16 = hotel15.findAvailableRoom();
        hotel11.reserveRoom(room16);
        hotel8.reserveRoom(room16);
        Room room19 = hotel8.findAvailableRoom();
        Room room20 = hotel8.findAvailableRoom();
        hotel5.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        Room room23 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass24 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNotNull(room16);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0971");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        hotel1.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel18.reserveRoom(room49);
        hotel14.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        java.lang.Class<?> wildcardClass54 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0972");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Room room6 = hotel3.findAvailableRoom();
        Room room7 = hotel3.findAvailableRoom();
        Room room8 = hotel3.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        hotel10.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel19.reserveRoom(room28);
        hotel10.reserveRoom(room28);
        Hotel hotel32 = new Hotel((int) 'a');
        hotel32.displayRoomStatus();
        Room room34 = hotel32.findAvailableRoom();
        hotel10.reserveRoom(room34);
        hotel10.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (short) 10);
        Room room39 = hotel38.findAvailableRoom();
        hotel10.reserveRoom(room39);
        hotel3.reserveRoom(room39);
        hotel1.reserveRoom(room39);
        hotel1.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (short) 0);
        Room room46 = hotel45.findAvailableRoom();
        Room room47 = hotel45.findAvailableRoom();
        Room room48 = hotel45.findAvailableRoom();
        Room room49 = hotel45.findAvailableRoom();
        Hotel hotel51 = new Hotel(0);
        hotel51.displayRoomStatus();
        Room room53 = hotel51.findAvailableRoom();
        Room room54 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        hotel51.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) ' ');
        Hotel hotel60 = new Hotel((int) (short) 0);
        Room room61 = hotel60.findAvailableRoom();
        Hotel hotel63 = new Hotel(10);
        Room room64 = hotel63.findAvailableRoom();
        hotel60.reserveRoom(room64);
        hotel58.reserveRoom(room64);
        hotel51.reserveRoom(room64);
        hotel45.reserveRoom(room64);
        hotel1.reserveRoom(room64);
        Room room70 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass71 = room70.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNull(room48);
        org.junit.Assert.assertNull(room49);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNotNull(room70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0973");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        hotel23.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel32.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) -1);
        Room room42 = hotel41.findAvailableRoom();
        hotel41.displayRoomStatus();
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel41.reserveRoom(room46);
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel41.reserveRoom(room50);
        hotel32.reserveRoom(room50);
        hotel23.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room58 = hotel1.findAvailableRoom();
        Room room59 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass60 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNull(room58);
        org.junit.Assert.assertNull(room59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0974");
        Hotel hotel1 = new Hotel((int) (byte) 10);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room7 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0975");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Hotel hotel23 = new Hotel((int) 'a');
        hotel23.displayRoomStatus();
        Room room25 = hotel23.findAvailableRoom();
        hotel1.reserveRoom(room25);
        hotel1.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel29.reserveRoom(room60);
        Room room63 = hotel29.findAvailableRoom();
        Room room64 = hotel29.findAvailableRoom();
        Hotel hotel66 = new Hotel((int) (byte) 1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room69 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Room room71 = hotel66.findAvailableRoom();
        hotel29.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        Room room74 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room76 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room63);
        org.junit.Assert.assertNull(room64);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNull(room74);
        org.junit.Assert.assertNull(room76);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0976");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        hotel15.displayRoomStatus();
        Room room17 = hotel15.findAvailableRoom();
        Hotel hotel19 = new Hotel((int) (byte) -1);
        Room room20 = hotel19.findAvailableRoom();
        hotel19.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) 1);
        Room room24 = hotel23.findAvailableRoom();
        hotel19.reserveRoom(room24);
        hotel19.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) -1);
        Room room29 = hotel28.findAvailableRoom();
        hotel28.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel28.reserveRoom(room33);
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel28.reserveRoom(room37);
        hotel19.reserveRoom(room37);
        hotel15.reserveRoom(room37);
        hotel15.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) -1);
        Room room44 = hotel43.findAvailableRoom();
        hotel43.displayRoomStatus();
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel43.reserveRoom(room48);
        hotel43.displayRoomStatus();
        Hotel hotel52 = new Hotel((int) (byte) -1);
        Room room53 = hotel52.findAvailableRoom();
        hotel52.displayRoomStatus();
        Hotel hotel56 = new Hotel((int) (byte) 1);
        Room room57 = hotel56.findAvailableRoom();
        hotel52.reserveRoom(room57);
        Hotel hotel60 = new Hotel((int) (byte) 1);
        Room room61 = hotel60.findAvailableRoom();
        hotel52.reserveRoom(room61);
        hotel43.reserveRoom(room61);
        hotel15.reserveRoom(room61);
        hotel10.reserveRoom(room61);
        Room room66 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        hotel10.displayRoomStatus();
        Hotel hotel71 = new Hotel((int) (byte) 1);
        Room room72 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Room room74 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        Room room76 = hotel71.findAvailableRoom();
        Room room77 = hotel71.findAvailableRoom();
        hotel10.reserveRoom(room77);
        Room room79 = hotel10.findAvailableRoom();
        hotel1.reserveRoom(room79);
        java.lang.Class<?> wildcardClass81 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room20);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNull(room53);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room61);
        org.junit.Assert.assertNotNull(room66);
        org.junit.Assert.assertNotNull(room72);
        org.junit.Assert.assertNotNull(room74);
        org.junit.Assert.assertNotNull(room76);
        org.junit.Assert.assertNotNull(room77);
        org.junit.Assert.assertNotNull(room79);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0977");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((-1));
        Hotel hotel7 = new Hotel(1);
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        hotel10.displayRoomStatus();
        Room room12 = hotel10.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        hotel14.displayRoomStatus();
        Hotel hotel23 = new Hotel((int) (byte) -1);
        Room room24 = hotel23.findAvailableRoom();
        hotel23.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) 1);
        Room room28 = hotel27.findAvailableRoom();
        hotel23.reserveRoom(room28);
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel23.reserveRoom(room32);
        hotel14.reserveRoom(room32);
        hotel10.reserveRoom(room32);
        hotel10.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel10.reserveRoom(room47);
        Hotel hotel51 = new Hotel(0);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Room room56 = hotel53.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel10.reserveRoom(room56);
        hotel7.reserveRoom(room56);
        hotel5.reserveRoom(room56);
        hotel1.reserveRoom(room56);
        java.lang.Class<?> wildcardClass62 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNotNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0978");
        Hotel hotel1 = new Hotel((int) (short) 1);
        Hotel hotel3 = new Hotel((int) (short) 0);
        Room room4 = hotel3.findAvailableRoom();
        Hotel hotel6 = new Hotel(10);
        Room room7 = hotel6.findAvailableRoom();
        hotel3.reserveRoom(room7);
        hotel1.reserveRoom(room7);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) '4');
        Hotel hotel15 = new Hotel(0);
        Room room16 = hotel15.findAvailableRoom();
        Hotel hotel18 = new Hotel((int) ' ');
        Hotel hotel20 = new Hotel((int) (short) 0);
        Room room21 = hotel20.findAvailableRoom();
        Hotel hotel23 = new Hotel(10);
        Room room24 = hotel23.findAvailableRoom();
        hotel20.reserveRoom(room24);
        hotel18.reserveRoom(room24);
        Room room27 = hotel18.findAvailableRoom();
        hotel15.reserveRoom(room27);
        Hotel hotel30 = new Hotel((int) 'a');
        hotel30.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        hotel30.reserveRoom(room38);
        Room room41 = hotel30.findAvailableRoom();
        Room room42 = hotel30.findAvailableRoom();
        Room room43 = hotel30.findAvailableRoom();
        hotel15.reserveRoom(room43);
        hotel13.reserveRoom(room43);
        hotel1.reserveRoom(room43);
        Room room47 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNotNull(room27);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0979");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) -1);
        Room room34 = hotel33.findAvailableRoom();
        hotel33.displayRoomStatus();
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel33.reserveRoom(room38);
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel33.reserveRoom(room42);
        Room room44 = hotel33.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        Hotel hotel54 = new Hotel((int) (byte) 1);
        Room room55 = hotel54.findAvailableRoom();
        hotel46.reserveRoom(room55);
        hotel33.reserveRoom(room55);
        hotel1.reserveRoom(room55);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(room55);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0980");
        Hotel hotel1 = new Hotel((int) (byte) 1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) 1);
        Room room8 = hotel7.findAvailableRoom();
        hotel1.reserveRoom(room8);
        Room room10 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        hotel14.displayRoomStatus();
        Room room16 = hotel14.findAvailableRoom();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel14.reserveRoom(room36);
        Room room40 = hotel14.findAvailableRoom();
        Room room41 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        hotel14.displayRoomStatus();
        Room room44 = hotel14.findAvailableRoom();
        Hotel hotel46 = new Hotel((int) ' ');
        Hotel hotel48 = new Hotel((int) 'a');
        hotel48.displayRoomStatus();
        Room room50 = hotel48.findAvailableRoom();
        hotel46.reserveRoom(room50);
        hotel14.reserveRoom(room50);
        hotel1.reserveRoom(room50);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room2);
        org.junit.Assert.assertNotNull(room4);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room8);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNull(room44);
        org.junit.Assert.assertNotNull(room50);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0981");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel(1);
        hotel16.displayRoomStatus();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) 1);
        Room room43 = hotel42.findAvailableRoom();
        hotel38.reserveRoom(room43);
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel38.reserveRoom(room47);
        hotel29.reserveRoom(room47);
        hotel20.reserveRoom(room47);
        hotel16.reserveRoom(room47);
        hotel7.reserveRoom(room47);
        hotel1.reserveRoom(room47);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNotNull(room43);
        org.junit.Assert.assertNotNull(room47);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0982");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room6 = hotel1.findAvailableRoom();
        Hotel hotel8 = new Hotel((int) (short) 0);
        Room room9 = hotel8.findAvailableRoom();
        Hotel hotel11 = new Hotel((int) (byte) -1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Hotel hotel15 = new Hotel((int) (byte) -1);
        Room room16 = hotel15.findAvailableRoom();
        hotel15.displayRoomStatus();
        Hotel hotel19 = new Hotel((int) (byte) 1);
        Room room20 = hotel19.findAvailableRoom();
        hotel15.reserveRoom(room20);
        hotel15.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) -1);
        Room room25 = hotel24.findAvailableRoom();
        hotel24.displayRoomStatus();
        Hotel hotel28 = new Hotel((int) (byte) 1);
        Room room29 = hotel28.findAvailableRoom();
        hotel24.reserveRoom(room29);
        Hotel hotel32 = new Hotel((int) (byte) 1);
        Room room33 = hotel32.findAvailableRoom();
        hotel24.reserveRoom(room33);
        hotel15.reserveRoom(room33);
        Hotel hotel37 = new Hotel((int) (byte) -1);
        Room room38 = hotel37.findAvailableRoom();
        hotel37.displayRoomStatus();
        Hotel hotel41 = new Hotel((int) (byte) 1);
        Room room42 = hotel41.findAvailableRoom();
        hotel37.reserveRoom(room42);
        Hotel hotel45 = new Hotel((int) (byte) 1);
        Room room46 = hotel45.findAvailableRoom();
        hotel37.reserveRoom(room46);
        hotel15.reserveRoom(room46);
        hotel11.reserveRoom(room46);
        hotel8.reserveRoom(room46);
        hotel8.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) ' ');
        Hotel hotel55 = new Hotel((int) 'a');
        hotel55.displayRoomStatus();
        Room room57 = hotel55.findAvailableRoom();
        hotel53.reserveRoom(room57);
        hotel8.reserveRoom(room57);
        Hotel hotel61 = new Hotel(10);
        Room room62 = hotel61.findAvailableRoom();
        Room room63 = hotel61.findAvailableRoom();
        hotel8.reserveRoom(room63);
        hotel1.reserveRoom(room63);
        Room room66 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass68 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room29);
        org.junit.Assert.assertNotNull(room33);
        org.junit.Assert.assertNull(room38);
        org.junit.Assert.assertNotNull(room42);
        org.junit.Assert.assertNotNull(room46);
        org.junit.Assert.assertNotNull(room57);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room63);
        org.junit.Assert.assertNull(room66);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0983");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(1);
        hotel7.displayRoomStatus();
        Hotel hotel10 = new Hotel(10);
        Room room11 = hotel10.findAvailableRoom();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        Hotel hotel21 = new Hotel((int) (byte) -1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Hotel hotel25 = new Hotel((int) (byte) 1);
        Room room26 = hotel25.findAvailableRoom();
        hotel21.reserveRoom(room26);
        hotel21.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) -1);
        Room room31 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) 1);
        Room room35 = hotel34.findAvailableRoom();
        hotel30.reserveRoom(room35);
        hotel30.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) -1);
        Room room40 = hotel39.findAvailableRoom();
        hotel39.displayRoomStatus();
        Hotel hotel43 = new Hotel((int) (byte) 1);
        Room room44 = hotel43.findAvailableRoom();
        hotel39.reserveRoom(room44);
        Hotel hotel47 = new Hotel((int) (byte) 1);
        Room room48 = hotel47.findAvailableRoom();
        hotel39.reserveRoom(room48);
        hotel30.reserveRoom(room48);
        hotel21.reserveRoom(room48);
        hotel13.reserveRoom(room48);
        hotel10.reserveRoom(room48);
        hotel7.reserveRoom(room48);
        hotel1.reserveRoom(room48);
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass57 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNotNull(room26);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNotNull(room35);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNotNull(room44);
        org.junit.Assert.assertNotNull(room48);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0984");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Hotel hotel3 = new Hotel((int) (byte) -1);
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        Hotel hotel7 = new Hotel((int) (byte) -1);
        Room room8 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel7.reserveRoom(room12);
        hotel7.displayRoomStatus();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) 1);
        Room room21 = hotel20.findAvailableRoom();
        hotel16.reserveRoom(room21);
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel16.reserveRoom(room25);
        hotel7.reserveRoom(room25);
        hotel3.reserveRoom(room25);
        hotel3.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel3.reserveRoom(room49);
        hotel1.reserveRoom(room49);
        Hotel hotel55 = new Hotel(0);
        hotel55.displayRoomStatus();
        Hotel hotel58 = new Hotel((int) (byte) 1);
        Room room59 = hotel58.findAvailableRoom();
        hotel55.reserveRoom(room59);
        hotel55.displayRoomStatus();
        Hotel hotel63 = new Hotel((int) 'a');
        hotel63.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        hotel63.reserveRoom(room71);
        hotel55.reserveRoom(room71);
        hotel1.reserveRoom(room71);
        java.lang.Class<?> wildcardClass76 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room59);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0985");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Room room7 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room7);
        Hotel hotel10 = new Hotel((int) (byte) 1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Room room13 = hotel10.findAvailableRoom();
        Room room14 = hotel10.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) 1);
        Room room17 = hotel16.findAvailableRoom();
        hotel10.reserveRoom(room17);
        hotel1.reserveRoom(room17);
        Hotel hotel21 = new Hotel((int) (short) 0);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Room room24 = hotel21.findAvailableRoom();
        Hotel hotel26 = new Hotel((int) (short) 0);
        Room room27 = hotel26.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) 'a');
        hotel29.displayRoomStatus();
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        hotel29.reserveRoom(room37);
        hotel29.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) -1);
        Room room47 = hotel46.findAvailableRoom();
        hotel46.displayRoomStatus();
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel46.reserveRoom(room51);
        hotel46.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        Hotel hotel63 = new Hotel((int) (byte) 1);
        Room room64 = hotel63.findAvailableRoom();
        hotel55.reserveRoom(room64);
        hotel46.reserveRoom(room64);
        Hotel hotel68 = new Hotel((int) (byte) -1);
        Room room69 = hotel68.findAvailableRoom();
        hotel68.displayRoomStatus();
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel68.reserveRoom(room73);
        Hotel hotel76 = new Hotel((int) (byte) 1);
        Room room77 = hotel76.findAvailableRoom();
        hotel68.reserveRoom(room77);
        hotel46.reserveRoom(room77);
        hotel42.reserveRoom(room77);
        hotel29.reserveRoom(room77);
        hotel26.reserveRoom(room77);
        hotel21.reserveRoom(room77);
        hotel1.reserveRoom(room77);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room7);
        org.junit.Assert.assertNotNull(room11);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNotNull(room17);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room64);
        org.junit.Assert.assertNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNotNull(room77);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0986");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room11 = hotel1.findAvailableRoom();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room11);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0987");
        Hotel hotel1 = new Hotel((int) ' ');
        Hotel hotel3 = new Hotel((int) 'a');
        hotel3.displayRoomStatus();
        Room room5 = hotel3.findAvailableRoom();
        hotel1.reserveRoom(room5);
        Hotel hotel8 = new Hotel(0);
        hotel8.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel8.reserveRoom(room12);
        Room room14 = hotel8.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        Room room17 = hotel16.findAvailableRoom();
        hotel16.displayRoomStatus();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel20.reserveRoom(room38);
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        Hotel hotel50 = new Hotel((int) (byte) 1);
        Room room51 = hotel50.findAvailableRoom();
        hotel42.reserveRoom(room51);
        hotel20.reserveRoom(room51);
        hotel16.reserveRoom(room51);
        hotel8.reserveRoom(room51);
        hotel1.reserveRoom(room51);
        java.lang.Class<?> wildcardClass57 = hotel1.getClass();
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNotNull(room51);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0988");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass10 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0989");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Room room8 = hotel1.findAvailableRoom();
        Room room9 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel13 = new Hotel((int) (byte) -1);
        Room room14 = hotel13.findAvailableRoom();
        hotel13.displayRoomStatus();
        Hotel hotel17 = new Hotel((int) (byte) 1);
        Room room18 = hotel17.findAvailableRoom();
        hotel13.reserveRoom(room18);
        hotel13.displayRoomStatus();
        Hotel hotel22 = new Hotel(1);
        hotel22.displayRoomStatus();
        hotel22.displayRoomStatus();
        Hotel hotel26 = new Hotel((int) (byte) -1);
        Room room27 = hotel26.findAvailableRoom();
        hotel26.displayRoomStatus();
        Hotel hotel30 = new Hotel((int) (byte) 1);
        Room room31 = hotel30.findAvailableRoom();
        hotel26.reserveRoom(room31);
        hotel26.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) -1);
        Room room36 = hotel35.findAvailableRoom();
        hotel35.displayRoomStatus();
        Hotel hotel39 = new Hotel((int) (byte) 1);
        Room room40 = hotel39.findAvailableRoom();
        hotel35.reserveRoom(room40);
        hotel35.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        Hotel hotel52 = new Hotel((int) (byte) 1);
        Room room53 = hotel52.findAvailableRoom();
        hotel44.reserveRoom(room53);
        hotel35.reserveRoom(room53);
        hotel26.reserveRoom(room53);
        hotel22.reserveRoom(room53);
        hotel13.reserveRoom(room53);
        hotel1.reserveRoom(room53);
        Room room60 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room14);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNotNull(room31);
        org.junit.Assert.assertNull(room36);
        org.junit.Assert.assertNotNull(room40);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNotNull(room53);
        org.junit.Assert.assertNull(room60);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0990");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        Hotel hotel27 = new Hotel((int) (byte) -1);
        hotel27.displayRoomStatus();
        Room room29 = hotel27.findAvailableRoom();
        Hotel hotel31 = new Hotel((int) (byte) -1);
        Room room32 = hotel31.findAvailableRoom();
        hotel31.displayRoomStatus();
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel31.reserveRoom(room36);
        hotel31.displayRoomStatus();
        Hotel hotel40 = new Hotel((int) (byte) -1);
        Room room41 = hotel40.findAvailableRoom();
        hotel40.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) 1);
        Room room45 = hotel44.findAvailableRoom();
        hotel40.reserveRoom(room45);
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel40.reserveRoom(room49);
        hotel31.reserveRoom(room49);
        hotel27.reserveRoom(room49);
        hotel27.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) -1);
        Room room56 = hotel55.findAvailableRoom();
        hotel55.displayRoomStatus();
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel55.reserveRoom(room60);
        hotel55.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel55.reserveRoom(room73);
        hotel27.reserveRoom(room73);
        hotel5.reserveRoom(room73);
        Hotel hotel79 = new Hotel((int) (byte) -1);
        Room room80 = hotel79.findAvailableRoom();
        hotel79.displayRoomStatus();
        Hotel hotel83 = new Hotel((int) (byte) 1);
        Room room84 = hotel83.findAvailableRoom();
        hotel79.reserveRoom(room84);
        hotel5.reserveRoom(room84);
        hotel1.reserveRoom(room84);
        Room room88 = hotel1.findAvailableRoom();
        Room room89 = hotel1.findAvailableRoom();
        Room room90 = hotel1.findAvailableRoom();
        Room room91 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room93 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass94 = room93.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room41);
        org.junit.Assert.assertNotNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room80);
        org.junit.Assert.assertNotNull(room84);
        org.junit.Assert.assertNull(room88);
        org.junit.Assert.assertNull(room89);
        org.junit.Assert.assertNull(room90);
        org.junit.Assert.assertNull(room91);
        org.junit.Assert.assertNull(room93);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0991");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Room room6 = hotel1.findAvailableRoom();
        Room room7 = hotel1.findAvailableRoom();
        Room room8 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel11 = new Hotel((int) (byte) 1);
        Room room12 = hotel11.findAvailableRoom();
        hotel11.displayRoomStatus();
        Room room14 = hotel11.findAvailableRoom();
        Hotel hotel16 = new Hotel((int) (byte) -1);
        hotel16.displayRoomStatus();
        Room room18 = hotel16.findAvailableRoom();
        Hotel hotel20 = new Hotel((int) (byte) -1);
        Room room21 = hotel20.findAvailableRoom();
        hotel20.displayRoomStatus();
        Hotel hotel24 = new Hotel((int) (byte) 1);
        Room room25 = hotel24.findAvailableRoom();
        hotel20.reserveRoom(room25);
        hotel20.displayRoomStatus();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        Hotel hotel37 = new Hotel((int) (byte) 1);
        Room room38 = hotel37.findAvailableRoom();
        hotel29.reserveRoom(room38);
        hotel20.reserveRoom(room38);
        hotel16.reserveRoom(room38);
        hotel16.displayRoomStatus();
        Hotel hotel44 = new Hotel((int) (byte) -1);
        Room room45 = hotel44.findAvailableRoom();
        hotel44.displayRoomStatus();
        Hotel hotel48 = new Hotel((int) (byte) 1);
        Room room49 = hotel48.findAvailableRoom();
        hotel44.reserveRoom(room49);
        hotel44.displayRoomStatus();
        Hotel hotel53 = new Hotel((int) (byte) -1);
        Room room54 = hotel53.findAvailableRoom();
        hotel53.displayRoomStatus();
        Hotel hotel57 = new Hotel((int) (byte) 1);
        Room room58 = hotel57.findAvailableRoom();
        hotel53.reserveRoom(room58);
        Hotel hotel61 = new Hotel((int) (byte) 1);
        Room room62 = hotel61.findAvailableRoom();
        hotel53.reserveRoom(room62);
        hotel44.reserveRoom(room62);
        hotel16.reserveRoom(room62);
        hotel11.reserveRoom(room62);
        Room room67 = hotel11.findAvailableRoom();
        Room room68 = hotel11.findAvailableRoom();
        hotel1.reserveRoom(room68);
        java.lang.Class<?> wildcardClass70 = room68.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNull(room7);
        org.junit.Assert.assertNull(room8);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room14);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room21);
        org.junit.Assert.assertNotNull(room25);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNotNull(room38);
        org.junit.Assert.assertNull(room45);
        org.junit.Assert.assertNotNull(room49);
        org.junit.Assert.assertNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNotNull(room62);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room68);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0992");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel1.reserveRoom(room10);
        Room room12 = hotel1.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room26 = hotel1.findAvailableRoom();
        Room room27 = hotel1.findAvailableRoom();
        Hotel hotel29 = new Hotel((int) (byte) -1);
        Room room30 = hotel29.findAvailableRoom();
        hotel29.displayRoomStatus();
        Hotel hotel33 = new Hotel((int) (byte) 1);
        Room room34 = hotel33.findAvailableRoom();
        hotel29.reserveRoom(room34);
        hotel29.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        Room room39 = hotel38.findAvailableRoom();
        hotel38.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        Hotel hotel64 = new Hotel((int) (byte) -1);
        Room room65 = hotel64.findAvailableRoom();
        hotel64.displayRoomStatus();
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel64.reserveRoom(room69);
        Hotel hotel72 = new Hotel((int) (byte) 1);
        Room room73 = hotel72.findAvailableRoom();
        hotel64.reserveRoom(room73);
        hotel42.reserveRoom(room73);
        hotel38.reserveRoom(room73);
        hotel29.reserveRoom(room73);
        Room room78 = hotel29.findAvailableRoom();
        Hotel hotel80 = new Hotel((int) (short) 1);
        Hotel hotel82 = new Hotel((int) (short) 0);
        Room room83 = hotel82.findAvailableRoom();
        Hotel hotel85 = new Hotel(10);
        Room room86 = hotel85.findAvailableRoom();
        hotel82.reserveRoom(room86);
        hotel80.reserveRoom(room86);
        Room room89 = hotel80.findAvailableRoom();
        hotel29.reserveRoom(room89);
        hotel1.reserveRoom(room89);
        Room room92 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room12);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room26);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNotNull(room34);
        org.junit.Assert.assertNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNull(room83);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room89);
        org.junit.Assert.assertNull(room92);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0993");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Room room29 = hotel1.findAvailableRoom();
        Room room30 = hotel1.findAvailableRoom();
        Room room31 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel34 = new Hotel((int) (byte) -1);
        Room room35 = hotel34.findAvailableRoom();
        hotel34.displayRoomStatus();
        Hotel hotel38 = new Hotel((int) (byte) 1);
        Room room39 = hotel38.findAvailableRoom();
        hotel34.reserveRoom(room39);
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        hotel51.displayRoomStatus();
        Hotel hotel60 = new Hotel((int) (byte) -1);
        Room room61 = hotel60.findAvailableRoom();
        hotel60.displayRoomStatus();
        Hotel hotel64 = new Hotel((int) (byte) 1);
        Room room65 = hotel64.findAvailableRoom();
        hotel60.reserveRoom(room65);
        Hotel hotel68 = new Hotel((int) (byte) 1);
        Room room69 = hotel68.findAvailableRoom();
        hotel60.reserveRoom(room69);
        hotel51.reserveRoom(room69);
        hotel42.reserveRoom(room69);
        hotel34.reserveRoom(room69);
        hotel1.reserveRoom(room69);
        java.lang.Class<?> wildcardClass75 = hotel1.getClass();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room29);
        org.junit.Assert.assertNull(room30);
        org.junit.Assert.assertNull(room31);
        org.junit.Assert.assertNull(room35);
        org.junit.Assert.assertNotNull(room39);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNull(room61);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0994");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel5 = new Hotel((int) (byte) 1);
        Room room6 = hotel5.findAvailableRoom();
        hotel1.reserveRoom(room6);
        hotel1.displayRoomStatus();
        Hotel hotel10 = new Hotel((int) (byte) -1);
        Room room11 = hotel10.findAvailableRoom();
        hotel10.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) 1);
        Room room15 = hotel14.findAvailableRoom();
        hotel10.reserveRoom(room15);
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel10.reserveRoom(room19);
        hotel1.reserveRoom(room19);
        Room room22 = hotel1.findAvailableRoom();
        Room room23 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room25 = hotel1.findAvailableRoom();
        Hotel hotel27 = new Hotel((int) ' ');
        hotel27.displayRoomStatus();
        hotel27.displayRoomStatus();
        Room room30 = hotel27.findAvailableRoom();
        hotel1.reserveRoom(room30);
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room6);
        org.junit.Assert.assertNull(room11);
        org.junit.Assert.assertNotNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNull(room22);
        org.junit.Assert.assertNull(room23);
        org.junit.Assert.assertNull(room25);
        org.junit.Assert.assertNotNull(room30);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0995");
        Hotel hotel1 = new Hotel((int) 'a');
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) -1);
        Room room5 = hotel4.findAvailableRoom();
        hotel4.displayRoomStatus();
        Hotel hotel8 = new Hotel((int) (byte) 1);
        Room room9 = hotel8.findAvailableRoom();
        hotel4.reserveRoom(room9);
        hotel1.reserveRoom(room9);
        Room room12 = hotel1.findAvailableRoom();
        Room room13 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        java.lang.Class<?> wildcardClass15 = hotel1.getClass();
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNotNull(room9);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0996");
        Hotel hotel1 = new Hotel(0);
        Room room2 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel(0);
        hotel6.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel6.reserveRoom(room10);
        hotel1.reserveRoom(room10);
        Hotel hotel14 = new Hotel((int) (short) 0);
        Room room15 = hotel14.findAvailableRoom();
        Hotel hotel17 = new Hotel(10);
        Room room18 = hotel17.findAvailableRoom();
        hotel14.reserveRoom(room18);
        Hotel hotel21 = new Hotel((int) (byte) 1);
        Room room22 = hotel21.findAvailableRoom();
        hotel21.displayRoomStatus();
        Room room24 = hotel21.findAvailableRoom();
        hotel14.reserveRoom(room24);
        hotel1.reserveRoom(room24);
        Room room27 = hotel1.findAvailableRoom();
        Room room28 = hotel1.findAvailableRoom();
        Hotel hotel30 = new Hotel((int) 'a');
        Hotel hotel32 = new Hotel((int) (byte) -1);
        Room room33 = hotel32.findAvailableRoom();
        hotel32.displayRoomStatus();
        Hotel hotel36 = new Hotel((int) (byte) 1);
        Room room37 = hotel36.findAvailableRoom();
        hotel32.reserveRoom(room37);
        Hotel hotel40 = new Hotel((int) (byte) 1);
        Room room41 = hotel40.findAvailableRoom();
        hotel32.reserveRoom(room41);
        Room room43 = hotel32.findAvailableRoom();
        Hotel hotel45 = new Hotel((int) (byte) -1);
        Room room46 = hotel45.findAvailableRoom();
        hotel45.displayRoomStatus();
        Hotel hotel49 = new Hotel((int) (byte) 1);
        Room room50 = hotel49.findAvailableRoom();
        hotel45.reserveRoom(room50);
        Hotel hotel53 = new Hotel((int) (byte) 1);
        Room room54 = hotel53.findAvailableRoom();
        hotel45.reserveRoom(room54);
        hotel32.reserveRoom(room54);
        hotel30.reserveRoom(room54);
        Room room58 = hotel30.findAvailableRoom();
        hotel1.reserveRoom(room58);
        Room room60 = hotel1.findAvailableRoom();
        java.lang.Class<?> wildcardClass61 = hotel1.getClass();
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room18);
        org.junit.Assert.assertNotNull(room22);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNull(room33);
        org.junit.Assert.assertNotNull(room37);
        org.junit.Assert.assertNotNull(room41);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNull(room46);
        org.junit.Assert.assertNotNull(room50);
        org.junit.Assert.assertNotNull(room54);
        org.junit.Assert.assertNotNull(room58);
        org.junit.Assert.assertNull(room60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0997");
        Hotel hotel1 = new Hotel(0);
        hotel1.displayRoomStatus();
        Hotel hotel4 = new Hotel((int) (byte) 1);
        Room room5 = hotel4.findAvailableRoom();
        hotel1.reserveRoom(room5);
        hotel1.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (short) 0);
        Room room10 = hotel9.findAvailableRoom();
        Hotel hotel12 = new Hotel(10);
        Room room13 = hotel12.findAvailableRoom();
        hotel9.reserveRoom(room13);
        hotel1.reserveRoom(room13);
        Room room16 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Room room18 = hotel1.findAvailableRoom();
        Room room19 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) 'a');
        hotel22.displayRoomStatus();
        Room room24 = hotel22.findAvailableRoom();
        hotel1.reserveRoom(room24);
        Room room26 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass27 = room26.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(room5);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNotNull(room13);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room18);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room24);
        org.junit.Assert.assertNull(room26);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0998");
        Hotel hotel1 = new Hotel((int) (short) 0);
        Room room2 = hotel1.findAvailableRoom();
        Room room3 = hotel1.findAvailableRoom();
        Room room4 = hotel1.findAvailableRoom();
        Room room5 = hotel1.findAvailableRoom();
        Hotel hotel7 = new Hotel(0);
        hotel7.displayRoomStatus();
        Room room9 = hotel7.findAvailableRoom();
        Room room10 = hotel7.findAvailableRoom();
        hotel7.displayRoomStatus();
        hotel7.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) ' ');
        Hotel hotel16 = new Hotel((int) (short) 0);
        Room room17 = hotel16.findAvailableRoom();
        Hotel hotel19 = new Hotel(10);
        Room room20 = hotel19.findAvailableRoom();
        hotel16.reserveRoom(room20);
        hotel14.reserveRoom(room20);
        hotel7.reserveRoom(room20);
        hotel1.reserveRoom(room20);
        hotel1.displayRoomStatus();
        Room room26 = hotel1.findAvailableRoom();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass27 = room26.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(room2);
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room4);
        org.junit.Assert.assertNull(room5);
        org.junit.Assert.assertNull(room9);
        org.junit.Assert.assertNull(room10);
        org.junit.Assert.assertNull(room17);
        org.junit.Assert.assertNotNull(room20);
        org.junit.Assert.assertNull(room26);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test0999");
        Hotel hotel1 = new Hotel((int) (byte) -1);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        Hotel hotel5 = new Hotel((int) (byte) -1);
        Room room6 = hotel5.findAvailableRoom();
        hotel5.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel5.reserveRoom(room10);
        hotel5.displayRoomStatus();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        Room room15 = hotel14.findAvailableRoom();
        hotel14.displayRoomStatus();
        Hotel hotel18 = new Hotel((int) (byte) 1);
        Room room19 = hotel18.findAvailableRoom();
        hotel14.reserveRoom(room19);
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel14.reserveRoom(room23);
        hotel5.reserveRoom(room23);
        hotel1.reserveRoom(room23);
        Room room27 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel30 = new Hotel(0);
        hotel30.displayRoomStatus();
        Room room32 = hotel30.findAvailableRoom();
        hotel30.displayRoomStatus();
        Hotel hotel35 = new Hotel(10);
        Room room36 = hotel35.findAvailableRoom();
        Hotel hotel38 = new Hotel((int) (byte) -1);
        hotel38.displayRoomStatus();
        Room room40 = hotel38.findAvailableRoom();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel38.reserveRoom(room60);
        hotel38.displayRoomStatus();
        Hotel hotel66 = new Hotel((int) (byte) -1);
        Room room67 = hotel66.findAvailableRoom();
        hotel66.displayRoomStatus();
        Hotel hotel70 = new Hotel((int) (byte) 1);
        Room room71 = hotel70.findAvailableRoom();
        hotel66.reserveRoom(room71);
        Hotel hotel74 = new Hotel((int) (byte) 1);
        Room room75 = hotel74.findAvailableRoom();
        hotel66.reserveRoom(room75);
        hotel38.reserveRoom(room75);
        hotel35.reserveRoom(room75);
        hotel30.reserveRoom(room75);
        hotel1.reserveRoom(room75);
        Room room81 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNull(room3);
        org.junit.Assert.assertNull(room6);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNull(room15);
        org.junit.Assert.assertNotNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room27);
        org.junit.Assert.assertNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room40);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNull(room67);
        org.junit.Assert.assertNotNull(room71);
        org.junit.Assert.assertNotNull(room75);
        org.junit.Assert.assertNull(room81);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "HotelTest1.test1000");
        Hotel hotel1 = new Hotel(10);
        hotel1.displayRoomStatus();
        Room room3 = hotel1.findAvailableRoom();
        hotel1.displayRoomStatus();
        Hotel hotel6 = new Hotel((int) (byte) 100);
        hotel6.displayRoomStatus();
        Hotel hotel9 = new Hotel((int) (byte) 1);
        Room room10 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Room room12 = hotel9.findAvailableRoom();
        Hotel hotel14 = new Hotel((int) (byte) -1);
        hotel14.displayRoomStatus();
        Room room16 = hotel14.findAvailableRoom();
        Hotel hotel18 = new Hotel((int) (byte) -1);
        Room room19 = hotel18.findAvailableRoom();
        hotel18.displayRoomStatus();
        Hotel hotel22 = new Hotel((int) (byte) 1);
        Room room23 = hotel22.findAvailableRoom();
        hotel18.reserveRoom(room23);
        hotel18.displayRoomStatus();
        Hotel hotel27 = new Hotel((int) (byte) -1);
        Room room28 = hotel27.findAvailableRoom();
        hotel27.displayRoomStatus();
        Hotel hotel31 = new Hotel((int) (byte) 1);
        Room room32 = hotel31.findAvailableRoom();
        hotel27.reserveRoom(room32);
        Hotel hotel35 = new Hotel((int) (byte) 1);
        Room room36 = hotel35.findAvailableRoom();
        hotel27.reserveRoom(room36);
        hotel18.reserveRoom(room36);
        hotel14.reserveRoom(room36);
        hotel14.displayRoomStatus();
        Hotel hotel42 = new Hotel((int) (byte) -1);
        Room room43 = hotel42.findAvailableRoom();
        hotel42.displayRoomStatus();
        Hotel hotel46 = new Hotel((int) (byte) 1);
        Room room47 = hotel46.findAvailableRoom();
        hotel42.reserveRoom(room47);
        hotel42.displayRoomStatus();
        Hotel hotel51 = new Hotel((int) (byte) -1);
        Room room52 = hotel51.findAvailableRoom();
        hotel51.displayRoomStatus();
        Hotel hotel55 = new Hotel((int) (byte) 1);
        Room room56 = hotel55.findAvailableRoom();
        hotel51.reserveRoom(room56);
        Hotel hotel59 = new Hotel((int) (byte) 1);
        Room room60 = hotel59.findAvailableRoom();
        hotel51.reserveRoom(room60);
        hotel42.reserveRoom(room60);
        hotel14.reserveRoom(room60);
        hotel9.reserveRoom(room60);
        Room room65 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Room room67 = hotel9.findAvailableRoom();
        hotel9.displayRoomStatus();
        Room room69 = hotel9.findAvailableRoom();
        Hotel hotel71 = new Hotel(0);
        hotel71.displayRoomStatus();
        Room room73 = hotel71.findAvailableRoom();
        hotel71.displayRoomStatus();
        hotel71.displayRoomStatus();
        Hotel hotel77 = new Hotel((int) (byte) -1);
        Room room78 = hotel77.findAvailableRoom();
        hotel77.displayRoomStatus();
        Hotel hotel81 = new Hotel((int) (byte) 1);
        Room room82 = hotel81.findAvailableRoom();
        hotel77.reserveRoom(room82);
        Hotel hotel85 = new Hotel((int) (byte) 1);
        Room room86 = hotel85.findAvailableRoom();
        hotel77.reserveRoom(room86);
        hotel71.reserveRoom(room86);
        hotel9.reserveRoom(room86);
        hotel6.reserveRoom(room86);
        Room room91 = hotel6.findAvailableRoom();
        hotel1.reserveRoom(room91);
        hotel1.displayRoomStatus();
        org.junit.Assert.assertNotNull(room3);
        org.junit.Assert.assertNotNull(room10);
        org.junit.Assert.assertNotNull(room12);
        org.junit.Assert.assertNull(room16);
        org.junit.Assert.assertNull(room19);
        org.junit.Assert.assertNotNull(room23);
        org.junit.Assert.assertNull(room28);
        org.junit.Assert.assertNotNull(room32);
        org.junit.Assert.assertNotNull(room36);
        org.junit.Assert.assertNull(room43);
        org.junit.Assert.assertNotNull(room47);
        org.junit.Assert.assertNull(room52);
        org.junit.Assert.assertNotNull(room56);
        org.junit.Assert.assertNotNull(room60);
        org.junit.Assert.assertNotNull(room65);
        org.junit.Assert.assertNotNull(room67);
        org.junit.Assert.assertNotNull(room69);
        org.junit.Assert.assertNull(room73);
        org.junit.Assert.assertNull(room78);
        org.junit.Assert.assertNotNull(room82);
        org.junit.Assert.assertNotNull(room86);
        org.junit.Assert.assertNotNull(room91);
    }
}

